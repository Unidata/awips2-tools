#!/bin/bash
#
## CHANGELOG
## See the changelog (./config_awips2.sh history )


function sourceFile() {

# sub-script for sourcing file passed
# USAGE:        source_file $file
# EXAMPLE:      source_file /etc/profile.d/AWIPS.sh

FILE_TO_SOURCE=$1
if [ -f ${FILE_TO_SOURCE} ]
then
        . ${FILE_TO_SOURCE}
        RET_VAL=0
else
        echo -e "WARNING:\t${FILE_TO_SOURCE} does not exist.  Exiting"
        # for now let us exit script...
        RET_VAL=1
fi

return ${RET_VAL}

}

function echo_function() {

# tool which just echos the start / end 
# trying to cut down the number of lines of code

# usage:  echo_function [BEGIN|END] FUNCTIONNAME
# example:  echo_function BEGIN $FUNCNAME 

	functionAction=$1
	functionName=$2

	color_echo blue 1 " -----------------------------------------------"
	color_echo blue 1 "| $functionAction $functionName - $( date ) "
	color_echo blue 1 " -----------------------------------------------"

	return 0
}

function isUp() {

# sub-script for checking availability of a host via ping
# USAGE:	isUp $host
# EXAMPLE:	isUp lx1

ping -q -c2 $1 > /dev/null 2>&1 
return $?

}

function print_bar {

        _int=$((${1} % 8))
        case "${_int}" in
                [04]    )       echo -ne "\b\b\ " ;;
                [15]    )       echo -ne "\b\b| " ;;
                [26]    )       echo -ne "\b\b/ " ;;
                [37]    )       echo -ne "\b\b- " ;;
        esac

}

function find_awips_config() {

# sub-script for finding the proper AWIPS I input localization file
# USAGE:        find_awips_config $file $search_precident
# EXAMPLE:      find_awips_config LWX-wwaConfig.txt [LCNS]
#	
# $search_precident defined:
#	L = Search in localization/XXX
#	C = Search in customFiles
#	N = Search in nationalData
#	W = Search in workFiles (needed for triggers)
#	S = Search in localizationDataSets
#
# order of precidents:
# /awips/fxa/data/localization/XXX
# /data/fxa/customFiles/
# /data/fxa/nationalData
# /data/fxa/workFiles
# /awips/fxa/data/localizationDataSets/XXX  (last resort to use AWIPS I output file)

userFile=$1
searchLoc=$2
foundFile=1
retLocation=

	searchLocLength=${#searchLoc}
	for i in $( seq 0 $(( searchLocLength-1 )) )
	do
		case ${searchLoc:$i:1} in
			"L"	)	local searchLocalization=true ;;
			"C"	)	local searchCustomFiles=true ;;
			"N"	)	local searchNationalData=true ;;
			"W"	)	local searchWorkFiles=true ;;
			"S"	)	local searchLocDataSets=true ;;
			*	)	;;
		esac
	done

	debug_echo "\t$FUNCNAME\tSearching for $userFile"
	
	if [ "${searchCustomFiles}" ] && [ ${foundFile} -ne 0 ]
	then
		if [ -f ${pathPrefix}/data/fxa/customFiles/${userFile} ] 
		then
			foundFile=0
			retLocation=${pathPrefix}/data/fxa/customFiles
		fi
	fi	

	if [ "${searchLocalization}" ] && [ ${foundFile} -ne 0 ]
	then
		if [ -f ${pathPrefix}/awips/fxa/data/localization/${LOC_SITE}/${userFile} ]
		then
			foundFile=0
			retLocation=${pathPrefix}/awips/fxa/data/localization/${LOC_SITE}
		fi
	fi
	
	if [ "${searchNationalData}" ] && [ ${foundFile} -ne 0 ]
	then
		if [ -f ${pathPrefix}/data/fxa/nationalData/${userFile} ] 
		then
			foundFile=0
			retLocation=${pathPrefix}/data/fxa/nationalData
		fi
	fi
	
	if [ "${searchWorkFiles}" ] && [ ${foundFile} -ne 0 ]
	then
		if [ -f ${pathPrefix}/data/fxa/workFiles/${userFile} ] 
		then
			foundFile=0
			retLocation=${pathPrefix}/data/fxa/workFiles
		fi
	fi
		
	if [ "${searchLocDataSets}" ] && [ ${foundFile} -ne 0 ]
	then
		if [ -f ${pathPrefix}/awips/fxa/data/localizationDataSets/${LOC_SITE}/${userFile} ] 
		then
			foundFile=0
			retLocation=${pathPrefix}/awips/fxa/data/localizationDataSets/${LOC_SITE}
		fi
	fi
	
	debug_echo "\t$FUNCNAME\tReturning ${foundFile} (file =  ${retLocation})"
	return ${foundFile}

}


function answer_me() {

        answer=$1
	case ${answer} in
                [Yy] ) retVal=0 ;;
                [Nn] ) retVal=1 ;;
                * ) retVal=255 ;;
        esac
	if [[ "${answer}" ]] 
	then
		echo -e "\t\tUser Answered:  ${answer}"
	fi
        return ${retVal}

}

function parseXmlTag() {

# Usage:    parseXmlTag <tagToParse> <fileFromWhichToParse>
# Example:  parseXmlTag installPath dx1-server.xml


        TAG=$1
        FILE=$2

        LINE=$( grep -w "$TAG" $FILE )
	VALUE=$( echo $LINE | sed -e "s/<$TAG>//1" -e "s/<\/$TAG>//1" -e "s/^[[:space:]]*//g" -e "s/[[:space:]]*$//g" )

        export XML_RETURN="$VALUE"

}

function check_null_variable() {

	var1=$1
	if [ -z ${var1} ]
	then
		RETVAL=0
	else
		RETVAL=1
	fi
	
	return $RETVAL
}

function test_function() {

    color_echo green 1 "Test Successful"
    return 0

}

function modify_pgsec() {
	debug_echo "Beginning $FUNCNAME ......\n"
	# Used to modify pg_hba.conf file
	# Usage modify_pgsec type database method
	lType=$1
	lDB=$2
	lMethod=$3

        #Check for line, first
        if ! grep ^${lType} ${DB_LOCATION}/pg_hba.conf | grep ${lDB} > /dev/null
        then
                echo -e "ERROR: The database ${lDB} does not have a ${lType} entry in ${DB_LOCATION}/pg_hba.conf"
                exit 1
        fi


	case ${lMethod} in 
		"trust"	)	oMethod="md5" ;;
		"md5"	)	oMethod="trust" ;;
		*	)	echo -e "Invalid Method, must be trust or md5"; exit 1 ;;
	esac

	#Check to see if we should make the modification
	madePgHbaChange=0
	if grep ^${lType} ${DB_LOCATION}/pg_hba.conf | grep ${lDB} | grep ${lMethod} | grep ${SUBNET} &> /dev/null 
	then
		return 0		# We don't need to do anything if it is already set to ${lMethod}
	else
		madePgHbaChange=1
	fi
	
	#Make the modification
	case ${lType} in
		"host"	)	sed -i "/^${lType}.*${lDB}.*${SUBNET}/s/${oMethod}/${lMethod}/1" ${DB_LOCATION}/pg_hba.conf ;;
		"local"	)	sed -i "/^${lType}.*${lDB}.*all/s/${oMethod}/${lMethod}/1" ${DB_LOCATION}/pg_hba.conf ;;
		*	)	echo -e "Invalid connection type:  Valid values are host, local, or hostssl" ; exit 1 ;;
	esac

	# Read in new file
	su - awips -lc "pg_ctl -D ${DB_LOCATION} reload" > /dev/null 2>&1
	debug_echo "Completed $FUNCNAME .....\n"

}

function return_rfc() {

	#lat=$1
	#lon=$2
	locSite=$1

	# return_rfc returns a value for the RFC which encompasses the WFO center point
	# Utilizes AWIPS II maps db, so postgres should be running
	# Utilizes modify_pgsec 
	
	# Usage: 
	#	return_rfc lat lon
	# Example:
	#	return_rfc 38.635159 -77.947350
	# Would return LWX's RFC 

	#sqlCmd="select site_id,rfc_name,basin_id from mapdata.rfc where ST_Contains(the_geom, ST_GeomFromText('POINT (${lon} ${lat})', 4326));"
	sqlCmd="select b.site_id,b.rfc_name,b.basin_id from mapdata.cwa as a, mapdata.rfc as b where a.cwa = '${locSite}' and ST_Intersects(a.the_geom,b.the_geom);"
	modify_pgsec ${dbaccessType} maps trust >& /dev/null
	#rfcInfo=$( su awips -lc "psql -h $EDEXDBSVR -d maps -U awips --tuples-only -c \"${sqlCmd}\" " )
	rfcInfo=( $( su awips -lc "psql -h $EDEXDBSVR -d maps -U awips --tuples-only -c \"${sqlCmd}\" " | awk '{print $1}' | xargs ) )
	#rfcName=$( echo $rfcInfo | cut -f1 -d"|" )
	if [[ "${madePgHbaChange}" == 1 ]]; then modify_pgsec ${dbaccessType} maps md5 >& /dev/null ; fi
	#myRFC=$( echo ${rfcName} | sed -e "s/^[[:space:]]*//g" -e "s/[[:space:]]$//g" )
	
}

function return_location_text() {

	# returns text location of site id passed

	local lookupSite=$1
	local retVal=0
	siteLocationText=

	case "${lookupSite}" in
		"ABQ"	)	siteLocationText="ALBUQUERQUE" ;;
		"ABR"	)	siteLocationText="ABERDEEN" ;;
		"AFC"	)	siteLocationText="ANCHORAGE" ;;
		"AFG"	)	siteLocationText="FAIRBANKS" ;;
		"AJK"	)	siteLocationText="JUNEAU" ;;
		"AKQ"	)	siteLocationText="WAKEFIELD" ;;
		"ALY"	)	siteLocationText="ALBANY" ;;
		"AMA"	)	siteLocationText="AMARILLO" ;;
		"APX"	)	siteLocationText="GAYLORD" ;;
		"ARX"	)	siteLocationText="LA CROSSE"	;;
		"BGM"	)	siteLocationText="BINGHAMTON" ;;
		"BIS"	)	siteLocationText="BISMARCK"  ;;
		"BMX"	)	siteLocationText="BIRMINGHAM" ;;
		"BOI"	)	siteLocationText="BOISE" ;;
		"BOU"	)	siteLocationText="DENVER" ;;
		"BOX"	)	siteLocationText="TAUNTON" ;;
		"BRO"	)	siteLocationText="BROWNSVILLE" ;;
		"BTV"	)	siteLocationText="BURLINGTON" ;;
		"BUF"	)	siteLocationText="BUFFALO" ;;
		"BYZ"	)	siteLocationText="BILLINGS" ;;
		"CAE"	)	siteLocationText="COLUMBIA" ;;
		"CAR"	)	siteLocationText="CARIBOU" ;;
		"CHS"	)	siteLocationText="CHARLESTON" ;;
		"CLE"	)	siteLocationText="CLEVELAND" ;;
		"CRP"	)	siteLocationText="CORPUS CHRISTI" ;;
		"CTP"	)	siteLocationText="STATE COLLEGE" ;;
		"CYS"	)	siteLocationText="CHEYENNE" ;;
		"DDC"	)	siteLocationText="DODGE CITY" ;;
		"DLH"	)	siteLocationText="DULUTH" ;;
		"DMX"	)	siteLocationText="DES MOINES" ;;
		"DTX"	)	siteLocationText="DETROIT/PONTIAC" ;;
		"DVN"	)	siteLocationText="QUAD CITIES" ;;
		"EAX"	)	siteLocationText="KANSAS CITY/PLEASANT HILL" ;;
		"EKA"	)	siteLocationText="EUREKA" ;;
		"EPZ"	)	siteLocationText="EL PASO" ;;
		"EWX"	)	siteLocationText="AUSTIN/SAN ANTONIO" ;;
		"KEY"	)	siteLocationText="KEY WEST" ;;
		"FFC"	)	siteLocationText="PEACHTREE CITY" ;;
		"FGF"	)	siteLocationText="GRAND FORKS" ;;
		"FGZ"	)	siteLocationText="FLAGSTAFF" ;;
		"FSD"	)	siteLocationText="SIOUX FALLS" ;;
		"FWD"	)	siteLocationText="FORT WORTH" ;;
		"GGW"	)	siteLocationText="GLASGOW" ;;
		"GID"	)	siteLocationText="HASTINGS" ;;
		"GJT"	)	siteLocationText="GRAND JUNCTION" ;;
		"GLD"	)	siteLocationText="GOODLAND" ;;
		"GRB"	)	siteLocationText="GREEN BAY" ;;
		"GRR"	)	siteLocationText="GRAND RAPIDS" ;;
		"GSP"	)	siteLocationText="GREENVILLE-SPARTANBURG" ;;
		"GUM"	)	siteLocationText="TIYAN" ;;
		"GYX"	)	siteLocationText="GRAY" ;;
		"HFO"	)	siteLocationText="HONOLULU" ;;
		"HGX"	)	siteLocationText="HOUSTON/GALVESTON" ;;
		"HNX"	)	siteLocationText="SAN JOAQUIN VALLEY" ;;
		"HUN"	)	siteLocationText="HUNTSVILLE" ;;
		"ICT"	)	siteLocationText="WICHITA" ;;
		"ILM"	)	siteLocationText="WILMINGTON" ;;
		"ILN"	)	siteLocationText="WILMINGTON" ;;
		"ILX"	)	siteLocationText="LINCOLN" ;;
		"IND"	)	siteLocationText="INDIANAPOLIS" ;;
		"IWX"	)	siteLocationText="NORTHERN INDIA" ;;
		"JAN"	)	siteLocationText="JACKSON" ;;
		"JAX"	)	siteLocationText="JACKSONVILLE" ;;
		"JKL"	)	siteLocationText="JACKSON" ;;
		"LBF"	)	siteLocationText="NORTH PLATTE" ;;
		"LCH"	)	siteLocationText="LAKE CHARLES" ;;
		"LIX"	)	siteLocationText="NEW ORLEANS" ;;
		"LKN"	)	siteLocationText="ELKO" ;;
		"LMK"	)	siteLocationText="LOUISVILLE" ;;
		"LOT"	)	siteLocationText="CHICAGO/ROMEOVILLE" ;;
		"LSX"	)	siteLocationText="ST LOUIS" ;;
		"LUB"	)	siteLocationText="LUBBOCK" ;;
		"LWX"	)	siteLocationText="BALTIMORE MD/WASHINGTON" ;;
		"LZK"	)	siteLocationText="LITTLE ROCK" ;;
		"MAF"	)	siteLocationText="MIDLAND/ODESSA" ;;
		"MEG"	)	siteLocationText="MEMPHIS" ;;
		"MFL"	)	siteLocationText="MIAMI"  ;;
		"MFR"	)	siteLocationText="MEDFORD" ;;
		"MHX"	)	siteLocationText="NEWPORT/MOREHEAD CITY" ;;
		"MKX"	)	siteLocationText="MILWAUKEE/SULLIVAN" ;;
		"MLB"	)	siteLocationText="MELBOURNE" ;;
		"MOB"	)	siteLocationText="MOBILE" ;;
		"MPX"	)	siteLocationText="TWIN CITIES/CHANHASSEN" ;;
		"MQT"	)	siteLocationText="MARQUETTE" ;;
		"MRX"	)	siteLocationText="MORRISTOWN" ;;
		"MSO"	)	siteLocationText="MISSOULA" ;;
		"MTR"	)	siteLocationText="SAN FRANCISCO" ;;
		"OAX"	)	siteLocationText="OMAHA/VALLEY NEBRAS" ;;
		"OHX"	)	siteLocationText="NASHVILLE" ;;
		"OKX"	)	siteLocationText="UPTON" ;;
		"OTX"	)	siteLocationText="SPOKANE" ;;
		"OUN"	)	siteLocationText="NORMAN" ;;
		"PAH"	)	siteLocationText="PADUCAH" ;;
		"PBZ"	)	siteLocationText="PITTSBURGH" ;;
		"PDT"	)	siteLocationText="PENDLETON" ;;
		"PHI"	)	siteLocationText="MOUNT HOLLY" ;;
		"PIH"	)	siteLocationText="POCATELLO/IDAHO FALLS" ;;
		"PQR"	)	siteLocationText="PORTLAND" ;;
		"PSR"	)	siteLocationText="PHOENIX" ;;
		"PUB"	)	siteLocationText="PUEBLO" ;;
		"RAH"	)	siteLocationText="RALEIGH" ;;
		"REV"	)	siteLocationText="RENO" ;;
		"RIW"	)	siteLocationText="RIVERTON" ;;
		"RLX"	)	siteLocationText="CHARLESTON" ;;
		"RNK"	)	siteLocationText="BLACKSBURG" ;;
		"SEW"	)	siteLocationText="SEATTLE" ;;
		"SGF"	)	siteLocationText="SPRINGFIELD" ;;
		"SGX"	)	siteLocationText="SAN DIEGO" ;;
		"SHV"	)	siteLocationText="SHREVEPORT" ;;
		"SJT"	)	siteLocationText="SAN ANGELO" ;;
		"SJU"	)	siteLocationText="SAN JUAN" ;;
		"SLC"	)	siteLocationText="SALT LAKE CITY" ;;
		"STO"	)	siteLocationText="SACRAMENTO" ;;
		"TAE"	)	siteLocationText="TALLAHASSEE" ;;
		"TBW"	)	siteLocationText="TAMPA BAY/RUSKIN" ;;
		"TFX"	)	siteLocationText="GREAT FALLS" ;;
		"TOP"	)	siteLocationText="TOPEKA" ;;
		"TSA"	)	siteLocationText="TULSA" ;;
		"TWC"	)	siteLocationText="TUCSON" ;;
		"UNR"	)	siteLocationText="RAPID CITY" ;;
		"VEF"	)	siteLocationText="LAS VEGAS" ;;
		*	)	# unrecognized site! 
				siteLocationText="NULL" 
				retVal=1 ;;
	esac
	
	return ${retVal}
}

function does_dir_exist() {

	dirCheck=$1
	if [ -d ${dirCheck} ]
	then	
		RETVAL=0
	else
		RETVAL=1
	fi

	return $RETVAL

}

function create_tree() {

	parentDir=$1
	subDir=$2
	dirOwner=$3

	su ${dirOwner} -c "umask 002 && mkdir -p ${parentDir}/${subDir}"
	retVal=$?

	return $?
}

function create_subtree() {

	# create_subtree creates and sets ownership for a subtree (to replace create_tree)
	# Assumptions:
	#	-- Assumes the tree will be created in the current $( pwd )

	# Dependencies:
	#	does_dir_exist
	#	create_tree

	# Arguments:
	#	$1 = tree to be created 
	#	$2 = owner of the tree
	#	$3 = group of the tree

	subTree=$1
	dirOwn=$2
	dirGrp=$3

	if ! does_dir_exist ${subTree}
	then
		echo -e "\tCreating $(pwd)/${subTree}................................"
		if ! create_tree $(pwd) ${subTree} ${dirOwn}
		then
			echo -e "\t\aERROR - Creating $(pwd)/${compLocDir} FAILED *************"
			exit 1
		fi
		if [ ! -z ${dirGrp} ]
		then
			chgrp -R ${dirGrp} ${subTree}
		fi
	else
		echo -e "\tSKIPPING creation of $(pwd)/${subTree} - previously existing"
	fi

}

function set_cpsbn_variable() {

	debug_echo "Beginning $FUNCNAME"
	retVal=0

	if ping -c2 cpsbn1 >& /dev/null
	then	
		_cp=cpsbn1
	elif ping -c2 cpsbn2 >& /dev/null
	then
		_cp=cpsbn2
	else
		color_echo red 1 "\tERROR:\t\aNo pingable cpsbn found.  Exiting"
		retVal=1
	fi

	return ${retVal}

}

function set_hydro_site_config() {

	# used to set wxxxList and rxxxList if not set 
	if [[ ! "${wxxxList}" ]]
	then
		color_echo yellow 0 "\tYou have no wxxxList set -- to correctly set the shef.xml and LDM pqact.conf, we need to have this set. "
		color_echo yellow 0 "\tThis value is normally the WFO sites that you want to shef decode SRU[EMSW][1-9] products."
		color_echo yellow 0 "\n\tPlease enter a space delimited value for this variable (e.g KABR KBIS KBIL)"
		read wxxxList
		wxxxList=$( echo $wxxxList | sed -e "s/ /\|/g" )
		echo -e "\tSetting wxxxList to ${wxxxList}"
	fi

	if [[ ! "${rxxxList}" ]]
	then
		color_echo yellow 0 "\tYou have no rxxxList set -- to correctly set the shef.xml and LDM pqact.conf, we need to have this set. "
		color_echo yellow 0 "\tThis value is normally the WFO sites that you want to shef decode FOUS products."
		color_echo yellow 0 "\n\tPlease enter a space delimited value for this variable (e.g KKRF KMKC KMSR)"
		read rxxxList
		rxxxList=$( echo $rxxxList | sed -e "s/ /\|/g" )
		echo -e "\tSetting rxxxList to ${rxxxList}"
	fi

	if [[ ! "${wxxxList}" || ! "${rxxxList}" ]]
	then
		color_echo red 1 "\tERROR: Either wxxxList or rxxxList not set -- exiting!"
		return 1
	else
		return 0
	fi

}

function get_site_type {

	testSite=$1

	arRFCs=( "ACR" "ALR" "FWR" "KRF" "MSR" "ORN" "PTR" "RHA" "RSA" "STR" "TAR" "TIR" "TUA" )

	if ! echo ${arRFCs[@]} | grep ${testSite} > /dev/null
	then
		siteType=WFO
		wfoSite=${testSite}
		arAdjacent=( $( grep ^${LOC_SITE} ${pathPrefix}/data/fxa/nationalData/allAdjacentWFOs.txt | cut -f2 -d"|" | sed "s/PUC/${LOC_SITE}/" ) )
	else
		siteType=RFC
		case "${testSite}" in 
			"ACR"	)	wfoSite=AFC ;;
			"ALR"	)	wfoSite=FFC ;; 
			"FWR"	)	wfoSite=FWD ;;
			"KRF"	)	wfoSite=EAX ;;
			"MSR"	)	wfoSite=MPX ;; 
			"ORN"	)	wfoSite=LIX ;; 
			"PTR"	)	wfoSite=PQR ;;
			"RHA"	)	wfoSite=CTP ;; 
			"RSA"	)	wfoSite=STO ;; 
			"STR"	)	wfoSite=VHW ;;
			"TAR"	)	wfoSite=BOX ;;
			"TIR"	)	wfoSite=ILN ;;
			"TUA"	)	wfoSite=TSA ;;
		esac
		arAdjacent=( $( grep ^${wfoSite} ${pathPrefix}/data/fxa/nationalData/allAdjacentWFOs.txt | cut -f2 -d"|" | sed "s/PUC/${LOC_SITE}/" ) )
	fi

	echo "select lat,lon from mapdata.cwa where wfo='${wfoSite}'" > /tmp/sdc.sql 
	modify_pgsec ${dbaccessType} maps trust
	myCenterPoint=( $( psql -h $EDEXDBSVR --tuples-only -U awips -d maps -f /tmp/sdc.sql | head | awk '{print $1,$3}' ) )
	if [[ "${madePgHbaChange}" -eq 1 ]] ; then modify_pgsec ${dbaccessType} maps md5 ; fi
}

function set_global_variables() {

	#color_echo blue 1 " ------------------------------------------------------"
	debug_echo "Setting Global Variables"
	#color_echo blue 1 " ------------------------------------------------------"

	

	if [[ ${locRoot} == "." ]]
	then
		locRoot=$( pwd )
	fi
	fourthoctet=$(grep GATEWAY /etc/sysconfig/network| grep -v ^# | sed 's/=/ /g'|awk '{print $2}'| cut -f 4 -d'.')
	gway=$(grep GATEWAY /etc/sysconfig/network|grep -v ^# | sed 's/=/ /g'|awk '{print $2}')
	SUBNET="${gway%%$fourthoctet}0"
	EDEXSVR=$(hostname)
	EDEXDBSVR=$(hostname)
	export EDEXDBSVR
	export EDEXSVR

	MYRUNTIME=$( date +%Y%m%d_%H%M%S )
	EDEXSVR=$(hostname)
	
	#if rpm -q awips2-edex > /dev/null ; then EDEX_HOME=$( rpm -q --qf '%{INSTALLPREFIX}' awips2-edex ) ; fi
	#if rpm -q awips2-edex-core > /dev/null ; then EDEX_HOME=$( rpm -q --qf '%{INSTALLPREFIX}' awips2-edex-core )/edex ; fi
	if [[ ! "${EDEX_HOME}" || "${EDEX_HOME}" == "" || "${EDEX_HOME}" == "(none)"* ]]
	then
		EDEX_HOME=/awips2/edex 
	fi
	if [ -z ${EDEX_HOME} ]
	then	
		edexHomeSet=0
		while [ ${edexHomeSet} -eq 0 ]
		do
			echo -e "\tPlease enter your EDEX_HOME (Hit enter for default: /awips2/edex): \c"
			if [ ! "${acceptDefaults}" ]
			then
				read EDEX_HOME
		  		echo -e "\t\tUser input: ${EDEX_HOME}"
			fi
			if [ ! "${EDEX_HOME}" ]
			then
				color_echo yellow 0 "\tNOTE: Setting EDEX_HOME to Default /awips2/edex\n"
				export EDEX_HOME=/awips2/edex
				edexHomeSet=1 ; EDEX_INSTALL=$( echo $EDEX_HOME | sed 's/edex//g' )
			else
				echo -e "\tSet EDEX_HOME to ${EDEX_HOME}? (Y|N): \c"
				read _answer
				case ${_answer} in 
					[Yy] ) edexHomeSet=1 ; EDEX_INSTALL=$( echo $EDEX_HOME | sed 's/edex//g' ) ;;
					* ) edexHomeSet=0 ;;
				esac
			fi
		done
	else
		EDEX_INSTALL=$( echo $EDEX_HOME | sed 's/edex//g' ) 
	fi

	if  [[ ! ${LOC_SITE}  ]]
	then
		if [[ ${FXA_INGEST_SITE} ]]
		then
			echo -e "\tSetting LOC_SITE to ${FXA_INGEST_SITE}"
			LOC_SITE=${FXA_INGEST_SITE}
		else
			echo -e "\tVariable FXA_INGEST_SITE not defined.  Run $( basename $0 ) with argument of desired localization site"
			exit 1
		fi
	fi

	#set_cpsbn_variable

	DB_LOCATION="/awips2/data"
	dbaccessType="host"
	
	if ! rpm -qi awips2 &> /dev/null 
	then
		AII_RELEASEID=$( grep Version: ${EDEX_HOME}/conf/banner.txt | cut -f2 -d':' | sed -e 's/^[[:space:]]*//g' -e 's/\*//g' -e 's/[[:space:]]*$//g' )
	else
		edexVersion=$( rpm -qi awips2 | grep Version | cut -f2 -d: | sed -e "s/[[:space:]]*//g" -e "s/Vendor.*$//g" )
		edexRelease=$( rpm -qi awips2 | grep Release | cut -f2 -d: | sed -e "s/[[:space:]]*//g" -e "s/Build.*$//g" )
		AII_RELEASEID="${edexVersion}-${edexRelease}"
	fi

	# OTHER LOCALIZATION VARIABLES

	sdcVersion=$( cat ${fullScriptPath}/VERSION ) 

	# adjacent WFOs
	
	#myCenterPoint=( $( cat /awips/fxa/data/localizationDataSets/${LOC_SITE}/CenterPoint.dat ) )

	#color_echo blue 1 " ------------------------------------------------------"
	debug_echo "Global Variables Set                                 "
	#color_echo blue 1 " ------------------------------------------------------"

}

function initialize_configuration_variables {

	locSite=$1

	shpFFMPBasins=( "${pathPrefix}/data/fxa/nationalData/FFMP_aggr_basins.shp" "${pathPrefix}/data/fxa/nationalData/FFMP_aggr_basins.shx" "${pathPrefix}/data/fxa/nationalData/FFMP_aggr_basins.dbf" )
	shpFFMPStreams=( "${pathPrefix}/data/fxa/nationalData/FFMP_ref_sl.shp" "${pathPrefix}/data/fxa/nationalData/FFMP_ref_sl.shx" "${pathPrefix}/data/fxa/nationalData/FFMP_ref_sl.dbf" )

	neededDirectories=( "/data/fxa/nationalData" "/awips/fxa/data/acq_patterns.txt" "/awips/fxa/data/localization/${LOC_SITE}" "/data/fxa/nationalData/raobProductButtons.txt" "/awips/fxa/data/station_table.dat" "/data/fxa/nationalData/allAdjacentWFOs.txt")

	case ${siteType} in
		"WFO"	)	return_rfc ${locSite} ;; #${myCenterPoint[@]} ;;
		"RFC"	)	rfcInfo=( $( echo ${LOC_SITE} ) ) ;; #myRFC=${LOC_SITE} ;;
	esac


	find_awips_config ${LOC_SITE}-hydroSiteConfig.txt LC && wxxxList=$(grep ^Wxxx ${retLocation}/${LOC_SITE}-hydroSiteConfig.txt | cut -f2 -d' ' | xargs | sed -e 's/ /\|/g') && rxxxList=$(grep ^Rxxx ${retLocation}/${LOC_SITE}-hydroSiteConfig.txt | cut -f2 -d' ' | xargs | sed -e 's/ /\|/g') && regList=$(grep ^RegCode ${retLocation}/${LOC_SITE}-hydroSiteConfig.txt | awk '{print $2}')


	appDefaultSiteFile=${pathPrefix}/awips/hydroapps/.Apps_defaults_site
	if [ -h ${appDefaultSiteFile} ]
	then
		appDefaultSiteFile=$( readlink ${appDefaultSiteFile} )
		if ! echo ${appDefaultSiteFile} | grep '/' > /dev/null 
		then 
			appDefaultSiteFile=${pathPrefix}/awips/hydroapps/${appDefaultSiteFile}
		else
			appDefaultSiteFile=${pathPrefix}/${appDefaultSiteFile}
		fi
	fi

	if ! grep ^st3_rfc ${appDefaultSiteFile} > /dev/null
	then
		st3Value=$( grep ^st3_rfc ${EDEX_HOME}/data/utility/common_static/base/hydro/Apps_defaults | cut -f2 -d':'| sed -e "s/^[[:space:]]*//g" -e "s/#.*//g" -e "s/[[:space:]]*$//g" )
	else
		st3Value=$( grep ^st3_rfc ${appDefaultSiteFile} | head -1 | cut -f2 -d':'| sed -e "s/^[[:space:]]*//g" -e "s/#.*//g" -e "s/[[:space:]]*$//g" )
	fi

	if ! grep -w ^apps_dir ${appDefaultSiteFile} > /dev/null
	then
		appsDirValue=/awips/hydroapps
	else
		appsDirValue=$( grep -w ^apps_dir ${appDefaultSiteFile} | head -1 | cut -f2 -d':'| sed -e "s/^[[:space:]]*//g" -e "s/#.*//g" -e "s/[[:space:]]*$//g" )
		if echo ${appsDirValue} | grep '$(' > /dev/null 
		then
			tmpSubToken=$( echo ${appsDirValue} | sed -e "s/\$(//g" -e "s/).*//g" )
			get_hydro_token ${appDefaultSiteFile} ${tmpSubToken}
            if echo ${tokenValue} | grep '/' > /dev/null ; then tokenValue=$(echo ${tokenValue} | sed -e "s/\//\\\\\//g" ) ; fi
			appsDirValue=$( echo ${appsDirValue} | sed -e "s/\$(${tmpSubToken})/${tokenValue}/g" )
		fi
	fi

	if ! grep ^pproc_dir ${appDefaultSiteFile} > /dev/null
	then
		pprocDir=/awips/hydroapps/precip_proc
	else
		pprocDir=$( grep ^pproc_dir ${appDefaultSiteFile} | head -1 | cut -f2 -d':'| sed -e "s/^[[:space:]]*//g" -e "s/#.*//g" -e "s/[[:space:]]*$//g" )
		if echo ${pprocDir} | grep '$(' > /dev/null 
		then
			tmpSubToken=$( echo ${pprocDir} | sed -e "s/\$(//g" -e "s/).*//g" )
			get_hydro_token ${appDefaultSiteFile} ${tmpSubToken}
            if echo ${tokenValue} | grep '/' > /dev/null ; then tokenValue=$(echo ${tokenValue} | sed -e "s/\//\\\\\//g" ) ; fi 
			pprocDir=$( echo ${pprocDir} | sed -e "s/\$(${tmpSubToken})/${tokenValue}/g" )
		fi
	fi

	if ! grep ^whfs_base_dir ${appDefaultSiteFile} > /dev/null
	then
		whfsBaseDir=/awips/hydroapps/whfs
	else
		whfsBaseDir=$( grep ^whfs_base_dir ${appDefaultSiteFile} | head -1 | cut -f2 -d':'| sed -e "s/^[[:space:]]*//g" -e "s/#.*//g" -e "s/[[:space:]]*$//g" )
		if echo ${whfsBaseDir} | grep '$(' > /dev/null 
		then
			tmpSubToken=$( echo ${whfsBaseDir} | sed -e "s/\$(//g" -e "s/).*//g" )
			get_hydro_token ${appDefaultSiteFile} ${tmpSubToken}
            if echo ${tokenValue} | grep '/' > /dev/null ; then tokenValue=$(echo ${tokenValue} | sed -e "s/\//\\\\\//g" ) ; fi
			pprocDir=$( echo ${whfsBaseDir} | sed -e "s/\$(${tmpSubToken})/${tokenValue}/g" )
		fi

	fi

	if find_awips_config ${locSite}-mainConfig.txt C || find_awips_config ${locSite}-mainConfig.txt L
	then
		myConfigFile=${retLocation}/${locSite}-mainConfig.txt
		cccID=$( grep ^@@@CCC ${myConfigFile} | awk '{print $2}' )
	else
		color_echo yellow 0 "\tNote:  Can not find ${locSite}-mainConfig.txt.  Setting cccid from national_category_table.dat"
		if [[ ! -f ${EDEX_HOME}/data/utility/common_static/base/textdb/national_category_table.template ]] ; then
			color_echo red 1 "\tERROR:  No ${EDEX_HOME}/data/utility/common_static/base/textdb/national_category_table.template ... Exiting" 
			exit 1
		else
			cccid=$( grep ^K${locSite} ${EDEX_HOME}/data/utility/common_static/base/textdb/national_category_table.template | awk '{print $2}' ) 
		fi
	fi

	if [[ "${cccID}" == "" ]]
	then
		color_echo red 1 "\tERROR: cccID is not set! Exiting!"
		exit 1
	fi

	platformName=$( hostname | cut -f 2 -d '-' | cut -f 1 -d '.' )
	EDEXSVR=$(hostname)
	edexServerList=$(hostname)
    
	xmlHeader="# This software was developed and / or modified by Raytheon Company,
# pursuant to Contract DG133W-05-CQ-1067 with the US Government.
#\n# U.S. EXPORT CONTROLLED TECHNICAL DATA
# This software product contains export-restricted data whose
# export/transfer/disclosure is restricted by U.S. law. Dissemination
# to non-U.S. persons whether in the United States or abroad requires
# an export license or other authorization.
#\n# Contractor Name:        Raytheon Company
#\n# See the AWIPS II Master Rights File (\"Master Rights File.pdf\")"

	radarLimit=15  #this was taken from mainScript doMosaicProcessing.ksh  -- also, moved from mosaic list to here for use in config_pqact
	
	scriptIsConfigured=true

}

function import_shape_file() {

	# Imports shape files into the maps mapdata schema
	# Utilizes $EDEX_INSTALL/postgres/share/sql/importShapeFiles.sh
	
	# Usage: import_shape_file SCHEMA SHAPE_FILE_NAME
	#
	# Where SCHEMA is the schema to update in the maps database (e.g ffmp_streams)
	# Where SHAPE_FILE_NAME is the name of the shape files, including full path (e.g. /data/fxa/nationalData/FFMP_ref_sl)

	echo -e "Beginning $FUNCNAME ......"

	dbSchema=$1
	shpFile=$2
	shpSimpLev=$3
	sqlBasename="/$( basename $EDEX_INSTALL )/postgresql/share/sql"
	for baseNameExt in "postgresql/share/sql" "database/sqlScripts/share/sql" "static/database.maps" "database/sqlScripts/share/sql/maps"
	do
		sqlBasename="/$( basename $EDEX_INSTALL )/${baseNameExt}"
		if [[ -f ${sqlBasename}/importShapeFile.sh ]]
		then
			break
		else
			continue
		fi
	done	

	if [[ ! "${shpSimpLev}" ]]
	then
		shpSimpLev=\"\"
	fi
	

	if [[ ! ${dbSchema} && ! ${shpFile} ]]
	then
		echo -e "Usage: import_shape_file SCHEMA SHAPE_FILE_NAME\n\tWhere SCHEMA is the schema to update in the maps database (e.g ffmp_streams)\n\tWhere SHAPE_FILE_NAME is the name of the shape files, including full path (e.g. /data/fxa/nationalData/FFMP_ref_sl)"
		exit 1
	fi

	# Must un-zip the shp.gz if zipped.
	if file ${shpFile}.gz | grep 'gzip compressed data' > /dev/null
	then
		#su fxa -c "gunzip ${shpFile}.gz"
		gunzip ${shpFile}.gz
		_unzipped=1
	else
		_unzipped=0
	fi
	
	debug_echo "\tImport Command: su awips -lc \" ${sqlBasename}/importShapeFile.sh ${shpFile} mapdata ${dbSchema} ${shpSimpLev} awips 5432 ${EDEX_INSTALL} \" "
		
	su - awips -lc " ${sqlBasename}/importShapeFile.sh ${shpFile} mapdata ${dbSchema} ${shpSimpLev} awips 5432 ${EDEX_INSTALL} "  2>&1 | while read line
	do
		echo -e "\t${line}"
	done
	shapeFileSuccess=$? 
	debug_echo "\t\tshapeFileSuccess=${shapeFileSuccess}"

	if [[ ${_unzipped} -eq 1 ]]
	then
		#su fxa -c "gzip ${shpFile}"
		gzip ${shpFile}
	fi

	if [[ ${_remount} ]]
	then
		umount /data/fxa && mount /data/fxa
	fi
	
	echo -e "Completed $FUNCNAME ......\n"
	return ${shapeFileSuccess}
}

function import_wg_file() {

	# Imports shape files into the maps mapdata schema
	# Utilizes importMarkersInfo.sh, importPointsInfo.sh
	
	# Usage: import_wg_file IMPORT_TYPE FILE_NAME TABLENAME
	# Where IMPORT_TYPE is either marker or point
	# Where FILE_NAME is the name of the shape files, including full path (e.g. /data/fxa/nationalData/FFMP_ref_sl)
	# Where TABLENAME is the name of the table to be imported into.  IF IT EXISTS IT WILL DROP!!! 

	echo -e "Beginning $FUNCNAME ......"

	importType=$1
	shpFile=$2
	dbTable=$3

	case ${importType} in 
		"marker"	)	scriptName=importMarkerInfo.sh ;;
		"point"		)	scriptName=importPointsInfo.sh ;;
		*		)	color_echo red 1 "\tERROR: Invalid IMPORT_TYPE.  Valid entries are marker and point." ; return 1 ;; 
	esac

	sqlBasename="/$( basename $EDEX_INSTALL )/postgresql/share/sql"
	for baseNameExt in "postgresql/share/sql" "database/sqlScripts/share/sql" "static/database.maps" "database/sqlScripts/share/sql/maps"
	do
		sqlBasename="/$( basename $EDEX_INSTALL )/${baseNameExt}"
		if [[ -f ${sqlBasename}/${scriptName} ]]
		then
			break
		else
			continue
		fi
	done	
	
	if [[ ! ${dbTable} && ! ${shpFile} ]]
	then
		echo -e "Usage: import_wg_file IMPORT_TYPE FILE_NAME TABLE_NAME\n\tWhere IMPORT_TYPE is either marker or point\n\tWhere FILE_NAME is the name of the shape files, including full path\n\tWhere TABLENAME is the name of the table to be imported into.  IF IT EXISTS IT WILL DROP!!!"
		return 1
	fi


	su - awips -lc " ${sqlBasename}/${scriptName} ${shpFile} mapdata ${dbTable}"  2>&1 | while read line
	do
		echo -e "\t${line}"
	done

	if [[ ${_unzipped} -eq 1 ]]
	then
		#su fxa -c "gzip ${shpFile}"
		gzip ${shpFile}
	fi

	if [[ ${_remount} ]]
	then
		umount /data/fxa && mount /data/fxa
	fi
	
	echo -e "Completed $FUNCNAME ......\n"
}

function check_needed_mounts() {

	# needed directories for localization
	# /data/fxa/nationalData
	# /data/fxa/customFiles
	# /awips/fxa/data
	# /awips/fxa/data/localizationDataSets/XXX
	# /awips/fxa/data/localization/XXX

	if [ ! -d /awips/fxa/data/localizationDataSets ] 
	then
		echo "/awips/fxa/data/localizationDataSets does not exist. Exiting."
		exit 1
	fi
	if [ ! -d /data/adapt/avnfps ] 
	then
		echo "/data/adapt/avnfps does not exist. Exiting."
		exit 1
	fi
	if [ ! -d /awips/adapt/avnfps ]
	then
		echo "/awips/adapt/avnfps does not exist. Exiting."
		exit 1
	fi
	if [ ! -d /awips/GFESuite/primary ] 
	then
		echo "/awips/GFESuite/primary does not exist. Exiting."
		exit 1
	fi
	if [ ! -d /awips/hydroapps/whfs ]
	then
		echo "/awips/hydroapps/whfs does not exist. Exiting."
		exit 1
	fi

	for i in ${neededDirectories[@]}
	do
		if [[ ! -e ${i} ]] 
		then
			echo -e "${i} is needed but doesn't exist.  Please contact support"
			exit 1
		fi
	done

}

function copy_awips_file() {
	
	# To copy an AWIPS I file into an AWIPS II file
	#
	# Usage:  copy_awips_file $ORIGINAL $NEW $OWNER $GROUP $PERMS 
	#
	#	ORIGINAL:	Original file path + name (e.g. /awips/fxa/data/localizationDataSets/LWX/goesBufr.spi)
	#	NEW:		New file path + name (e.g. /awips2/edex/)
	# 	OWNER:		Valid user to own file
	#	GROUP:		Valid group to own file
	#	PERMS:		Valid Permissions for file

	oFile=$1
	nFile=$2
	nOwner=$3
	nGroup=$4
	nPerms=$5
	retVal=0

	# Time to copy
	if ! echo ${oFile} | grep ':' > /dev/null && [[ ! -f ${oFile} && ! -d ${oFile} ]] 	
	then
		color_echo yellow 0 "\tERROR IN $FUNCNAME:\t ${oFile} does not exist!"
		retVal=1
	else
		echo -e "\tCopying ${oFile} to ${nFile} and changing ownership and permissions to ${nOwner}:${nGroup} ${nPerms}"
		scp -r ${oFile} ${nFile}
		chown -R ${nOwner}:${nGroup} ${nFile}
		chmod -R ${nPerms} ${nFile}
	fi

	return ${retVal}
}

function color_echo() {

	# To echo something to stdout with color
	#
	# Usage:  color_echo $COLOR $BOLD $STRING 
	#
	#	COLOR:		Color string from: black, green, blue, red, yellow, white
	#	BOLD:		1 = true, 0 = false
	#	STRING:		String to echo
	
	sColor=$1
	sBold=$2
	sString=$3
	
	if [[ -z "${sColor}" || -z "${sBold}" || -z "${sString}" ]] || [[ ${sBold} -ne 1 && ${sBold} -ne 0 ]]
	then
		echo -e "ERROR IN $FUNCNAME:\t Usage:\t$FUNCNAME $COLOR $BOLD $STRING"
	else
		case ${sColor} in
			"green"	)	colorInt=32 ;;
			"blue"	)	colorInt=34 ;;
			"red"	)	colorInt=31 ;;
			"yellow" )	colorInt=33 ;;
			"white"	)	colorInt=37 ;;
			"black"	)	colorInt=30 ;;
			*	)	colorInt="" ;;
		esac
		
		if [[ ${sBold} -eq 0 ]]; then sBold="" ; fi
		echo -e "\033[${sBold};${colorInt}m${sString}\033[0m"
	fi
	
	return 0	
}

function get_site_coordinates() {

	# Returns coordinates for a box around site center point
	#
	# Usage:  get_site_coordinates SITEID 
	#
	#	SITEID:		A valid AWIPS ID
	
	# For now, we'll just do +/- 11 degrees from center longitude, and +/- 8 degrees from center latitude
	# Still need to handle OCONUS

	lowerLeftLon=$( { 
		echo "scale=6 ; adjust = ${myCenterPoint[1]} - 11 ; adjust" 
	} | bc )
	lowerLeftLat=$( {
		echo "scale=6 ; adjust = ${myCenterPoint[0]} - 8 ; adjust"
	} | bc )
	upperRightLon=$( {
		echo "scale=6 ; adjust = ${myCenterPoint[1]} + 11 ; adjust"
	} | bc )
	upperRightLat=$( {
		echo "scale=6 ; adjust = ${myCenterPoint[0]} + 8 ; adjust"
	} | bc )


}

function get_hydro_token() {

#	USAGE: get_hydro_token APPS_DEFAULTS_FILE TOKEN
#

	if [[ $# -ne 2 ]]
	then
		color_echo red 1 "ERROR:  USAGE: get_hydro_token APPS_DEFAULTS_FILE TOKEN" && return 1
	fi

	appsFile=$1
	token=$2

	debug_echo "In $FUNCNAME : getting ${token} value from ${appsFile}"
	if ! grep -w ^${token} ${appsFile} > /dev/null 
	then
		color_echo yellow 0 "\tNOTE:\t${token} not found on ${appsFile}.... moving on"
		return 15
	else
		tokenValue=$( grep -w ^${token} ${appsFile} | head -1 | cut -f 2 -d ':' | sed -e 's/^[[:space:]]*//g' -e "s/#.*//g" -e "s/[[:space:]]*$//g" )
	fi
 
	return 0
}

function build_ldad_triggers() {

	# Adds LDAD triggers into temporary file for loading.
	#
	# Usage: build_ldad_triggers TEMPLATE_FILE CONFIG_FILE
	#	TEMPLATE_FILE = template file from which to pull
	#	
	
	local templateFile=${1}
	
	if [ -z "${templateFile}" ] 
	then
		return
	fi
		
 	for i in ${ww1Array[@]}
 	do
 		# see if www and ww1 show up together
 		if grep ^www[A-Z]..ww1 ${templateFile} > /dev/null
 		then
 			grep ^www[A-Z]..ww1 ${templateFile} | while read triggerLine
 			do
 				triggerPIL=$( echo ${triggerLine} | cut -f1 -d'|' | sed -e "{s/^www/${currentWWW}/g}" -e "{s/ww1/${i}/g}" )
 				triggerAction=$( echo ${triggerLine} | cut -f4 -d'|' )
 				echo "${triggerPIL} | ${triggerAction}" >> ${tmpTriggerFile}
 			done										
 		fi
 					
 		# see if rrr and ww1 show up together
 		if grep ^rrr[A-Z]..ww1 ${templateFile} > /dev/null
 		then
 			for pirate in ${rrrArray[@]}
 			do
				grep ^rrr[A-Z]..ww1 ${templateFile} | while read triggerLine
				do
					triggerPIL=$( echo ${triggerLine} | cut -f1 -d'|' | sed -e "{s/^rrr/${pirate}/g}" -e "{s/ww1/${i}/g}" )
					triggerAction=$( echo ${triggerLine} | cut -f4 -d'|' )
					echo "${triggerPIL} | ${triggerAction}" >> ${tmpTriggerFile}
				done
 			done
 		fi
 	done	
 	
 	for i in ${sssArray[@]}
 	do
 		# see if www and ww1 show up together
 		if grep ^www[A-Z]..sss ${templateFile} > /dev/null
 		then
 			grep ^www[A-Z]..sss ${templateFile} | while read triggerLine
 			do
 				triggerPIL=$( echo ${triggerLine} | cut -f1 -d'|' | sed -e "{s/^www/${currentWWW}/g}" -e "{s/sss/${i}/g}" )
 				triggerAction=$( echo ${triggerLine} | cut -f4 -d'|' )
				if echo ${templateFile} | grep hazCollect > /dev/null && [[ ${triggerPIL:6:3} = "xxx" ]] ; then
					continue 
				fi
 				echo "${triggerPIL} | ${triggerAction}" >> ${tmpTriggerFile}
 			done										
 		fi
 					
 		# see if rrr and ww1 show up together
 		if grep ^rrr[A-Z]..sss ${templateFile} > /dev/null
 		then
 			for pirate in ${rrrArray[@]}
 			do
				grep ^rrr[A-Z]..sss ${templateFile} | while read triggerLine
				do
					triggerPIL=$( echo ${triggerLine} | cut -f1 -d'|' | sed -e "{s/^rrr/${pirate}/g}" -e "{s/sss/${i}/g}" )
					triggerAction=$( echo ${triggerLine} | cut -f4 -d'|' )
					if echo ${templateFile} | grep hazCollect > /dev/null && [[ ${triggerPIL:6:3} = "xxx" ]] ; then
						continue 
					fi
					echo "${triggerPIL} | ${triggerAction}" >> ${tmpTriggerFile}
				done
 			done
 		fi
 	done

}

function fix_ldad_site_config() {
	
	# Performs functionality of fix-ldadSiteConfig.sh
	# Used for trigger portion of Site Data Configuration
	#
	# Usage: fix_ldad_site_config CONFIG_FILE
	#
	#	CONFIG_FILE = config file for trigger localization


	configFile=$1
	if [[ $( grep -c ww1 ${configFile} ) -lt $( grep -c www ${configFile} ) ]]
	then
		cp -fa ${configFile} ${configFile}.orig
		cat /dev/null > ${configFile}.tmp
		awk 'BEGIN { true = 1; false = 0; www = false }
		    {
		       if ( $1 == "www" ) www = true
		       else if ( $1 != "ww1" && www == true ) print "ww1 " local_site
		       if ( $1 != "www" ) www = false
		       print $0 
		    }
		    END { if ( www == true ) print "ww1 " local_site }' \
		local_site=${locSite} < ${configFile} > ${configFile}.tmp
			
		mv ${configFile}.tmp ${configFile}
		chown awips:fxalpha ${configFile} && chmod 644 ${configFile}
	fi

}

function debug_echo() {

	# echos to stdout if $DEBUG is set
	#
	# Usage:	debug_echo STRING
	
	echoString=$*
	[ $DEBUG ] && echo -e "DEBUG:\t${echoString}"
	return 0


}

function handle_request() {

	# supporting tool added to start edex_request if necessary for any part of the script
	# 04 Nov 2011
	# arg: start or stop 

	actionArg=$1

    if [[ -f /awips2/edex/data/utility/edex_static/site/${locSite}/config/activeSites.txt ]] ; then 
        numberOfActiveGFESites=$( wc -l /awips2/edex/data/utility/edex_static/site/${locSite}/config/activeSites.txt | awk '{print $1}' )
    else
        debug_echo "\tNOTE:  /awips2/edex/data/utility/edex_static/site/${locSite}/config/activeSites.txt does not exist.  Setting numberOfActiveGFESites = 1"
        numberOfActiveGFESites=1
    fi
    if [[ ${numberOfActiveGFESites} -eq 1 ]]; then 
        requestStartWaitTime=240
        debug_echo "\tNOTE:  Setting requestStartWaitTime=240"
    else
        requestStartWaitTime=390
        debug_echo "\tNOTE:  Setting requestStartWaitTime=390"
    fi

	case "${actionArg}" in 
		"start"		)

					if ps -fu awips | grep edex.run.mode=request > /dev/null 
					then
						debug_echo "\tNOTE:  EDEX Request already running..... moving on...."
					else
						debug_echo "\tNOTE:  EDEX Request not running ($EDEXSVR) .. starting............"
						if ! service edex_camel start request 2>&1 > /dev/null
						then
							color_echo red 1 "\tERROR:  EDEX Request Server must be running and failed to start on $EDEXSVR.  Exiting"
							return 1
						else
							startedService=1
						fi
						echo -e "\tWaiting for EDEX Request Server to start ... This should not take more than ${requestStartWaitTime} seconds"
						echo -e "\tStart Time = $(date)" && reqStartTime=$(date +%s)
						local reqBooted=
						while [ ! "${reqBooted}" ] 
						do
							if tail -25 ${EDEX_HOME}/logs/edex-request-$( date +%Y%m%d ).log | grep "EDEX ESB is now operational" > /dev/null
							then
								reqBooted=1
							else
								currentTime=$(date +%s)
								timeDiff=$(( currentTime-reqStartTime ))
								if [[ ${timeDiff} -ne 0 ]]
								then
									case $(( timeDiff % 30 )) in
										0 )		
										    case ${timeDiff} in 
												30|60|90|120|150|180|210|300|330|360    )	if [[ ! "${notifiedOnce}" ]] ; then color_echo yellow 0 "\tNOTE:  It has been ${timeDiff} seconds since the start command was issued.... don't panic yet..." && notifiedOnce=1 ; fi ;;
												*	)	unset notifiedOnce ;;
										    esac
										    ;;
										* )	unset notifiedOnce ;;
									esac
									if [[ ${timeDiff} -ge ${requestStartWaitTime} ]] 
									then
										  color_echo red 1 "\tERROR:  edex_request did not start within ${requestStartWaitTime} seconds... This should be plenty of time since there are ${numberOfActiveGFESites} active GFE sites, something must be wrong.  EXITING"
										  exit 1
									fi
								fi
							fi
						done
						echo -e "\tFinish Time = $(date)"
					fi
					;;
		"stop"		)
					if [ "${startedService}" ]  
					then
						debug_echo "\tNOTE:  EDEX Request started on $EDEXSVR... stopping now...."
						if ! service edex_camel stop request 2>&1 > /dev/null
						then
							color_echo yellow 0 "\tNOTE:  Stopping of EDEX Request FAILED.  Please contact support!"
						fi
					else
						debug_echo "\tNOTE:  EDEX Request running when script was ran... moving on, nothing to see here"
					fi
					;;
	esac

}
##################### LOCALIZATION FUNCTIONS HERE ###################################

function config_plugin_filters() {

	locRoot=edex_static
	locSite=$1
	
	color_echo blue 1 " -----------------------------------------------"
	color_echo blue 1 "| Begin $FUNCNAME - $( date ) " 
	color_echo blue 1 " -----------------------------------------------"
	
	# Need To Get Box Around CenterPoint - defined in global
	get_site_coordinates
	
	# plugin-filters
	################ UNFINISHED ############################################
	# Going to set up metar2shef filter and synoptic2shef with default we calculated for subgridding - ignore inaccurate variable names, we do not want to spend time re-calculating the same information.
	
	cd ${EDEX_HOME}/data/utility/${locRoot}/site/${locSite}
	create_subtree plugin-filters awips fxalpha 

	for fil in metarToShefFilter.xml synopticToShefFilter.xml mesowest_filters.xml
	do
		if [[ ! "${FORCE}" && -f plugin-filters/${fil} ]]
		then
			echo -e "\tNOTE:  plugin-filters/${fil} exists \t SKIPPING"
		else
			echo -e "\tCreating plugin-filters/${fil}.................."
			#head -20 ../OAX/plugin-filters/${fil} > plugin-filters/${fil}
			echo -e "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>" > plugin-filters/${fil}
			echo -e "\t<!-- \n\t\tCreated via $FUNCNAME " >> plugin-filters/${fil}
			echo -e "\t\tDate:\t$(date)" >> plugin-filters/${fil}
			echo -e "\t-->\n" >> plugin-filters/${fil}
			echo -e "<pluginDataObjectFilter>" >> plugin-filters/${fil}
			case "${fil}" in  
				"metarToShefFilter.xml"		)	#add in extra lines per email from kowal 
									case "${locSite}" in 
										"AFG"|"AFC"|"AJK"|"ACR"|"VRH"	)	local pattern="AK" ;;
										"PBP"|"HFO"				)	local pattern="HW" ;;
										"GUM"					)	local pattern="GM" ;;
										*						)	local pattern="US" ;;
									esac
										
									echo -e "\t<filterElements xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:type=\"wmoHeaderFilterElement\">" >> plugin-filters/${fil}
									echo -e "\t\t<!-- Filter for specific WMO Headers --> " >> plugin-filters/${fil}
									echo -e "\t\t<filterElementName>${locSite}.WMOHeaders</filterElementName>" >> plugin-filters/${fil}
									echo -e "\t\t<filterType>INCLUDE</filterType>" >> plugin-filters/${fil}
									echo -e "\t\t<patterns>S[AP]${pattern}[78]0.*</patterns>" >> plugin-filters/${fil}
									echo -e "\t</filterElements>">> plugin-filters/${fil} ;;
			esac
			echo -e "\t<filterElements xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:type=\"rectFilterElement\">" >> plugin-filters/${fil}
			echo -e "\t\t<filterElementName>${locSite}.WFO</filterElementName>" >> plugin-filters/${fil}
			echo -e "\t\t<filterType>INCLUDE</filterType>" >> plugin-filters/${fil}
			echo -e "\t\t<upperLeftLat>${upperRightLat}</upperLeftLat>" >> plugin-filters/${fil}
			echo -e "\t\t<upperLeftLon>${lowerLeftLon}</upperLeftLon>" >> plugin-filters/${fil}
			echo -e "\t\t<lowerRightLat>${lowerLeftLat}</lowerRightLat>" >> plugin-filters/${fil}
			echo -e "\t\t<lowerRightLon>${upperRightLon}</lowerRightLon>" >> plugin-filters/${fil}
			echo -e "\t</filterElements>" >> plugin-filters/${fil}
			filterName=$( echo $fil | cut -f1 -d"." )
			echo -e "\t<filterName>${locSite}.${filterName}</filterName>" >> plugin-filters/${fil}
			echo -e "</pluginDataObjectFilter>" >> plugin-filters/${fil}
			chown awips:awips plugin-filters/${fil}
		fi
	done


	color_echo blue 1 " -----------------------------------------------"
	color_echo blue 1 "|Completed $FUNCNAME - $( date ) "
	color_echo blue 1 " -----------------------------------------------"

	return 0
}

function config_spi_files() {

	# Name:		config_spi_files
	# Desc:		Configures SPI files needed for AWIPS II
	# SOTE 11.4 introduced the ndm directory so modelBufr is handled through that
	
	locRoot=common_static
	locSite=$1
	compLocRoot=${EDEX_HOME}/data/utility
	compLocDir=common_static/site/${locSite}
	
	color_echo blue 1 "-----------------------------------------------"
	color_echo blue 1 "Begin $FUNCNAME - $( date ) "
	color_echo blue 1 "-----------------------------------------------"
	
#	cd ${EDEX_HOME}/data/utility/${locRoot}/site/${locSite}
	
	#case "${AII_RELEASEID}" in 
	#	"11."[789]* 	 )		compLocDir=cave_static/site/${locSite}/basemaps ; spiFiles=( "goes" "poes" ) ;;
	#	"SOTE 11."[4-9]* )		compLocDir=cave_static/site/${locSite}/basemaps ; spiFiles=( "goes" "poes" ) ;;
	#	*		 )		color_echo red 1 "\tERROR:  ${AII_RELEASEID} Not Recognized In This Section" ; return 1 ;;
	#esac
	# changing to 12.1.1 -- no need to case check anymore
	compLocDir=cave_static/site/${locSite}/basemaps
	spiFiles=( "goes" "poes" )

	if [[ ! -d ${compLocRoot}/${compLocDir} ]] ; then create_tree ${compLocRoot} ${compLocDir} awips ; fi 
	cd ${compLocRoot}/${compLocDir}
	echo -e "\tWorking in $(pwd)"
	for myBufr in ${spiFiles[@]}
	do
		if [[ "${doCreateDir}" ]]
		then
			if ! does_dir_exist ${myBufr}sndg
			then
				echo -e "\tCreating $(pwd)/${myBufr}sndg"
				if ! create_tree $(pwd) ${myBufr}sndg awips
				then	
					color_echo red 1 "\tERROR - Creation of `pwd`/goessndg FAILED"
					exit 1
				fi
			fi
			if [[ "${FORCE}" || ! -f $(pwd)/${myBufr}sndg/${myBufr}Bufr.spi ]]
			then
				if ! copy_awips_file ${pathPrefix}/awips/fxa/data/localizationDataSets/${locSite}/${myBufr}Bufr.spi $(pwd)/${myBufr}sndg/${myBufr}Bufr.spi awips fxalpha 755
				then
					color_echo red 1 "\tERROR:  Copying ${myBufr}Bufr.spi to $(pwd)/${myBufr}sndg -- please check"
				fi
			else
				echo -e "\tNOTE:  ${myBufr}sndg/${myBufr}Bufr.spi exists \t SKIPPING"
			fi
		fi
		if [[ "${FORCE}" || ! -f ${myBufr}Bufr.spi ]] 
		then
			if ! copy_awips_file ${pathPrefix}/awips/fxa/data/localizationDataSets/${locSite}/${myBufr}Bufr.spi $(pwd)/${myBufr}Bufr.spi awips fxalpha 755
			then
				color_echo red 1 "\tERROR:  Copy ${myBufr}Bufr.spi to $(pwd) -- please check"
			fi
		else
			echo -e "\tNOTE:  ${myBufr}sndg/${myBufr}Bufr.spi exists \t SKIPPING"
		fi
	done
	
        color_echo blue 1 " -----------------------------------------------"
	color_echo blue 1 "|Completed $FUNCNAME - $( date ) "
	color_echo blue 1 " -----------------------------------------------"
	
	return 0
        
}

function config_common_hydro() {

	# Name:		config_common_hydro
	# Desc:		Configures hydro files in common configuration tree
	
	locRoot=common_static
	locSite=$1
	
	color_echo blue 1 " -----------------------------------------------"
	color_echo blue 1 "| Begin $FUNCNAME - $( date ) "
	color_echo blue 1 " -----------------------------------------------"
	
	cd ${EDEX_HOME}/data/utility/${locRoot}/site/${locSite}
	
	echo -e "\tWorking in $(pwd)\n"
	create_subtree hydro awips fxalpha
	create_subtree shef awips fxalpha
	#appDefaultSiteFile=$( echo $APPS_DEFAULTS_SITE )

	echo
	if [[ "${FORCE}" || ! -f hydro/Apps_defaults ]]
	then
		cat ${appDefaultSiteFile} | grep -vE "^([a-zA-Z.].*apps_dir|apps_dir|mpe_dir|pproc_dir)"  > hydro/Apps_defaults
		grep -E "^([a-zA-Z.].*apps_dir|apps_dir|mpe_dir|pproc_dir)" ${appDefaultSiteFile} | while read line
		do
			if [[ "$( echo $line | cut -f 1 -d':' )" == "apps_dir" ]]; then continue ; fi
			if echo $line | cut -f 1 -d':' | grep apps_dir > /dev/null
			then
				tmpToken=$( echo $line | cut -f1 -d':' )
				echo -e "${tmpToken}\t:\t\$(apps_dir)" >> hydro/Apps_defaults
			fi
		done
			
		if ! grep ^mpe_site_id hydro/Apps_defaults > /dev/null
		then
			echo -e "mpe_site_id\t: $( echo ${locSite} | tr [:upper:] [:lower:] )" >> hydro/Apps_defaults 
		fi

		if ! grep ^mpe_center_lat hydro/Apps_defaults > /dev/null
		then
			echo -e "mpe_center_lat\t: ${myCenterPoint[0]}" >> hydro/Apps_defaults
		fi

		if ! grep ^mpe_center_lon hydro/Apps_defaults > /dev/null
		then
			echo -e "mpe_center_lon\t: ${myCenterPoint[1]}" >> hydro/Apps_defaults
		fi

		if [[ "${siteType}" == "RFC" ]] 
		then	
			if ! grep ^rfctb_site_id hydro/Apps_defaults > /dev/null
			then
				echo -e "rfctb_site_id\t: $( echo ${locSite} | tr [:upper:] [:lower:] )" >> hydro/Apps_defaults
			fi
			if ! grep ^st3_rfc hydro/Apps_defaults > /dev/null
			then
				echo -e "st3_rfc\t: $( echo ${st3Value} )" >> hydro/Apps_defaults
			fi
			if ! grep ^ifp_rfc hydro/Apps_defaults > /dev/null
			then
				echo -e "ifp_rfc\t: $( echo ${st3Value} )" >> hydro/Apps_defaults
			fi
			if ! grep ^rfcw_rfcname hydro/Apps_defaults > /dev/null
			then
				echo -e "rfcw_rfcname\t: $( echo ${st3Value} )" >> hydro/Apps_defaults
			fi
		fi
		echo -e "\n##### AWIPS II SPECIFIC ########" >> hydro/Apps_defaults
		echo -e "fxa_local_site\t: ${locSite}" >> hydro/Apps_defaults  
		#		echo -e "pghost\t: ${EDEXDBSVR}" >> hydro/Apps_defaults
	else
		echo -e "\tNOTE:  hydro/Apps_defaults exists \t SKIPPING"
	fi
	
	echo
	cd hydro && echo -e "\tWorking in $(pwd)\n"
	
	for hydroSubDir in ascii binary
	do
		create_subtree hydroapps/geo_data/${st3Value}/${hydroSubDir} awips fxalpha
		for myFile in $( ls ${pathPrefix}${appsDirValue}/geo_data/${st3Value}/${hydroSubDir}/ )
		do
			if [[ "${FORCE}" || ! -f hydroapps/geo_data/${st3Value}/${hydroSubDir}/${myFile} ]]
			then
				if ! copy_awips_file ${pathPrefix}${appsDirValue}/geo_data/${st3Value}/${hydroSubDir}/${myFile} hydroapps/geo_data/${st3Value}/${hydroSubDir}/ awips fxalpha 775 ; then exit 1; fi
			else
				echo -e "\tNOTE:  hydroapps/geo_data/${st3Value}/${hydroSubDir}/${myfile} exists \t SKIPPING"
			fi
		done
	done
	
	echo
	create_subtree hydroapps/whfs/local/data/geo awips fxalpha
	for myFile in $( ls ${pathPrefix}${whfsBaseDir}/local/data/geo/ )
	do
		if [[ "${FORCE}" || ! -f hydroapps/whfs/local/data/geo/${myFile} ]]
		then
			if ! copy_awips_file ${pathPrefix}${whfsBaseDir}/local/data/geo/${myFile} hydroapps/whfs/local/data/geo awips fxalpha 775 ; then continue; fi
		else
			echo -e "\tNOTE:  hydroapps/local/data/geo/${myFile} exists \t SKIPPING"
		fi
	done
	
	create_subtree hydroapps/whfs/local/data/app/nrldb awips fxalpha
	if [[ "${FORCE}" || ! -f hydroapps/whfs/local/data/app/nrldb/nrldb.conf ]]
	then
		if ! copy_awips_file ${pathPrefix}${whfsBaseDir}/local/data/app/nrldb/nrldb.conf hydroapps/whfs/local/data/app/nrldb awips fxalpha 775 && sed -i 's/localhost/'$(hostname)'/' hydroapps/whfs/local/data/app/nrldb/nrldb.conf; then continue; fi
	else
		echo -e "\tNOTE:  hydroapps/local/data/app/nrldb/nrldb.conf exists \t SKIPPING"
	fi
	#done
	
	#for hydroSubDir in prism misbin utiltriangles
	for hydroSubDir in $( find ${pathPrefix}${pprocDir}/local/data/app/mpe -maxdepth 1 -type d -printf "%f " )
	do
		create_subtree hydroapps/precip_proc/local/data/app/mpe/${hydroSubDir}
		for myFile in $( ls ${pathPrefix}${pprocDir}/local/data/app/mpe/${hydroSubDir}/ )
		do
			if [[ "${FORCE}" || ! -f hydroapps/precip_proc/local/data/app/mpe/${hydroSubDir}/${myFile} ]]
			then
				if ! copy_awips_file ${pathPrefix}${pprocDir}/local/data/app/mpe/${hydroSubDir}/${myFile} hydroapps/precip_proc/local/data/app/mpe/${hydroSubDir}/ awips fxalpha 775 ; then continue; fi
			else
				echo -e "\tNOTE:  hydroapps/precip_proc/local/data/app/mpe/${hydroSubDir}/${myFile} exists \t SKIPPING"
			fi
		done
	done

	if [[ "${siteType}" == "RFC" ]] 
	then
		create_subtree hydroapps/rfc/xdat/parameters/groups
		for myFile in $( ls ${pathPrefix}${appsDirValue}/rfc/xdat/parameters/groups/ )
		do
			if [[ "{FORCE}" || -f hydroapps/rfc/xdat/parameters/groups/${myFile} ]]
			then
				if ! copy_awips_file ${pathPrefix}${appsDirValue}/rfc/xdat/parameters/groups/${myFile} hydroapps/rfc/xdat/parameters/groups/${myFile} awips fxalpha 775 ; then continue ; fi
			else
				echo -e "\tNOTE:  hydroapps/precip_proc/local/data/app/mpe/${hydroSubDir}/${myFile} exists \t SKIPPING" 
			fi
		done
	fi
	
	echo
	if [[ "${FORCE}" || ! -f group_definition.cfg ]]
	then
		if ! copy_awips_file ${pathPrefix}${whfsBaseDir}/local/data/app/timeseries/group_definition.cfg . awips fxalpha 775 ; then continue; fi
	else
		echo -e "\tNOTE:  group_definition.cfg exists \t SKIPPING"
	fi
	
	echo
	cd .. && echo -e "\tWorking in $(pwd)\n"
	if [[ "${FORCE}" || ! -f shef/metar.cfg ]] 
	then
		if ! copy_awips_file ${pathPrefix}${whfsBaseDir}/local/data/app/metar2shef/metar.cfg shef/ awips fxalpha 775 ; then continue; fi
	else
		echo -e "\tNOTE:  shef/metar.cfg exists \t SKIPPING"
	fi

	# Fixing permissions
	chown -R awips:fxalpha hydro
	chmod -R 775 hydro

        color_echo blue 1 " -----------------------------------------------"
	color_echo blue 1 "| Completed $FUNCNAME - $( date ) "
	color_echo blue 1 " -----------------------------------------------"
	
	return 0

}

function config_common_menus() {

	# Name:		config_common_menus
	# Desc:		Configures Hydro/NCEP Menus through hydroSitesInUse.txt 
	#		Configures Radar/SCAN/FFMP through radarsInUse.txt
	#		Configures Upper Air/RAOB through raobSitesInUse.txt
	
	locRoot=common_static
	locSite=$1
	local radarsOnMenuFile
	local mosaicRadarListFile

	color_echo blue 1 " -----------------------------------------------"
	color_echo blue 1 "| Begin $FUNCNAME - $( date ) "
	color_echo blue 1 " -----------------------------------------------"
	
	cd ${EDEX_HOME}/data/utility/${locRoot}/site/${locSite}
	
	echo -e "\tWorking in $(pwd)\n"
	create_subtree hydro awips fxalpha
	
	# Find input for radarsOnMenu
	if find_awips_config ${locSite}-radarsOnMenu.txt CL || find_awips_config radarsOnMenu.txt C 
	then
		radarsOnMenuFile=${retLocation}/${userFile}
		if [[ "${retLocation}" == "${pathPrefix}/awips/fxa/data/localization/${locSite}" ]] && find_awips_config radarsOnMenu.txt C
		then
			radarsOnMenuFile=${retLocation}/${userFile}
		fi
	else
		color_echo red 1 "\tERROR:  No input radarsOnMenu.txt found"
		exit 1
	fi

	# Find input for mosaicInfo
	if find_awips_config ${locSite}-mosaicInfo.txt CL || find_awips_config mosaicInfo.txt CN
	then
		mosaicRadarListFile=${retLocation}/${userFile}
		if [[ "${retLocation}" == "${pathPrefix}/awips/fxa/data/localization/${locSite}" ]] && find_awips_config mosaicInfo.txt C
		then
			# If the file was found in localization/LLL make sure there is no pre-pended version in customFiles
			mosaicRadarListFile=${retLocation}/${userFile}
		fi
		#check to see how many lines the file is
		if [[ $(cat ${mosaicRadarListFile}| grep -v ^'//' | sed -e "/^$/d " | wc -l | awk '{print $1}') -gt 1 ]]
		then
			# it is more than one line... need to note this for later 
			multiLineMosaic=true
		fi
		mosaicRadarList=( $( grep -v ^// ${mosaicRadarListFile} | sed -e "/^$/d " | head -1 | cut -f2 -d'|' ) )
		mosaicRadarLimit=$( grep -v ^// ${mosaicRadarListFile} | sed -e "/^$/d " | head -1 | cut -f3 -d'|' | sed -e "s/^[[:space:]]*//g" -e "s/[[:space:]]*$//g" )
		mosaicLatLon=$( grep -v ^// ${mosaicRadarListFile} | sed -e "/^$/d " | head -1 | cut -f4 -d'|' | sed -e "s/^[[:space:]]*//g" -e "s/[[:space:]]*$//g" ) 
	elif find_awips_config ${locSite}-radarsInUse.txt CL || find_awips_config radarsInUse.txt C
	then
		# Build from radarsInUse.txt file
		radarsInUseFile=${retLocation}/${userFile}
		if [[ "${retLocation}" == "${pathPrefix}/awips/fxa/data/localization/${locSite}" ]] && find_awips_config radarsInUse.txt C
		then
			radarsInUseFile=${retLocation}/${userFile}
		fi
		# max is 15 in AWIPS I so I'll implement that for now.
		if [[ ${siteType} != "WFO" ]] ; then radarLimit=$( cat ${radarsInUseFile} | wc -l | awk '{print $1}' ) ; fi
		mosaicRadarList=( $( cat ${radarsInUseFile} | grep -v ^# | head -${radarLimit} | awk '{print $1}' | xargs ) )
	else
		color_echo yellow 0 "\tNOTE:  No mosaic radar list could be defined.  Will not do mosaic processing."
	fi

	#does mosaicInfo point to a file?
	if [[ ${#mosaicRadarList[@]} -eq 1 ]]
	then
		debug_echo "\t\tMosaic line points to a file (${mosaicRadarList[0]}) ... searching for file" 
		if echo ${mosaicRadarList[0]} | grep ^/ > /dev/null
		then
			# this means we have a full path 
			if [[ ${siteType} != "WFO" && "${mosaicRadarLimit}" != "" ]] ; then radarLimit=$( cat ${mosaicRadarList[0]} | wc -l | awk '{print $1}' ) ; fi
			if [[ "${mosaicRadarLimit}" != "" ]] ; then radarLimit=${mosaicRadarLimit} ; fi			
			mosaicRadarList=$( cat ${mosaicRadarList[0]} | grep -v ^# | head -${radarLimit} | awk '{print $1}' | xargs )
			debug_echo "\t\tMosaic Radar list (with limit ${radarLimit}): ${mosaicRadarList[@]}" 
		else
			# so we assume it is in localizationDataSets 
			if ! find_awips_config ${mosaicRadarList[0]} S 
			then
				color_echo yellow 0 "\tNOTE: Can not find ${mosaicRadarList[0]} in localizationDataSets .. defaulting to radarsInUse.txt"
				if find_awips_config ${locSite}-radarsInUse.txt CL || find_awips_config radarsInUse.txt C
				then
					# Build from radarsInUse.txt file
					radarsInUseFile=${retLocation}/${userFile}
					if [[ "${retLocation}" == "${pathPrefix}/awips/fxa/data/localization/${locSite}" ]] && find_awips_config radarsInUse.txt C
					then
						radarsInUseFile=${retLocation}/${userFile}
					fi
					# max is 15 in AWIPS I so I'll implement that for now.
					if [[ ${siteType} != "WFO" && "${mosaicRadarLimit}" != "" ]] ; then radarLimit=$( cat ${radarsInUseFile} | wc -l | awk '{print $1}' ) ; fi
					if [[ "${mosaicRadarLimit}" != "" ]] ; then radarLimit=${mosaicRadarLimit} ; fi
					mosaicRadarList=$( cat ${radarsInUseFile} | grep -v ^# | head -${radarLimit} | awk '{print $1}' | xargs )
				else
					color_echo yellow 0 "\tNOTE:  No mosaic radar list could be defined.  Will not do mosaic processing."
					mosaicRadarList=""
				fi
			else
				tmpMosaicFile=${retLocation}/${userFile}
				if [[ ${siteType} != "WFO" && "${mosaicRadarLimit}" != "" ]] ; then radarLimit=$( cat ${tmpMosaicFile} | wc -l | awk '{print $1}' ) ; fi
				if [[ "${mosaicRadarLimit}" != "" ]] ; then radarLimit=${mosaicRadarLimit} ; fi		
				mosaicRadarList=$( cat ${tmpMosaicFile} | grep -v ^# | head -${radarLimit} | awk '{print $1}' | xargs )
				debug_echo "\t\tMosaic Radar list (with limit ${radarLimit}): ${mosaicRadarList[@]}" 
			fi
		fi
	fi

	# is mosaic entry blank and do we have lat/lon to use?
	if [[ ${#mosaicRadarList[@]} -eq 0 ]]
	then
		debug_echo "\tRadar list is empty in mosaic file... checking for lat/lon" 
		#check for lat/lon
		if [[ "${mosaicLatLon}" ]]
		then
			mosaicLon=$( echo ${mosaicLatLon} | awk '{print $2}' )
			mosaicLat=$( echo ${mosaicLatLon} | awk '{print $1}' )
			if [[ "${mosaicRadarLimit}" != "" ]] ; then radarLimit=${mosaicRadarLimit} ; else debug_echo "\tNOTE: no limit associated with lat/lon entry.. using default"; fi	
			debug_echo "\t\tFound lat/lon ... getting closest radars to ${mosaicLatLon}" 
			mosaicRadarList=( $( psql --tuples-only -U awips -h ${EDEXDBSVR} -d metadata -c "select rda_id, ST_distance_sphere(the_geom,ST_SetSRID(ST_PointFromText('POINT(${mosaicLon} ${mosaicLat})'),4326)) as distance from radar_spatial order by distance asc limit ${radarLimit};" | awk '{print $1}' | xargs | tr [:upper:] [:lower:] ) )
			debug_echo "\t\tMosaic Radar list (with limit ${radarLimit}): ${mosaicRadarList[@]}" 
		# Default to radarsInUse
		elif find_awips_config ${locSite}-radarsInUse.txt CL || find_awips_config radarsInUse.txt C
		then
			# Build from radarsInUse.txt file
			debug_echo "\t\tUsing radarsInUse.txt file ....."
			radarsInUseFile=${retLocation}/${userFile}
			if [[ "${retLocation}" == "${pathPrefix}/awips/fxa/data/localization/${locSite}" ]] && find_awips_config radarsInUse.txt C
			then
				radarsInUseFile=${retLocation}/${userFile}
			fi
			# max is 15 in AWIPS I so I'll implement that for now.
			if [[ ${siteType} != "WFO" ]] ; then radarLimit=$( cat ${radarsInUseFile} | wc -l | awk '{print $1}' ) ; fi
			mosaicRadarList=( $( cat ${radarsInUseFile} | grep -v ^# | head -${radarLimit} | awk '{print $1}' | xargs ) )
		else
			color_echo yellow 0 "\tNOTE:  No mosaic radar list could be defined.  Will not do mosaic processing."
		fi
	fi 

	echo -e "\n\tCreating Radar Menu Input File.........."
	create_subtree radar awips fxalpha
	if [[ ! -f radar/radarsInUse.txt || "${FORCE}" ]]
        then
                cat ${EDEX_HOME}/data/utility/common_static/base/radar/radarsInUse.txt > radar/radarsInUse.txt
                chown awips:fxalpha radar/radarsInUse.txt
                chmod 644 radar/radarsInUse.txt
		locRadarList=( $( cat ${radarsOnMenuFile} | grep + | grep -v ^# | awk '{print $1}' | xargs ) )
		dialRadarList=( $( cat ${radarsOnMenuFile} | grep -v + | grep -v ^[ef] | grep -v ^# | awk '{print $1}' | xargs ) )
		asrRadarList=( $( cat ${radarsOnMenuFile} | grep -v + | grep ^e | awk '{print $1}' | xargs ) )
		if [[ ${#asrRadarList[@]} -eq 0 ]]; then asrRadarList=( "eeri" ); fi #DR 8004
		arsrRadarList=( $( cat ${radarsOnMenuFile} | grep -v + | grep ^f | awk '{print $1}' | xargs ) )
		if [[ ${#arsrRadarList[@]} -eq 0 ]]; then arsrRadarList=( "fqwa" ); fi #DR 8004
		if [ ! -z ${locRadarList} ] ; then sed -i "/^# LOCAL_RADARS/a$( echo ${locRadarList[@]} | sed 's/ /\\n/g')" radar/radarsInUse.txt ; fi
		if [ ! -z ${dialRadarList} ] ; then sed -i "/^# DIAL_RADARS/a$( echo ${dialRadarList[@]} | sed 's/ /\\n/g')" radar/radarsInUse.txt ; fi
		if [ ! -z ${asrRadarList} ] ; then sed -i "/^# ASR_RADARS/a$( echo ${asrRadarList[@]} | sed 's/ /\\n/g')" radar/radarsInUse.txt ; fi
		if [ ! -z ${arsrRadarList} ] ; then sed -i "/^# ARSR_RADARS/a$( echo ${arsrRadarList[@]} | sed 's/ /\\n/g')" radar/radarsInUse.txt ; fi 
		if [[ ${#mosaicRadarList[@]} -ne 0 || ! -z "${mosaicRadarList}" ]] ; then sed -i "/^# MOSAIC_RADARS/a$( echo ${mosaicRadarList[@]} | sed 's/ /\\n/g')" radar/radarsInUse.txt ; fi 
        fi

	if [ ! -z ${arAdjacent} ] ; then sed -i "/^# CWA/a$( echo ${arAdjacent[@]} | sed 's/ /\\n/g')" radar/radarsInUse.txt ; fi

	if [[ "${multiLineMosaic}" ]]
	then
		echo -e "\n\tCreating extra mosaic menus..... "
		cd / && create_subtree ${EDEX_HOME}/data/utility/cave_static/site/${locSite}/menus/radar awips fxalpha 
		extraMosaicFile=${EDEX_HOME}/data/utility/cave_static/site/${locSite}/menus/radar/otherMosaicMenus.xml 
		if [[ ! -f ${extraMosaicFile} || "${FORCE}" ]]
		then
			echo -e "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>" > ${extraMosaicFile}
			echo -e "<!-- \n ${xmlHeader} \n##\n##THIS FILE GENERATED AUTOMATICALLY BY $FUNCNAME IN THE AWIPS II AUTOMATION TOOL \n --> " >>  ${extraMosaicFile}
			echo -e "<menuTemplate xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">" >> ${extraMosaicFile} 
			numberOfMosaics=$( cat ${mosaicRadarListFile} | grep -v ^'//' | sed -e "/^$/d " | wc -l | awk '{print $1}' )
			debug_echo "\t\tFound a total of ${numberOfMosaics} mosaics" 
			for i in $( seq 1 ${numberOfMosaics} )
			do
				x=$(( numberOfMosaics-i ))
				mosaicLine=$( cat ${mosaicRadarListFile} |  grep -v ^'//' | sed -e "/^$/d " | tail -${x} | head -1 )
				mosaicDesc=$( echo ${mosaicLine} | cut -f5 -d'|' | sed -e "s/^[[:space:]]*//g" -e "s/[[:space:]]*$//g" )
				mosaicID=$( echo ${mosaicDesc} | sed -e "s/ //g" -e "s/[-&]//g" ) 
				mosaicRadarList=( $( echo ${mosaicLine} | cut -f2 -d'|' ) )
				mosaicRadarLimit=$( echo ${mosaicLine} | grep -v ^// | sed -e "/^$/d " | head -1 | cut -f3 -d'|' | sed -e "s/^[[:space:]]*//g" -e "s/[[:space:]]*$//g" )
				mosaicLatLon=$( echo ${mosaicLine} | grep -v ^// | sed -e "/^$/d " | head -1 | cut -f4 -d'|' | sed -e "s/^[[:space:]]*//g" -e "s/[[:space:]]*$//g" ) 
				radarLimit=15
				if [[ ${#mosaicRadarList[@]} -eq 1 ]]
				then
					if echo ${mosaicRadarList[0]} | grep ^/ > /dev/null
					then
						# this means we have a full path 
						if [[ ${siteType} != "WFO" && "${mosaicRadarLimit}" == "" ]] ; then radarLimit=$( cat ${mosaicRadarList[0]} | wc -l | awk '{print $1}' ) ; fi
						if [[ "${mosaicRadarLimit}" != "" ]] ; then radarLimit=${mosaicRadarLimit} ; fi 
						if [[ ! -f ${mosaicRadarList[0]} ]]
						then
							color_echo yellow 0 "\tNOTE: ${mosaicRadarList[0]} does not exist... SKIPPING"
						else
							mosaicRadarList=$( cat ${mosaicRadarList[0]} | grep -v ^# | head -${radarLimit} | awk '{print $1}' | xargs )
							buildMosaicMenu=true
							debug_echo "\t\tSetting buildMosaicMenu=true after finding file and getting ${mosaicRadarList[@]}"
						fi
					else
						# so we assume it is in localizationDataSets 
						if ! find_awips_config ${mosaicRadarList[0]} S 
						then
							color_echo yellow 0 "\tNOTE: Can not find ${mosaicRadarList[0]} in localizationDataSets... SKIPPING"
						else
							tmpMosaicFile=${retLocation}/${userFile}
							if [[ ${siteType} != "WFO" && "${mosaicRadarLimit}" == "" ]] ; then radarLimit=$( cat ${tmpMosaicFile} | wc -l | awk '{print $1}' ) ; fi
							if [[ "${mosaicRadarLimit}" != "" ]] ; then radarLimit=${mosaicRadarLimit} ; fi 
							mosaicRadarList=$( cat ${tmpMosaicFile} | grep -v ^# | head -${radarLimit} | awk '{print $1}' | xargs )
							buildMosaicMenu=true
							debug_echo "\t\tSetting buildMosaicMenu=true after finding file and getting ${mosaicRadarList[@]}"
						fi
					fi
				else
					if [[ ${#mosaicRadarList[@]} -eq 0 ]] 
					then
						#check for lat/lon
						if [[ "${mosaicLatLon}" ]]
						then
							mosaicLon=$( echo ${mosaicLatLon} | awk '{print $2}' )
							mosaicLat=$( echo ${mosaicLatLon} | awk '{print $1}' )
							if [[ "${mosaicRadarLimit}" != "" ]] ; then radarLimit=${mosaicRadarLimit} ; else debug_echo "\tNOTE: no limit associated with lat/lon entry.. using default"; fi	
							modify_pgsec host metadata trust 
							mosaicRadarList=( $( psql --tuples-only -U awips -h ${EDEXDBSVR} -d metadata -c "select rda_id, ST_distance_sphere(the_geom,ST_SetSRID(ST_PointFromText('POINT(${mosaicLon} ${mosaicLat})'),4326)) as distance from radar_spatial order by distance asc limit ${radarLimit};" | awk '{print $1}' | xargs | tr [:upper:] [:lower:] ) )
							if [[ "${madePgHbaChange}" -eq 1 ]] ; then modify_pgsec host metadata md5 ; fi
							buildMosaicMenu=true
							debug_echo "\t\tSetting buildMosaicMenu=true after finding lat(${mosaicLat})/lon(${mosaicLon}) entry and getting ${mosaicRadarList[@]}"
						# Default to radarsInUse
						elif find_awips_config ${locSite}-radarsInUse.txt CL || find_awips_config radarsInUse.txt C
						then
							# Build from radarsInUse.txt file
							debug_echo "\t\tUsing radarsInUse.txt file ....."
							radarsInUseFile=${retLocation}/${userFile}
							if [[ "${retLocation}" == "${pathPrefix}/awips/fxa/data/localization/${locSite}" ]] && find_awips_config radarsInUse.txt C
							then
								radarsInUseFile=${retLocation}/${userFile}
							fi
							# max is 15 in AWIPS I so I'll implement that for now.
							if [[ ${siteType} != "WFO" ]] ; then radarLimit=$( cat ${radarsInUseFile} | wc -l | awk '{print $1}' ) ; fi
							mosaicRadarList=( $( cat ${radarsInUseFile} | grep -v ^# | head -${radarLimit} | awk '{print $1}' | xargs ) )
						else
							color_echo yellow 0 "\tNOTE:  No mosaic radar list could be defined.  Will not do mosaic processing."
						fi

					else
						buildMosaicMenu=true
					fi 
				fi
				if [[ "${buildMosaicMenu}" ]]
				then
					echo -e "\t<contribute xsi:type=\"subMenu\" menuText=\"${mosaicDesc}\" id=\"${mosaicID}Menu\">" >> ${extraMosaicFile}
					echo -e "\t\t<contribute xsi:type=\"bundleItem\" file=\"bundles/DefaultRadarMosaic.xml\" menuText=\"0.5 Reflectivity\" id=\"Radar05Reflectivity\">" >> ${extraMosaicFile}
					echo -e "\t\t\t<substitute key=\"product\" value=\"94,19,20\" />" >> ${extraMosaicFile}
					echo -e "\t\t\t<substitute key=\"elevation\" value=\"0.5\" />" >> ${extraMosaicFile}
					echo -e "\t\t\t<substitute key=\"name\" value=\"0.5 Reflectivity\" />" >> ${extraMosaicFile}
					echo -e "\t\t\t<substitute value=\"$( echo ${mosaicRadarList[@]} | sed -e "s/ /,/g" )\" key=\"mosaicIcaoList\" />" >> ${extraMosaicFile}
					echo -e "\t\t</contribute>" >> ${extraMosaicFile}
					echo -e "\t\t<contribute xsi:type=\"bundleItem\" file=\"bundles/DefaultRadarMosaic.xml\" menuText=\"Hybrid Scan Refl\" id=\"RadarHybridScanRefl\">" >> ${extraMosaicFile}
					echo -e "\t\t<substitute key=\"product\" value=\"33\" />" >> ${extraMosaicFile}
					echo -e "\t\t<substitute key=\"elevation\" value=\"0.0\" />" >> ${extraMosaicFile}
					echo -e "\t\t<substitute key=\"name\" value=\"Hybrid Scan Refl\" />" >> ${extraMosaicFile}
					echo -e "\t\t\t<substitute value=\"$( echo ${mosaicRadarList[@]} | sed -e "s/ /,/g" )\" key=\"mosaicIcaoList\" />" >> ${extraMosaicFile}
					echo -e "\t\t</contribute>" >> ${extraMosaicFile}
					echo -e "\t\t<contribute xsi:type=\"bundleItem\" file=\"bundles/DefaultRadarMosaic.xml\" menuText=\"Composite Refl\" id=\"RadarCompositeRefl\">" >> ${extraMosaicFile}
					echo -e "\t\t<substitute key=\"product\" value=\"37\" />" >> ${extraMosaicFile}
					echo -e "\t\t<substitute key=\"elevation\" value=\"0.0\" />" >> ${extraMosaicFile}
					echo -e "\t\t<substitute key=\"name\" value=\"Composite Refl\" />" >> ${extraMosaicFile}
					echo -e "\t\t\t<substitute value=\"$( echo ${mosaicRadarList[@]} | sed -e "s/ /,/g" )\" key=\"mosaicIcaoList\" />" >> ${extraMosaicFile}
					echo -e "\t\t</contribute>" >> ${extraMosaicFile}
					echo -e "\t\t<contribute xsi:type=\"bundleItem\" file=\"bundles/DefaultRadarMosaicVILCompRefl.xml\" menuText=\"VIL/Comp Ref\" id=\"RadarVILCompRef\">" >> ${extraMosaicFile}
					echo -e "\t\t\t<substitute value=\"$( echo ${mosaicRadarList[@]} | sed -e "s/ /,/g" )\" key=\"mosaicIcaoList\" />" >> ${extraMosaicFile}
					echo -e "\t\t</contribute>" >> ${extraMosaicFile}
					echo -e "\t\t<contribute xsi:type=\"bundleItem\" file=\"bundles/DefaultRadarMosaic.xml\" menuText=\"Vert integrated Liquid\" id=\"RadarVertIntegratedLiquid\">\n\t\t<substitute key=\"product\" value=\"57\" />\n\t\t<substitute key=\"elevation\" value=\"0.0\" />\n\t\t<substitute key=\"name\" value=\"Vert integrated Liquid\" />" >> ${extraMosaicFile}
					echo -e "\t\t\t<substitute value=\"$( echo ${mosaicRadarList[@]} | sed -e "s/ /,/g" )\" key=\"mosaicIcaoList\" />" >> ${extraMosaicFile}
					echo -e "\t\t</contribute>" >> ${extraMosaicFile}
					echo -e "\t\t<contribute xsi:type=\"bundleItem\" file=\"bundles/DefaultRadarMosaic.xml\" menuText=\"Storm Total Precip\" id=\"RadarStormTotalPrecip\">\n\t\t<substitute key=\"product\" value=\"80\" />\n\t\t<substitute key=\"elevation\" value=\"0.0\" />\n\t\t<substitute key=\"name\" value=\"Storm Total Precip\" />" >> ${extraMosaicFile}
					echo -e "\t\t\t<substitute value=\"$( echo ${mosaicRadarList[@]} | sed -e "s/ /,/g" )\" key=\"mosaicIcaoList\" />" >> ${extraMosaicFile}
					echo -e "\t\t</contribute>" >> ${extraMosaicFile}
					echo -e "\t\t<contribute xsi:type=\"bundleItem\" file=\"bundles/DefaultRadarMosaic.xml\" menuText=\"One Hour Precip\" id=\"RadarOneHourPrecip\">\n\t\t<substitute key=\"product\" value=\"78\" />\n\t\t<substitute key=\"elevation\" value=\"0.0\" />\n\t\t<substitute key=\"name\" value=\"One Hour Precip\" />" >> ${extraMosaicFile}
					echo -e "\t\t\t<substitute value=\"$( echo ${mosaicRadarList[@]} | sed -e "s/ /,/g" )\" key=\"mosaicIcaoList\" />" >> ${extraMosaicFile}
					echo -e "\t\t</contribute>" >> ${extraMosaicFile}
					echo -e "\t\t<contribute xsi:type=\"bundleItem\" file=\"bundles/DefaultRadarMosaic.xml\" menuText=\"Three Hour Precip\" id=\"RadarThreeHourPrecip\">\n\t\t<substitute key=\"product\" value=\"79\" />\n\t\t<substitute key=\"elevation\" value=\"0.0\" />\n\t\t<substitute key=\"name\" value=\"Three Hour Precip\" />" >> ${extraMosaicFile}
					echo -e "\t\t\t<substitute value=\"$( echo ${mosaicRadarList[@]} | sed -e "s/ /,/g" )\" key=\"mosaicIcaoList\" />" >> ${extraMosaicFile}
					echo -e "\t\t</contribute>" >> ${extraMosaicFile}
					echo -e "\t\t<contribute xsi:type=\"bundleItem\" file=\"bundles/DefaultRadarMosaic.xml\" menuText=\"User Selectable Precip\" id=\"RadarUserSelectablePrecip\">\n\t\t<substitute key=\"product\" value=\"31\" />\n\t\t<substitute key=\"elevation\" value=\"0.0\" />\n\t\t<substitute key=\"name\" value=\"User Selectable Precip\" />" >> ${extraMosaicFile}
					echo -e "\t\t\t<substitute value=\"$( echo ${mosaicRadarList[@]} | sed -e "s/ /,/g" )\" key=\"mosaicIcaoList\" />" >> ${extraMosaicFile}
					echo -e "\t\t</contribute>" >> ${extraMosaicFile}
					echo -e "\t\t<contribute xsi:type=\"bundleItem\" file=\"bundles/DefaultRadarMosaic.xml\" menuText=\"Layer 1 Max Refl\" id=\"RadarLayer1MaxRefl\">\n\t\t<substitute key=\"product\" value=\"65\" />\n\t\t<substitute key=\"elevation\" value=\"0.0\" />\n\t\t<substitute key=\"name\" value=\"Layer 1 Max Refl\" />" >> ${extraMosaicFile}
					echo -e "\t\t\t<substitute value=\"$( echo ${mosaicRadarList[@]} | sed -e "s/ /,/g" )\" key=\"mosaicIcaoList\" />" >> ${extraMosaicFile}
					echo -e "\t\t</contribute>" >> ${extraMosaicFile}
					echo -e "\t\t<contribute xsi:type=\"bundleItem\" file=\"bundles/DefaultRadarMosaic.xml\" menuText=\"Layer 2 Max Refl\" id=\"RadarLayer2MaxRefl\">\n\t\t<substitute key=\"product\" value=\"66\" />\n\t\t<substitute key=\"elevation\" value=\"0.0\" />\n\t\t<substitute key=\"name\" value=\"Layer 2 Max Refl\" />" >> ${extraMosaicFile}
					echo -e "\t\t\t<substitute value=\"$( echo ${mosaicRadarList[@]} | sed -e "s/ /,/g" )\" key=\"mosaicIcaoList\" />" >> ${extraMosaicFile}
					echo -e "\t\t</contribute>" >> ${extraMosaicFile}
					echo -e "\t\t<contribute xsi:type=\"bundleItem\" file=\"bundles/DefaultRadarMosaic.xml\" menuText=\"Layer 3 Max Refl\" id=\"RadarLayer3MaxRefl\">\n\t\t<substitute key=\"product\" value=\"67\" />\n\t\t<substitute key=\"elevation\" value=\"0.0\" />\n\t\t<substitute key=\"name\" value=\"Layer 3 Max Refl\" />" >> ${extraMosaicFile}
					echo -e "\t\t\t<substitute value=\"$( echo ${mosaicRadarList[@]} | sed -e "s/ /,/g" )\" key=\"mosaicIcaoList\" />" >> ${extraMosaicFile}
					echo -e "\t\t</contribute>" >> ${extraMosaicFile}
					echo -e "\t\t<contribute xsi:type=\"bundleItem\" file=\"bundles/DefaultRadarMosaic.xml\" menuText=\"Echo Tops\" id=\"RadarEchoTops\">\n\t\t<substitute key=\"product\" value=\"41\" />\n\t\t<substitute key=\"elevation\" value=\"0.0\" />\n\t\t<substitute key=\"name\" value=\"Echo Tops\" />" >> ${extraMosaicFile}
					echo -e "\t\t\t<substitute value=\"$( echo ${mosaicRadarList[@]} | sed -e "s/ /,/g" )\" key=\"mosaicIcaoList\" />" >> ${extraMosaicFile}
					echo -e "\t\t</contribute>" >> ${extraMosaicFile}
					echo -e "\t\t<contribute xsi:type=\"bundleItem\" file=\"bundles/DefaultRadarMosaic.xml\" menuText=\"Hybrid Hydro Class\" id=\"RadarHybridHydroClass\">\n\t\t<substitute key=\"product\" value=\"177\" />\n\t\t<substitute key=\"elevation\" value=\"0.0\" />\n\t\t<substitute key=\"name\" value=\"Hybrid Hydro Class\" />" >> ${extraMosaicFile}
					echo -e "\t\t\t<substitute value=\"$( echo ${mosaicRadarList[@]} | sed -e "s/ /,/g" )\" key=\"mosaicIcaoList\" />" >> ${extraMosaicFile}
					echo -e "\t\t</contribute>" >> ${extraMosaicFile}
					echo -e "\t\t<contribute xsi:type=\"bundleItem\" file=\"bundles/DefaultRadarMosaic.xml\" menuText=\"Dual Pol Storm Total\" id=\"Radar\">\n\t\t<substitute key=\"product\" value=\"172\" />\n\t\t<substitute key=\"elevation\" value=\"0.0\" />\n\t\t<substitute key=\"name\" value=\"Dual Pol Storm Total\" />" >> ${extraMosaicFile}
					echo -e "\t\t\t<substitute value=\"$( echo ${mosaicRadarList[@]} | sed -e "s/ /,/g" )\" key=\"mosaicIcaoList\" />" >> ${extraMosaicFile}
					echo -e "\t\t</contribute>" >> ${extraMosaicFile}
					echo -e "\t\t<contribute xsi:type=\"bundleItem\" file=\"bundles/DefaultRadarMosaic.xml\" menuText=\"Dual Pol 1hr Accum\" id=\"Radar\">\n\t\t<substitute key=\"product\" value=\"170\" />\n\t\t<substitute key=\"elevation\" value=\"0.0\" />\n\t\t<substitute key=\"name\" value=\"Dual Pol 1hr Accum\" />" >> ${extraMosaicFile}
					echo -e "\t\t\t<substitute value=\"$( echo ${mosaicRadarList[@]} | sed -e "s/ /,/g" )\" key=\"mosaicIcaoList\" />" >> ${extraMosaicFile}
					echo -e "\t\t</contribute>" >> ${extraMosaicFile}
					echo -e "\t</contribute>" >> ${extraMosaicFile}
					unset buildMosaicMenu
				fi
			done
			echo -e "</menuTemplate>" >> ${extraMosaicFile}
			radarPluginDirName=$( ls -d /awips2/cave/plugins/com.raytheon.viz.radar_* )
			scp -qp ${radarPluginDirName}/localization/menus/radar/baseRadarMenu.xml ${EDEX_HOME}/data/utility/cave_static/site/${locSite}/menus/radar/
			sed -i -e "/belowRadarMosaics/i 	<contribute xsi:type=\"separator\" id=\"beforeMoreMosaics\" />" ${EDEX_HOME}/data/utility/cave_static/site/${locSite}/menus/radar/baseRadarMenu.xml 
			sed -i -e "/beforeMoreMosaics/a         <contribute xsi:type=\"subinclude\" fileName=\"menus/radar/otherMosaicMenus.xml\" />" ${EDEX_HOME}/data/utility/cave_static/site/${locSite}/menus/radar/baseRadarMenu.xml 
			chown awips:fxalpha ${EDEX_HOME}/data/utility/cave_static/site/${locSite}/menus/radar/*
		fi
	fi

	cd ${EDEX_HOME}/data/utility/${locRoot}/site/${locSite} && echo

	if [[ ! -f radar/eavConfigTable.txt || "${FORCE}" ]]
	then
		if ! copy_awips_file ${pathPrefix}/data/fxa/nationalData/eavConfigTable.txt radar/eavConfigTable.txt awips fxalpha 644 ; then exit 1 ; fi
	else
		echo -e "\tNOTE: radar/eavConfigTable.txt exists \t SKIPPING"
	fi
	
	echo -e "\n\tCreating Upper Air --> RAOB Menu Input File.........."
	create_subtree upperair awips fxalpha
	debug_echo "\tSearching for raobMenus.txt...."
	if ! find_awips_config raobMenus.txt LN
	then
		color_echo red 1 "ERROR - Can not find raobMenu.txt -- can not create raobSitesInUse.txt" 
	else
		inputFile=${retLocation}/${userFile}
		modify_pgsec host metadata trust
		# cycle through and setup variables.
		rm -f /tmp/RaobAddLine.tmp 
		rm -f /tmp/LocalRaobAddLine.tmp 
		debug_echo "\t\tAbout to run through ${inputFile}"
		debug_echo "\t\tMy CenterPoint: ${myCenterPoint[1]} ${myCenterPoint[0]}"
		grep productButton ${inputFile} | while read line
		do
			raobid=$( echo $line | awk '{print $4}' ) 
			isRaob=$( psql -U awips -d metadata -h ${EDEXDBSVR} --tuples-only -c "select icao,wmoindex,name from awips.common_obs_spatial where catalogtype='22' and icao='${raobid}' and ST_distance_sphere(upperairgeom,ST_PointFromText('POINT(${myCenterPoint[1]} ${myCenterPoint[0]})')) < 200000" | head -1 )
			if [[ "${isRaob}" ]]
			then
				debug_echo "\t\tFound A RAOB Site within 200km: $( echo $isRaob | cut -f1 -d'|' | sed -e 's/ $//g' | sed -e 's/^ //g' )"
				tmpName=( $( echo ${isRaob} | cut -f3 -d'|' | sed -e 's/ $//g' | sed -e 's/^ //g' ) )
				fullName=
				for z in $( seq 0 $(( ${#tmpName[@]}-2 )) )
				do
					first=$( echo ${tmpName[$z]:0:1} | tr [:lower:] [:upper:] )
					rest=$( echo ${tmpName[$z]:1} | tr [:upper:] [:lower:] )
					fullName=$( echo ${fullName} ${first}${rest} )
				done
				fullName=$( echo "${fullName} ${tmpName[$(( ${#tmpName[@]} - 1 ))]}" )
				addLine="$( echo ${isRaob} | cut -f1 -d'|' | sed -e 's/ $//g' | sed -e 's/^ //g' ) $( echo ${isRaob} | cut -f2 -d '|' | sed -e 's/ $//g' | sed -e 's/^ //g' ) ${fullName} MYEOF"
				echo ${addLine} >> /tmp/RaobAddLine.tmp
				echo ${addLine} >> /tmp/LocalRaobAddLine.tmp
				continue 
			fi
			isLocalRaob=$( psql -U awips -d metadata -h ${EDEXDBSVR} --tuples-only -c "select icao,wmoindex,name from awips.common_obs_spatial where catalogtype='22' and icao='${raobid}' and ST_distance_sphere(upperairgeom,ST_PointFromText('POINT(${myCenterPoint[1]} ${myCenterPoint[0]})')) < 600000" | head -1 )
			if [[ "${isLocalRaob}" ]] 
			then
				debug_echo "\t\tFound A RAOB Site within 600km: $( echo $isLocalRaob | cut -f1 -d'|' | sed -e 's/ $//g' | sed -e 's/^ //g' )"
				tmpName=( $( echo ${isLocalRaob} | cut -f3 -d'|' | sed -e 's/ $//g' | sed -e 's/^ //g' ) )
				fullName=
				for z in $( seq 0 $(( ${#tmpName[@]}-2 )) )
				do
					first=$( echo ${tmpName[$z]:0:1} | tr [:lower:] [:upper:] )
					rest=$( echo ${tmpName[$z]:1} | tr [:upper:] [:lower:] )
					fullName=$( echo ${fullName} ${first}${rest} )
				done
				fullName=$( echo "${fullName} ${tmpName[$(( ${#tmpName[@]} - 1 ))]}" )
				addLine="$( echo ${isLocalRaob} | cut -f1 -d'|' | sed -e 's/ $//g' | sed -e 's/^ //g' ) $( echo ${isLocalRaob} | cut -f2 -d '|' | sed -e 's/ $//g' | sed -e 's/^ //g' ) ${fullName} MYEOF"
				echo ${addLine} >> /tmp/LocalRaobAddLine.tmp
			fi
		done
	fi
	if [[ "${madePgHbaChange}" -eq 1 ]] ; then modify_pgsec host metadata md5 ; fi

	if [[ ! -f upperair/raobSitesInUse.txt || "${FORCE}" ]]
        then
                cat ${EDEX_HOME}/data/utility/common_static/base/upperair/raobSitesInUse.txt | grep -v ^[a-zA-Z] > upperair/raobSitesInUse.txt
                chown awips:fxalpha upperair/raobSitesInUse.txt
                chmod 644 upperair/raobSitesInUse.txt
		if [ -f /tmp/RaobAddLine.tmp ] ; then sed -i "/^# UPPER_AIR/a$( cat /tmp/RaobAddLine.tmp | xargs | sed -e 's/ MYEOF[[:space:]]*/\\n/g')" upperair/raobSitesInUse.txt ; fi
		if [ -f /tmp/LocalRaobAddLine.tmp ] ; then sed -i "/^# LOCAL_UPPER_AIR/a$( cat /tmp/LocalRaobAddLine.tmp | xargs | sed -e 's/ MYEOF[[:space:]]*/\\n/g' )" upperair/raobSitesInUse.txt ; fi
	else
		echo -e "\tNOTE:  upperair/raobSitesInUse.txt exists \t SKIPPING"
	fi
	
	color_echo blue 1 " -----------------------------------------------"
	color_echo blue 1 "| Completed $FUNCNAME - $( date ) "
	color_echo blue 1 " -----------------------------------------------"
	
	return 0


}

function config_min_ffmp_run_config() {

	# Name:		config_min_ffmp_run_config
	# Desc:		Configures minimal FFMPRunConfig.xml 

        locRoot=common_static
        locSite=$1
	local radarsOnMenuFile
	local xtraFFMPString
	local ffmp_locRadarList

        color_echo blue 1 " -----------------------------------------------"
        color_echo blue 1 "| Begin $FUNCNAME - $( date ) "
        color_echo blue 1 " -----------------------------------------------"

        cd ${EDEX_HOME}/data/utility/${locRoot}/site/${locSite}

	if [[ ! -f ${pathPrefix}/data/fxa/ffmp/FFMPsourceConfig.dat ]]
	then
		color_echo yellow 0 "\tNOTE:  Can not find ${pathPrefix}/FFMPSourceConfig -- you won't have radars in your FFMPRunConfig!"
	else
		ffmp_backupList=( $( grep -wE '^\+\|[A-Z]{3}' ${pathPrefix}/data/fxa/ffmp/FFMPsourceConfig.dat | cut -f2- -d'|' | sed -e 's/|/ /g' | xargs ) ) 
		ffmp_dhrRadarList=( $( grep -wE '^[kpt][a-z]{3}' ${pathPrefix}/data/fxa/ffmp/FFMPsourceConfig.dat | cut -f1 -d'|' | xargs ) ) 
		ffmp_dprRadarList=( $( grep -wE '^[kpt][a-z]{3}DPR' ${pathPrefix}/data/fxa/ffmp/FFMPsourceConfig.dat | cut -f1 -d'|' | sed -e 's/DPR//1' | xargs ) )
		ffmp_locRadarList=( $( echo ${ffmp_dhrRadarList[@]} ${ffmp_dprRadarList[@]} | sed -e "s/ /\n/g" | sort -n | uniq | xargs ) )
	fi


	# Build the file if it isn't there
	
	if [[ ! -f ffmp/FFMPRunConfig.xml || "${FORCE}" ]]
	then
		create_subtree ffmp awips fxalpha
		echo -e "\tConfiguring Bare Minimum FFMPRunConfig.xml"
		echo -e "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>" > ffmp/FFMPRunConfig.xml
		echo -e "<!-- \n${xmlHeader}\n##\n##THIS FILE GENERATED AUTOMATICALLY BY $FUNCNAME IN THE AWIPS II AUTOMATION TOOL \n-->" >> ffmp/FFMPRunConfig.xml
		chown awips:fxalpha ffmp/FFMPRunConfig.xml
		echo -e "<FFMPRunConfig xmlns:ns2=\"group\">" >> ffmp/FFMPRunConfig.xml
		echo -e "\t<runner>" >> ffmp/FFMPRunConfig.xml
	      
		debug_echo "\tAdding RFCs to ffmp/FFMPRunConfig.xml"
		echo -e "\t\t<!-- Source Ingest Config's, used by URI Filters -->" >> ffmp/FFMPRunConfig.xml
		for rfcString in FFG0124hr FFG0324hr FFG0624hr
		do
		      echo -e "\t\t<sourceIngestConfig name=\"${rfcString}\" uriSubLocation=\"3\">" >> ffmp/FFMPRunConfig.xml
		      for myRFC in $( echo ${rfcInfo[@]} )
		      do
			      case ${myRFC} in
				      "ACR"	)	rfc_string=P$( echo ${myRFC} ) ;;
				      "TIR"	)	rfc_string=K$( echo ${myRFC} ) ; xtraFFMPString="-HiRes" ;;
				      *	)	rfc_string=K$( echo ${myRFC} ) ;;
			      esac
			      echo -e "\t\t\t<dataKey>${rfc_string}${xtraFFMPString}</dataKey>" >> ffmp/FFMPRunConfig.xml
			      unset xtraFFMPString
		      done
		      echo -e "\t\t</sourceIngestConfig>" >> ffmp/FFMPRunConfig.xml 
		done
		if [[ ! "${ffmp_locRadarList}" ]]
		then
		      color_echo yellow 0 "\tNOTE: No radars in array, not adding DHR, DPR or QPFSCAN sources to FFMPRunConfig.xml"
		      echo -e "\t\t<!-- Not adding DHR, DPR or QPFSCAN because no radars found in AWIPS I FFMPsourceConfig.dat -->" >> ffmp/FFMPRunConfig.xml
		else
		      for radarString in DHR DPR QPFSCAN
		      do
			    case "${radarString}" in
				    "DHR"	)	tmpRadarArray=( ${ffmp_dhrRadarList[@]} ) ;;
				    "DPR"	)	tmpRadarArray=( ${ffmp_dprRadarList[@]} ) ;; 
				    "QPFSCAN"	)	tmpRadarArray=( ${ffmp_locRadarList[@]} ) ;; 
			    esac

			    if [[ ! "${tmpRadarArray}" || ${#tmpRadarArray[@]} -eq 0 ]] ; then
				    debug_echo "\t\tSkipping ${radarString} because no radars in tmpRadarArray"
				    echo -e "\t\t<!-- Not adding sourceIngestConfig for ${radarString} due to no radars in array -->" >> ffmp/FFMPRunConfig.xml
			    else
				    echo -e "\t\t<sourceIngestConfig name=\"${radarString}\" uriSubLocation=\"3\">" >> ffmp/FFMPRunConfig.xml 
				    for myRadarIcao in ${tmpRadarArray[@]} 
				    do
					    debug_echo "\t\tAdding ${myRadarIcao} for source ${radarString}" 
					    echo -e "\t\t\t<dataKey>${myRadarIcao}</dataKey>" >> ffmp/FFMPRunConfig.xml 
				    done
				    echo -e "\t\t</sourceIngestConfig>" >> ffmp/FFMPRunConfig.xml 
			    fi
		      done
		fi
		echo -e "\n\t\t<!--  Product definitions to be run against -->" >> ffmp/FFMPRunConfig.xml 

		if [[ ! "${ffmp_locRadarList}" ]]
		then
		      color_echo yellow 0 "\tNOTE: No radars in array, not adding DHR, DPR or QPFSCAN sources to FFMPRunConfig.xml"
		      echo -e "\t\t<!-- Not adding DHR because no radars found in AWIPS I FFMPsourceConfig.dat -->" >> ffmp/FFMPRunConfig.xml
		else
		      for radarString in DHR DPR ; do
			    case "${radarString}" in
				    "DHR"	)	tmpRadarArray=( ${ffmp_dhrRadarList[@]} ) ;;
				    "DPR"	)	tmpRadarArray=( ${ffmp_dprRadarList[@]} ) ;; 
				    "QPFSCAN"	)	tmpRadarArray=( ${ffmp_locRadarList[@]} ) ;; 
			    esac

			    for rdr in ${tmpRadarArray[@]} 
			    do
				    debug_echo "\tAdding ${radarString} product line for ${rdr} to ffmp/FFMPRunConfig.xml"
				    echo -e "\t\t<product name=\"${radarString}\" key=\"${rdr}\"/>" >> ffmp/FFMPRunConfig.xml
			    done
		      done
		fi

		debug_echo "\tAdding DHRMOSAIC and BDHRMOSAIC"
		echo -e "\t\t<product name=\"DHRMOSAIC\" key=\"hpe\"/>" >> ffmp/FFMPRunConfig.xml
		echo -e "\t\t<product name=\"BDHRMOSAIC\" key=\"bhpe\"/>" >> ffmp/FFMPRunConfig.xml

		if [[ ! "${ffmp_backupList}" ]]
		then
		      color_echo yellow 0 "\tNOTE: No backup sites found in AWIPS I FFMPsourceConfig.dat. Just adding primary site to config"
		      debug_echo "\tAdding primary domain for ${locSite}"
		      echo -e "\t\t<domain primary=\"true\" cwa=\"${locSite}\"/>" >> ffmp/FFMPRunConfig.xml
		else
		      for i in ${ffmp_backupList[@]}
		      do
                if [[ "$i" = "${locSite}" ]]; then
                    echo -e "\t\t<domain primary=\"true\" cwa=\"${locSite}\"/>" >> ffmp/FFMPRunConfig.xml
                else
                    echo -e "\t\t<domain primary=\"false\" cwa=\"$i\"/>" >> ffmp/FFMPRunConfig.xml
                fi
		      done
		fi
		echo -e "\t</runner>" >> ffmp/FFMPRunConfig.xml
		echo -e "</FFMPRunConfig>" >> ffmp/FFMPRunConfig.xml
					  
		
	fi

        color_echo blue 1 " -----------------------------------------------"
        color_echo blue 1 "| Completed $FUNCNAME - $( date ) "
        color_echo blue 1 " -----------------------------------------------"

	return 0

}

function config_wg_templates() {

	# Name:		config_wg_templates
	# Desc:		Configures warngen templates from delivered OAX

	## OBE AS OF OB11.5 ##
	
	locRoot=common_static
	locSite=$1

	if [[ ${siteType} == "WFO" ]]
	then
		return 100
	else

		color_echo blue 1 " -----------------------------------------------"
		color_echo blue 1 "| Begin $FUNCNAME - $( date ) "
		color_echo blue 1 " -----------------------------------------------"
		
		cd ${EDEX_HOME}/data/utility/${locRoot}/site/${locSite}
		
		echo -e "\tWorking in $(pwd)\n"
		create_subtree warngen awips fxalpha
		
		echo -e "\n\tConfiguring WarnGen Templates From Delivered OAX Versions....."
		for myFile in $( ls ../OAX/warngen/ )
		do
			if [[ ! -f warngen/${myFile} || "${FORCE}" ]]
			then
				cp -a ../OAX/warngen/${myFile} warngen/
			else
				echo -e "\t\tNOTE: ${myFile} exists \t SKIPPING"
			fi
		done
	
		color_echo blue 1 " -----------------------------------------------"
		color_echo blue 1 "| Completed $FUNCNAME - $( date ) "
		color_echo blue 1 " -----------------------------------------------"
	fi
	
	return 0

}

function config_wg_points() {

	# Wrapper for importPointsInfo, importMarkersInfo
	# USAGE:
	#	config_wg_points XXX	
	
	# Aruments: 
        #       $1 = Localization Site (XXX)

	echo_function BEGIN $FUNCNAME

	locSite=$1
	
	for a in LocalCitiesInfo
	do
	    tempVariable=${a}File 
	    workingVariable=${!tempVariable}
	    if find_awips_config ${locSite}-${a}.txt CL || find_awips_config ${a}.txt C
	    then
		echo "${retLocation}/${userFile}" > /tmp/${a}File.txt
		if [[ "${retLocation}" == "${pathPrefix}/awips/fxa/data/localization/${locSite}" ]] && find_awips_config ${a}.txt C
		then
			echo "${retLocation}/${userFile}" > /tmp/${a}File.txt
		fi
	    else
		color_echo yellow 0 "\tNOTE:  Could not find input file for ${a}.  Skipping LocalCitiesInfo Import." 
		return 0
	    fi
	done

	# make sure the spaces aren't in there.
	localCitiesFile=$( cat /tmp/LocalCitiesInfoFile.txt )
	cat ${localCitiesFile} | sed -e "s/[[:space:]][[:space:]]/ /g" -e "s/[[:space:]]*$//g" -e "/^$/d" -e '/[0-9]$\|[0-9]+$/ !d' > /tmp/LocalCitiesInfo.tmp
	# import them in 
	import_wg_file point /tmp/LocalCitiesInfo.tmp localcities


}

function config_gfe() {

	# Name:		config_wg_templates
	# Desc:		Configures GFE files from delivered OAX, and from AWIPS I localConfig.py
	
	locRoot=edex_static
	locSite=$1
	
	local buildSiteConfig
	local buildSites
	
	color_echo blue 1 " -----------------------------------------------"
	color_echo blue 1 "| Begin $FUNCNAME - $( date ) "
	color_echo blue 1 " -----------------------------------------------"
	
	cd ${EDEX_HOME}/data/utility/${locRoot}
	
	echo -e "\tWorking in $(pwd)\n"
	create_subtree config/gfe awips fxalpha
	
	debug_echo "\tChecking for PRIMARY_SITES to see if I should create a siteConfig.py....." 
	if [ -f /awips2/GFESuite/ServiceBackup/configuration/svcbu.properties ] ; then
			debug_echo "\tFound svcbu.properties .... using PRIMARY_SITES"
			for siteToCheck in $( grep 'PRIMARY_SITES=' /awips2/GFESuite/ServiceBackup/configuration/svcbu.properties | cut -f2 -d'=' | sed -e "s/,/ /g" ) ; do
					if echo ${siteToCheck} | grep -E '[A-Za-z0-9]{3,4}' > /dev/null ; then
						debug_echo "\t\tFound site ${siteToCheck}, setting buildSiteConfig=true"
						buildSiteConfig=true
						buildSites=$( echo ${buildSites} ${siteToCheck} ) 
					else
						debug_echo "\t\tFound site ${siteToCheck} which does not seem valid"
					fi
			done
	fi
	
	if [[ ${buildSites} == "" || -z ${buildSites} ]] ; then
		debug_echo "\tbuildSites is empty or zero length... setting buildSites=${locSite}" 
		buildSites=${locSite}
		buildSiteConfig=true
	fi
	
	# special case for the test beds...
	if echo ${platformName} | grep -iwE "tbw[34]|tbdr|tbdw|tbwo|ctbn" > /dev/null ; then
		color_echo yellow 0 "NOTE:\t\tSetting buildSiteConfig=true and buildSiteConfig=${locSite} because you are running on a test bed"
		color_echo yellow 0 "     \t\tYou'll need to check the serverConfig.py to ensure the right GFESUITE_SITEID is present" 
		buildSiteConfig=true
		buildSites=${locSite}
	fi
	
	if [[ ${buildSiteConfig} = "true" ]] ; then
		for primarySite in ${buildSites} ; do
			echo -e "\n\tConfiguring GFE siteConfig.py for site ${primarySite}......"
			if [[ ! -f site/${primarySite}/config/gfe/siteConfig.py || "${FORCE}" ]]
			then
				echo -e "\tCreating `pwd`/site/${primarySite}/config/gfe/siteConfig.py ..."
				#cat ${EDEX_HOME}/data/utility/edex_static/site/OAX/config/gfe/siteConfig.py | sed "s/OAX/${locSite}/g" > config/gfe/siteConfig.py
				echo -e "##" > site/${primarySite}/config/gfe/siteConfig.py
				echo -e "# This software was developed and / or modified by Raytheon Company," >> site/${primarySite}/config/gfe/siteConfig.py
				echo -e "# pursuant to Contract DG133W-05-CQ-1067 with the US Government." >> site/${primarySite}/config/gfe/siteConfig.py
				echo -e "#\n# U.S. EXPORT CONTROLLED TECHNICAL DATA" >> site/${primarySite}/config/gfe/siteConfig.py
				echo -e "# This software product contains export-restricted data whose" >> site/${primarySite}/config/gfe/siteConfig.py
				echo -e "# export/transfer/disclosure is restricted by U.S. law. Dissemination" >> site/${primarySite}/config/gfe/siteConfig.py
				echo -e "# to non-U.S. persons whether in the United States or abroad requires" >> site/${primarySite}/config/gfe/siteConfig.py
				echo -e "# an export license or other authorization." >> site/${primarySite}/config/gfe/siteConfig.py
				echo -e "#\n# Contractor Name:        Raytheon Company" >> site/${primarySite}/config/gfe/siteConfig.py
				echo -e "#\n# See the AWIPS II Master Rights File (\"Master Rights File.pdf\") for" >> site/${primarySite}/config/gfe/siteConfig.py
				echo -e "##\n##THIS FILE GENERATED AUTOMATICALLY BY $FUNCNAME IN THE AWIPS II AUTOMATION TOOL" >> site/${primarySite}/config/gfe/siteConfig.py
				echo -e "\nimport os, socket" >> site/${primarySite}/config/gfe/siteConfig.py
				echo -e "\n\nGFESUITE_HOME = os.environ['EDEX_HOME']+\"/../GFESuite\"" >> site/${primarySite}/config/gfe/siteConfig.py
				echo -e "GFESUITE_SERVER = \"${EDEXSVR}\"" >> site/${primarySite}/config/gfe/siteConfig.py
				echo -e "GFESUITE_PORT   = '98000000'" >> site/${primarySite}/config/gfe/siteConfig.py
				echo -e "GFESUITE_SITEID = '${primarySite}'" >> site/${primarySite}/config/gfe/siteConfig.py
				echo -e "GFESUITE_PRDDIR = GFESUITE_HOME+\"/products\" " >> site/${primarySite}/config/gfe/siteConfig.py
				echo -e "GFESUITE_LOGDIR = GFESUITE_HOME+\"/logs/\" + GFESUITE_SITEID" >>  site/${primarySite}/config/gfe/siteConfig.py
				myMhsId=$( echo ${platformName} | tr [:lower:] [:upper:] )
				echo -e "GFESUITE_MHSID  = '${myMhsId}'" >> site/${primarySite}/config/gfe/siteConfig.py
				chown awips:fxalpha site/${primarySite}/config/gfe/siteConfig.py && chmod 444 site/${primarySite}/config/gfe/siteConfig.py
			else
				echo -e "\tNOTE: site/${primarySite}/config/gfe/siteConfig.py already present \t SKIPPING"
			fi
		done
	else
		echo -e "\n\tNot configuring GFE siteConfig.py as no primary site was found for ${locSite}" 
	fi

	#echo -e "\n\tConfiguring GFE localConfig.py ......"
	#if [[ ! -f config/gfe/localConfig.py || "${FORCE}" ]]
	#then
	#	if copy_awips_file ${pathPrefix}/awips/GFESuite/primary/etc/SITE/localConfig.py config/gfe/localConfig.py awips fxalpha 644
	#	then
	color_echo yellow 0 "\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	color_echo yellow 0 "\t!!!                 IMPORTANT NOTE                               !!!"
	color_echo yellow 0 "\t!!! This script no longer copies the AWIPS I                     !!!"
	color_echo yellow 0 "\t!!! localConfig.py into place.  You will need                    !!!"
	color_echo yellow 0 "\t!!! to manually copy the file if it isn't                        !!!"
	color_echo yellow 0 "\t!!! in place.                                                    !!!"
	color_echo yellow 0 "\t!!!                                                              !!!"
	color_echo yellow 0 "\t!!! AWIPS I Location:                                            !!!"
	color_echo yellow 0 "\t!!! /awips/GFESuite/primary/etc/SITE                             !!!"
	color_echo yellow 0 "\t!!!                                                              !!!"
	color_echo yellow 0 "\t!!! AWIPS II Location:                                           !!!"
	color_echo yellow 0 "\t!!! /awips2/edex/data/utility/edex_static/site/LLL/config/gfe/   !!!"
	color_echo yellow 0 "\t!!!                                                              !!!"
	color_echo yellow 0 "\t!!! You will need to change syntax of D2DDIRS to D2DMODELS       !!!"
        color_echo yellow 0 "\t!!! MANUALLY BEFORE STARTING EDEX                                !!!"
	color_echo yellow 0 "\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	#	else
	#		echo -e "\t NOTE:  Continuing Anyway..."
	#	fi
	#else
	#	echo -e "\tNOTE: config/gfe/localConfig.py already present \t SKIPPING"
	#fi

	cd ${EDEX_HOME}/data/utility/common_static/site/${locSite}

	echo -e "\tWorking in $(pwd)\n"
	create_subtree isc/utilities awips fxalpha

	echo -e "\n\tConfiguring GFE iscSendSampleDef.py ......"
	if [[ ! -f isc/utilities/iscSendSampleDef.py || "${FORCE}" ]]
	then
		if [[ -f ${pathPrefix}/awips/GFESuite/primary/data/databases/SITE/TEXT/Utility/iscSendSampleDef.Utility ]]
		then
			echo -e "\tCreating `pwd`/isc/utilities/iscSendSampleDef.py ..."
			if ! copy_awips_file ${pathPrefix}/awips/GFESuite/primary/data/databases/SITE/TEXT/Utility/iscSendSampleDef.Utility isc/utilities/iscSendSampleDef.py awips fxalpha 644
			then
				color_echo red 1 "\t\tERROR: Copying of iscSendSampleDef failed!" 
			fi
		else
			color_echo yellow 0 "\tNo file to migrate.  ${pathPrefix}/awips/GFESuite/primary/data/databases/SITE/TEXT/Utility/iscSendSampleDef.Utility does not exist" 
		fi
	else
		echo -e "\tNOTE: iscSendSampleDef.py exists \t SKIPPING" 
	fi
	
    echo -e "\n\tMigrating GFE localVTECPartners.py......."
    if [[ ! -f vtec/localVTECPartners.py || "${FORCE}" ]]
    then
        if [[ -f ${pathPrefix}/awips/GFESuite/primary/etc/SITE/localVTECPartners.py ]]
        then
            if ! copy_awips_file ${pathPrefix}/awips/GFESuite/primary/etc/SITE/localVTECPartners.py vtec/localVTECPartners.py awips fxalpha 644
            then
                color_echo red 1 "\t\tERROR: Copying localVTECPartners.py failed!"
            fi
        else
            color_echo yellow 0 "\tNo file to migrate.  ${pathPrefix}/awips/GFESuite/primary/etc/SITE/localVTECPartners.py does not exist."
        fi
    else
        echo -e "\tNOTE:  localVTECPartners.py already exists \t SKIPPING"
    fi

	color_echo blue 1 " -----------------------------------------------"
	color_echo blue 1 "| Completed $FUNCNAME - $( date ) "
	color_echo blue 1 " -----------------------------------------------"
	
	return 0
}

function config_cleanup() {

	# Name:		config_cleanup
	# Desc:		Configures various things -- may be temporary things
	
	locSite=$1
	
	echo_function Begin $FUNCNAME
	
	case "${AII_RELEASEID}" in
		* )	shareDir=${EDEX_HOME}/data/share ;;
	esac

	echo -e "\tConfiguring set_hydro_env for ${locSite}....."
	if ! grep APPS_DEFAULTS_SITE ${shareDir}/hydroapps/set_hydro_env | grep ${locSite} > /dev/null
	then
		sed -i "/APPS_DEFAULTS_SITE=/s/site\/[A-Z]../site\/${locSite}/g" ${shareDir}/hydroapps/set_hydro_env
	else
		echo -e "\tNOTE: set_hydro_env already configured... \t SKIPPING"
	fi

	if ! grep AW_SITE_IDENTIFIER ${shareDir}/hydroapps/set_hydro_env | grep ${locSite} > /dev/null
	then
		if ! grep AW_SITE_IDENTIFIER ${shareDir}/hydroapps/set_hydro_env > /dev/null
		then
			sed -i "/^#AWIPS_MODIFICATION_BLOCK_BEGIN/aAW_SITE_IDENTIFIER=${locSite}" ${shareDir}/hydroapps/set_hydro_env
		else
			sed -i "/AW_SITE_IDENTIFIER=/s/=[A-Z]../=${locSite}/1" ${shareDir}/hydroapps/set_hydro_env
		fi
	fi

	echo -e "\tOK!  Complete!"

	if [[ -f ${pathPrefix}/data/fxa/workFiles/wanMsgHandling/NWWS_exclude_${locSite}.txt ]]
	then
		targetDir=${EDEX_HOME}/data/utility/edex_static/base/dissemination
		echo -e "\tMigrating NWWS_exclude_${locSite}.txt"
		if [[ ! -f ${targetDir}/NWWS_exclude_${locSite}.txt || "${FORCE}" ]]
		then
			cp -a ${pathPrefix}/data/fxa/workFiles/wanMsgHandling/NWWS_exclude_${locSite}.txt ${targetDir}/
			chown awips:awips ${targetDir}/NWWS_exclude_${locSite}.txt
			debug_echo "\t$( ls -l ${targetDir}/NWWS_exclude_${locSite}.txt )"
		else
			color_echo yellow 0 "\t${targetDir}/NWWS_exclude_${locSite}.txt exists, use -f to overwrite"
		fi
	fi

	echo_function Completed $FUNCNAME
	
	return 0

}

function config_setup_env() {

	# Name:		config_setup_env
	# Desc:		Makes edits to setup.env file to force EDEX to run as a site other than OAX

	locSite=$1

	color_echo blue 1 " -----------------------------------------------"
	color_echo blue 1 "| Begin $FUNCNAME - $( date ) "
	color_echo blue 1 " -----------------------------------------------"

	_littleSite=$( echo ${locSite} | tr [:upper:] [:lower:] )
	if [ "${acceptDefaults}" ]; then answer='y'; else answer= ; fi
	answer_me $answer
	while [ $? -eq 255 ]
        do
                echo -e "\tWould you like to configure setup.env to ${locSite} (Answer Y or N)? \c "
                read answer
                answer_me $answer
        done
        if [ $? -eq 0 ]
        then
                sed -i "/AW_SITE_IDENTIFIER=[A-Z]../s/=[A-Z]../=${locSite}/1" ${EDEX_HOME}/bin/setup.env
		sed -i "/DC_DB_NAME/s/dc_ob[1-9][a-z]../dc_ob7${_littleSite}/g" ${EDEX_HOME}/bin/setup.env
		sed -i "/IH_DB_NAME/s/ob[1-9].[a-z]../ob92${_littleSite}/g" ${EDEX_HOME}/bin/setup.env
                echo -e "OK!  Complete!"
        
		if [[ "${siteType}" == "RFC" ]]
		then
			sed -i "/fog/s/true/false/1" ${EDEX_HOME}/data/utility/common_static/base/monitoring/MonitorPluginState.xml 
		elif [[ "${siteType}" == "WFO" ]]
		then
			sed -i "/fog/s/false/true/1" ${EDEX_HOME}/data/utility/common_static/base/monitoring/MonitorPluginState.xml
		fi
	fi
	color_echo blue 1 " -----------------------------------------------"
	color_echo blue 1 "| Completed $FUNCNAME - $( date ) "
	color_echo blue 1 " -----------------------------------------------"

}

function config_triggers() {
	
	# Name:		config_triggers
	# Desc:		Configures triggers into EDEX
	
	if [[ $# -ne 1 ]]; then color_echo red 1 "\tERROR: $FUNCNAME needs 1 argument and was passed with $#" && exit 1; fi
	
	locSite=$1
	tmpTriggerFile=/var/tmp/awipsTriggerSetup.txt
	
	color_echo blue 1 " -----------------------------------------------"
	color_echo blue 1 "| Begin $FUNCNAME - $( date ) "
	color_echo blue 1 " -----------------------------------------------"
	
	cat /dev/null > ${tmpTriggerFile}
	
	echo -e "Setting up LDAD Triggers"
	for locType in ldad ldadSiteBackup
	do
	  	ldadTemplate=
		ldadConfig=
		if ! find_awips_config ${locType}Trigger.template CN 
		then
			color_echo yellow 0 "\tNOTE:  No ${locType}Trigger.template found, skipping LDAD triggers..."
		else
			ldadTemplate=${retLocation}/${locType}Trigger.template
			echo -e "\tLDAD Trigger Template Location:\t${ldadTemplate}"
			if [[ ${locType} == "ldad" ]]; then fName="ldadSite" ; else fName=${locType} ; fi
			if ! find_awips_config ${locSite}-${fName}Config.txt CL
			then
				color_echo yellow 0 "\tNOTE:  No ${locSite}-${fName}Config.txt found for use with ldadTrigger.template .. Skipping ${locType} Triggers"
			else
				ldadTemplateConfig=${retLocation}/${locSite}-${fName}Config.txt
				echo -e "\tLDAD Trigger Configuration Location:\t${ldadTemplateConfig}"
				if [[ $( wc -w ${ldadTemplateConfig} | awk '{print $1}' ) -eq 0 ]]
				then	
					echo -e "\tNOTE:   Fixing ${ldadTemplateConfig}.  It is empty... skipping LDAD triggers..."
				else
					# do what is in fix-ldadSiteConfig.sh
					fix_ldad_site_config ${ldadTemplateConfig}
					cp -a ${ldadTemplate} /tmp/ldadTrigger.template
	 				
	 				# SDC magic
	 				exec 3<&0
	 				exec 0<"${ldadTemplateConfig}"
	 				
	 				while read var1 var2
	 				do
	 					case ${var1} in
	 						"www" )	
	 							# if currentWWW is set, then build trigger lines - this assumes multiple www lines
	 							if [ "${currentWWW}" ]
	 							then
	 								build_ldad_triggers ${ldadTemplate} 
	 							fi
	 							# initialize arrays for new www
	 							export currentWWW=${var2}
	 							unset ww1Array
	 							unset sssArray
	 							unset rrrArray
	 						;;
	 						"ww1" )	
	 							# create a trigger for each ww1 entry for currentWWW
	 							ww1Array=( $( echo ${ww1Array[@]} ${var2} ) ) 						
	 						;;
	 						"sss" )	
	 							sssArray=( $( echo ${sssArray[@]} ${var2} ) )  						
	 						;;
							"rrr" ) 
								rrrArray=( $( echo ${rrrArray[@]} ${var2} ) )						
							;;
	 					esac
	 				
	 				done
	 				exec 0<&3
	 				exec 3<&-
	 				
	 				# build the triggers from last www instance
	 				build_ldad_triggers ${ldadTemplate} 
	 				
	 				rm /tmp/ldadTrigger.template
	 			fi
	 		fi
	 	fi
	 done

	# ADAPT -- For Climate
	# AWIPS I allows for nationalData template, and one in localization/XXX so we are going to loop the arguments passed to find_awips_config instead of repeating code
	
	for myArgs in "adaptTrigger.template N" "${locSite}-adaptTrigger.template L"
	do
		if ! find_awips_config ${myArgs}
		then
			color_echo yellow 0 "\tNOTE:  File $( echo ${myArgs} | cut -f1 -d' ' ) does not exist.  Skipping....."
		else
			fileName=$( echo ${myArgs} | cut -f1 -d' ' )
			adaptTriggerTemplate=${retLocation}/${fileName}
			echo -e "\tADAPT Template File:\t${adaptTriggerTemplate}"
			if ! find_awips_config ${locSite}-adaptSiteConfig.txt L
			then
				color_echo yellow 0 "\tNOTE:  No ADAPT Trigger Config File Specific To ${locSite}."
			else
				adaptTriggerConfig=${retLocation}/${locSite}-adaptSiteConfig.txt
				echo -e "\tADAPT Site Configuration File:\t${adaptTriggerConfig}"
				if [[ $( wc -w ${adaptTriggerConfig} | awk '{print $1}' ) -le 1 ]]
				then
					color_echo yellow 0 "\tNOTE:  ${adaptTriggerConfig} is empty.  Skipping....."
				else
					while read var1 var2
					do
						cat ${adaptTriggerTemplate} | while read line
						do
							if [[ "${var1}" != "" ]] ; then 
								if echo $line | cut -f1 -d '|' | grep ${var1} > /dev/null
								then
									id=$( echo $line | cut -f1 -d'|' | sed "s/^${var1}/${var2}/g" )
									action=$( echo $line | cut -f4 -d '|' )
									echo -e "${id} | ${action}" >> ${tmpTriggerFile}
								fi		
							fi
						done 
					done < ${adaptTriggerConfig}
				fi
			fi
		fi
	done
	
	# ADAPT WSO Triggers
	# Seems to be an Alaska Region Setup
	
	if find_awips_config ${locSite}-wsoTrigger.template L
	then
		echo -e "\tFound WSO info for ${locSite}"
		wsoTriggerTemplate=${retLocation}/${locSite}-wsoTrigger.template
		# Make sure it isn't Empty
		if [[ $( wc -w ${wsoTriggerTemplate} | awk '{print $1}' ) -le 1 ]]
		then
			color_echo yellow 0 "\tNOTE:  ${wsoTriggerTemplate} is empty.... Skipping"
		else
			# File exists, and is not empty
			# Format is PIL | | | Action |
			while read line
			do
				pil=$( echo ${line} | cut -f1 -d'|' )
				action=$( echo ${line} | cut -f4 -d '|' )
				echo -e "\t\tSetting up trigger for ${pil} to run ${action}"
				echo -e "${pil} | ${action}" >> ${tmpTriggerFile}
			done < ${wsoTriggerTemplate}
		fi
	fi
	
	# FAX Triggers
	
	if ! find_awips_config fax/${locSite}-faxTrigger.template W
	then
		color_echo yellow 0 "\tNOTE:  File ${locSite}-faxTrigger.template does not exist.... Skipping"	
	else
		faxTriggerTemplate=${retLocation}/fax/${locSite}-faxTrigger.template
		echo -e "\tFax Trigger Template File:\t${faxTriggerTemplate}"
		# Make sure it isn't empty
		if [[ $( wc -w ${faxTriggerTemplate} | awk '{print $1}' ) -le 1 ]]
		then
			color_echo yellow 0 "\tNOTE:  ${faxTriggerTemplate} is empty.... Skipping"
		else
			# File exists, and is not empty
			# Format is PIL Action
			while read pil action
			do
				echo -e "\t\tSetting up trigger for ${pil} to run ${action}"
				echo -e "${pil} | ${action}" >> ${tmpTriggerFile}
			done < ${faxTriggerTemplate}
		fi
	fi
	
	
	# Site Configurable Triggers
	siteTriggerTemplate=${pathPrefix}/data/fxa/siteConfig/textApps/siteTrigger.template
	if [ ! -f ${siteTriggerTemplate} ]
	then
		color_echo yellow 0 "\tNOTE:  No local site triggers setup in ${siteTriggerTemplate}"
	else
		# Make sure it isn't empty
		if [[ $( wc -w ${siteTriggerTemplate} | awk '{print $1}' ) -le 1 ]]
		then
			color_echo yellow 0 "\tNOTE:  ${siteTriggerTemplate} is empty.... Skipping"
		else
			# File exists, and is not empty
			# Format is PIL Action
			while read line
			do
				pil=$( echo $line | cut -f1 -d' ' )
				action=$( echo $line | cut -f2- -d' ' )
				debug_echo "\t\tSetting up SITE CUSTOMIZED trigger for ${pil} to run ${action}"
				echo -e "${pil} | ${action}" >> ${tmpTriggerFile}
			done < ${siteTriggerTemplate}

		fi
	fi
		
	# HazCollect Triggers
	if ! find_awips_config ${locSite}-hazCollectSiteConfig.txt L
	then
		color_echo yellow 0 "\tNOTE:  File ${locSite}-hazCollectSiteConfig.txt does not exist.... Skipping"
	else
		hazCollectConfig=${retLocation}/${locSite}-hazCollectSiteConfig.txt
		echo -e "\tHazCollect Configuration File:\t${hazCollectConfig}"
		fix_ldad_site_config ${hazCollectConfig}
		for myTemplate in "hazCollectTrigger.template N" "${locSite}-hazCollectTrigger.template L"
		do		
			if ! find_awips_config ${myTemplate}
			then
				color_echo yellow 0 "\tNOTE:  File $( echo ${myTemplate} | cut -f1 -d' ' ) not found ... Skipping "
			else
				fileName=$( echo ${myTemplate} | cut -f1 -d' ' )
				hazCollectTemplate=${retLocation}/${fileName}
				echo -e "\tHazCollect Template File:\t${hazCollectTemplate}"
				while read var1 var2 
				do
					case ${var1} in
		 				"www" )	
		 					# if currentWWW is set, then build trigger lines - this assumes multiple www lines
		 					if [ "${currentWWW}" ]
		 					then
		 						build_ldad_triggers ${hazCollectTemplate} 
		 					fi
		 					# initialize arrays for new www
		 					export currentWWW=${var2}
		 					export ww1Array=
		 					sssArray=
		 					rrrArray=						
		 				;;
		 				"ww1" )	
		 					# create a trigger for each ww1 entry for currentWWW
		 					ww1Array=( $( echo ${ww1Array[@]} ${var2} ) ) 						
		 				;;
		 				"sss" )	
		 					sssArray=( $( echo ${sssArray[@]} ${var2} ) )  						
		 				;;
						"rrr" ) 
							rrrArray=( $( echo ${rrrArray[@]} ${var2} ) )						
						;;
		 			esac	
				done < ${hazCollectConfig}
				build_ldad_triggers ${hazCollectTemplate} 
			fi
		done
	fi
	
	modify_pgsec host metadata trust

	if [[ "${FORCE}" ]]
	then
		psql -U awips -h ${EDEXDBSVR} -d metadata -c "delete from subscription.subscriptions where arguments='%TRIGGER%' and filepath!='/awips/fxa/bin/asyncPilTrigger.sh';" | while read line
		do
			color_echo yellow 0 "\tNOTE:\t${line}"
		done
	fi

	# Get the triggers into the database.
	echo -ne "\tLoading triggers into the database.  This could take a while (number of triggers = $( wc -l ${tmpTriggerFile} | awk '{print $1}' ) ): \t"
	_cnt=0
	while read triggerLine
	do
 		[ "${DEBUG}" ] || _cnt=$(($_cnt+1)) && print_bar ${_cnt}
		pil=$( echo ${triggerLine} | cut -f1 -d'|' | sed 's/ //g' )
		action=$( echo ${triggerLine} | cut -f2 -d'|' | sed -e "s/^ *//g" ) # added sed to get rid of leading space
		shortAction=$( echo ${action} | cut -f1 -d' ' )
		# check for existing trigger
		psql -h ${EDEXDBSVR} -d metadata -U awips --tuples-only -c "select * from subscription.subscriptions where trigger='${pil}' and filepath='${action}';" > /tmp/$FUNCNAME_sql.out
		if ! grep ${pil} /tmp/$FUNCNAME_sql.out > /dev/null
		then
			debug_echo "Loading Trigger.  ${action} will be run when ${pil} is stored"
			if echo ${action} | cut -f2- -d' ' | grep '-' > /dev/null ; then
				debug_echo "\n\tSKIPPING the use of textdb because ${action} contains an argument with a -.  See DR 16215\n"
				if ! ${EDEX_INSTALL}/fxa/bin/subscription -o add -t ldad -p ${pil} -r ldad -f "${action}" -c %TRIGGER% 2>&1 | grep 'Database insert was successful' > /dev/null
				then
					color_echo red 1 "\n\tERROR:  Trigger Load Failed!!  Exiting.. please contact support.\n\tPIL = ${pil}\tACTION = ${action}"
					exit
				fi
			else
				if ! ${EDEX_INSTALL}/fxa/bin/textdb -pil -a ${pil} "${action}" 2>&1 | grep 'Database insert was successful' > /dev/null
				then
					if ! ${EDEX_INSTALL}/fxa/bin/subscription -o add -t ldad -p ${pil} -r ldad -f "${action}" -c %TRIGGER% 2>&1 | grep 'Database insert was successful' > /dev/null
					then
						color_echo red 1 "\n\tERROR:  Trigger Load Failed!!  Exiting.. please contact support.\n\tPIL = ${pil}\tACTION = ${action}"
						exit
					fi
				fi
			fi
		else
			debug_echo "NOTE:  Trigger found for running ${action} when ${pil} is stored .... SKIPPING"
			cat /dev/null > /tmp/$FUNCNAME_sql.out 
			continue
		fi
		#echo -e $triggerLine
	done < ${tmpTriggerFile}
	echo 
	
	if [[ ${madePgHbaChange} -eq 1 ]] ; then modify_pgsec host metadata md5 ; fi

	color_echo blue 1 " -----------------------------------------------"
	color_echo blue 1 "| Completed $FUNCNAME - $( date ) "
	color_echo blue 1 " -----------------------------------------------"

}

function config_warngen_viz() {

	# Configures the UI for Warngen in CAVE
	# Aruments: 
	#	$1 = Localization Site (XXX)

	_site=$1
	case "${AII_RELEASEID}" in
		"11."[456]* | "11.7."[01]* | "SOTE11."[4-7]*	)	compLocRoot="${EDEX_HOME}/data/utility/cave_config/site/${_site}" ; compLocDir="com.raytheon.viz.warngen" ; templateLoc="../OAX/${compLocDir}" ;;
		*					)	compLocRoot="${EDEX_HOME}/data/utility/common_static/site/${_site}" ; compLocDir="warngen" ; templateLoc="../../base/warngen" ;;
	esac

	color_echo blue 1 " -----------------------------------------------"
	color_echo blue 1 "| Begin $FUNCNAME - $( date ) "
	color_echo blue 1 "| Localizing Warngen UI (viz) "
	color_echo blue 1 " -----------------------------------------------"

	echo 

	cd / &&	create_subtree ${compLocRoot} awips fxalpha
	cd ${compLocRoot}
	echo -e "\tWorking in $(pwd)\n"
	create_subtree ${compLocDir} awips fxalpha

	# Create File
	if [[ ! -f ${compLocDir}/config.xml || "${FORCE}" ]] 
	then
		if [[ -f ${compLocDir}/config.xml ]]
		then
			# save some important information that doesn't come from base
			parseXmlTag defaultTemplate ${compLocDir}/config.xml 
			siteDefaultTemplate=$( echo -e "$XML_RETURN" )
		fi
		cp -a ${templateLoc}/config.xml ${compLocDir}/
		if find_awips_config ${_site}-wwaConfig.txt LC || find_awips_config wwaConfig.txt C
		then
			officeShort=$( grep ^@@@OFFH ${retLocation}/${userFile} | uniq | cut -f 2- -d ' '  | sed -e "s/^[[:space:]]*//g" -e "s/[[:space:]]*$//g" )
			officeLoc=$( grep ^@@@OFFT ${retLocation}/${userFile} | uniq | cut -c8- | sed -e "s/^[[:space:]]*//g" -e "s/^IN //g" )
			backupIDs=( $( grep ^@@@SBID ${retLocation}/${userFile} | uniq | sed -e "s/,/ /g" ) )
		elif find_awips_file wwaConfig.txt S
		then
			officeShort=$( grep ^@@@OFFH ${retLocation}/wwaConfig.txt | uniq | cut -f 2- -d ' '  | sed -e "s/^[[:space:]]*//g" -e "s/[[:space:]]*$//g" )
			officeLoc=$( grep ^@@@OFFT ${retLocation}/wwaConfig.txt | awk '{print $2,$3,$4,$5}' )
			backupIDs=( $( grep ^@@@SBID ${retLocation}/wwaConfig.txt ) )
		else
			color_echo red 1 "ERROR:\tCan not find wwaConfig anywhere!  Call Support!"
		fi
				
		for i in $( seq 1 $(( ${#backupIDs[@]}-1 )) )
		do
			awipsID=$( echo ${backupIDs[$i]} | sed -e 's/"//g' -e 's/,//g' )
			if [[ "${awipsID}" == "" ]]; then continue ; fi 
			#siteText=$( grep ^[KP]${awipsID} /awips/fxa/data/ICAODICT.TBL | cut -f3 -d: | sed -e 's/WFO//g' -e "s/[[:space:]]*$//g" )
			if return_location_text ${awipsID}
			then
				if [ ! "${backupIDLine}" ]
				then
					backupIDLine="${awipsID}/${siteLocationText}"
				else
					backupIDLine="${backupIDLine},${awipsID}/${siteLocationText}"
				fi
			else
				color_echo red 1 "\tERROR - Couldn't find site text for ${awipsID}.. will continue, but your backup site may not be correct."
			fi
		done
		
		if find_awips_config ${_site}-mainConfig.txt C || find_awips_config ${_site}-mainConfig.txt L
		then
			myConfigFile=${retLocation}/${_site}-mainConfig.txt
			cccID=$( grep ^@@@CCC ${myConfigFile} | awk '{print $2}' )
			if [[ "${cccID}" == "" ]]
			then
				color_echo red 1 "\tERROR: @@@CCC in ${myConfigFile} is not set! Exiting!"
				exit 1
			fi
		else
			color_echo red 1 "\tERROR:  Can not find ${_site}-mainConfig.txt.  Exiting!"
		fi
		
		echo -e "\tConfiguring ${compLocDir}/config.xml"
		echo -e "\t\twarngenOfficeShort tag.....\c "
		sed -i "22c\  <warngenOfficeShort>${officeShort}</warngenOfficeShort>" ${compLocDir}/config.xml && echo "OK!"
		echo -e "\t\twarngenOfficeLoc tag.......\c "
		sed -i "23c\  <warngenOfficeLoc>${officeLoc}</warngenOfficeLoc>" ${compLocDir}/config.xml && echo "OK!"
		echo -e "\t\tbackupCWAs tag.............\c "
		sed -i "24c\  <backupCWAs>${backupIDLine}</backupCWAs>" ${compLocDir}/config.xml && echo "OK!"
		echo -e "\t\tsiteNode tag...............\c "
		sed -i "25c\  <siteNode>${cccID}</siteNode>" ${compLocDir}/config.xml && echo "OK!"
      
		# check for other important information to re-add 
		if [[ "${siteDefaultTemplate}" ]]
		then
			color_echo green 1 "\t\t--> Re-adding site configuration for <defaultTemplate>"
			sed -i -e "/<defaultTemplate>/s/\(<defaultTemplate>\)\(.*\)\(<\/defaultTemplate>\)/\1${siteDefaultTemplate}\3/1" ${compLocDir}/config.xml
		fi
	fi

	color_echo blue 1 " -----------------------------------------------"
	color_echo blue 1 "| Completed $FUNCNAME - $( date ) "
	color_echo blue 1 " -----------------------------------------------"

}

function config_cave_menus() {

	# Configures menus for CAVE to local site
	# Aruments: 
	#	$1 = Localization Site (XXX)

	_site=$1

	compLocRoot="${EDEX_HOME}/data/utility/cave_static/site/${_site}"
	local buildMenu

	echo_function Begin $FUNCNAME

	echo 

	# Check for directory tree
	cd / && create_subtree ${compLocRoot} awips fxalpha 
	cd ${compLocRoot}
	echo -e "\tWorking in $(pwd)\n"

	case "${AII_RELEASEID}" in 
		*	)		compLocDir="menus/satellite" ; fName="baseComposite.xml" ; buildMenu=0 ;;
	esac

	
	# menus/sat
	case ${_site} in
		AFC|AJK|ACR 	)	sectors=( "Alaska Regional" "Alaska National" "Northern Hemisphere Composite" "Northern Hemisphere Composite" ) ;;
		HFO		)	sectors=( "Hawaii Regional" "Hawaii National" "Northern Hemisphere Composite" "Northern Hemisphere Composite" ) ;;
		GUM		) 	sectors=( "Puerto Rico Regional" "Puerto Rico National" "Northern Hemisphere Composite" "Northern Hemisphere Composite" ) ;;
		*		)	sectors=( "West CONUS" "East CONUS" "Supernational" "Northern Hemisphere Composite" ) ;;
	esac

	# if [[ "${FORCE}" ]] ; then buildMenu=1 ; fi

	if [[ "${buildMenu}" -eq 1 ]]
	then
		color_echo green 1 "|"
		color_echo green 1 "|--- Localizing Satellite Menus (CAVE)                                        |"
		echo 
			
		# Check subtree
		create_subtree ${compLocDir} awips fxalpha

		# Base To File
		beginningText="<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>
\t<!--
\t\tThis_software_was_developed_and_/_or_modified_by_Raytheon_Company,
\t\tpursuant_to_Contract_DG133W-05-CQ-1067_with_the_US_Government.\n
\t\tU.S._EXPORT_CONTROLLED_TECHNICAL_DATA
\t\tThis_software_product_contains_export-restricted_data_whose
\t\texport/transfer/disclosure_is_restricted_by_U.S._law._Dissemination
\t\tto_non-U.S._persons_whether_in_the_United_States_or_abroad_requires
\t\tan_export_license_or_other_authorization.\n
\t\tContractor_Name:________Raytheon_Company
\t\tContractor_Address:_____6825_Pine_Street,_Suite_340
\t\t________________________Mail_Stop_B8
\t\t________________________Omaha,_NE_68106
\t\t________________________402.291.0100\n
\t\tSee_the_AWIPS_II_Master_Rights_File_(\"Master_Rights_File.pdf\")_for
\t\tfurther_licensing_information.
\t
\t BUILT BY config_awips2.sh
\t-->"
		# Create file
		if [[ ! -f ${compLocDir}/${fName} || "${FORCE}" ]]
		then
			echo -e "${beginningText}" > ${compLocDir}/${fName}

			case ${AII_RELEASEID} in 
				"SOTE 11."[6789]* | 1[12].*	)	
					echo -e "<menuTemplate xmlns:ns2=\"group\">" >> ${compLocDir}/${fName} 
					echo -e "\t<contribute xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:type=\"subinclude\" fileName=\"menus/satellite/baseSatellite.xml\">" >> ${compLocDir}/${fName}
					for i in $( seq 0 $(( ${#sectors[@]} - 1 )) )
					do
						echo -e "\t\t<substitute key=\"sector$i\" value=\"${sectors[$i]}\"/>" >> ${compLocDir}/${fName}
					done
					echo -e "\t\t<substitute key=\"entity\" value=\"GOES%\"/>" >> ${compLocDir}/${fName}
					echo -e "\t</contribute>" >> ${compLocDir}/${fName}
					echo -e "\t<contribute xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:type=\"separator\" id=\"baseCompositeSeparator\"/>" >> ${compLocDir}/${fName}
					echo -e "\tcontribute xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:type=\"subinclude\" fileName=\"menus/satellite/basePOESImagery.xml\"/>" >> ${compLocDir}/${fName}
					echo -e "</menuTemplate>" >> ${compLocDir}/${fName} ;;
				* )
					echo -e "<menuContributionFile>" >> ${compLocDir}/${fName}
					echo -e "\t<include installTo=\"menu:satellite?after=GROUP1\" " >> ${compLocDir}/${fName}
					echo -e "\t\t\tfileName=\"menus/satellite/baseSatellite.xml\">" >> ${compLocDir}/${fName}
					for i in $( seq 0 $(( ${#sectors[@]} - 1 )) )
					do
						echo -e "\t\t<substitute key=\"sector$i\" value=\"${sectors[$i]}\"/>" >> ${compLocDir}/${fName}
					done
					echo -e "\t\t<substitute key=\"entity\" value=\"GOES%\"/>" >> ${compLocDir}/${fName}
					echo -e "\t</include>" >> ${compLocDir}/${fName}
					echo -e "\t<include installTo=\"menu:satellite?after=GROUP2\"" >> ${compLocDir}/${fName}
					echo -e "\t\t\tfileName=\"menus/satellite/basePOESImagery.xml\">" >> ${compLocDir}/${fName}
					echo -e "\t</include>" >> ${compLocDir}/${fName}
					echo -e "</menuContributionFile>" >> ${compLocDir}/${fName} ;;
			esac
		else
			echo -e "\tNOTE: ${compLocDir}/${fName} exitsts.. \t SKIPPING"
		fi
	fi
		
	
	# menus/warngings
	color_echo green 1 "|"
	color_echo green 1 "|--- Localizing Warnings Display (CAVE)                                      |"
	echo 
	compLocDir="menus/warnings"
		
		# Check subtree
		create_subtree ${compLocDir} awips fxalpha
		
		# Create file
		if [[ ! -f ${compLocDir}/index.xml || "${FORCE}" ]]
		then
			#cp -a ../OAX/${compLocDir}/index.xml ${compLocDir}/
			case ${_site} in 
				AFC|AFG|AJK|ACR|HFO|GUM 	)	KorP=P ;;
				*				)	KorP=K ;;
			esac

			echo -e "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>" > ${compLocDir}/index.xml
			echo -e "\t<!--\n\t\tCreated Automatically By $FUNCNAME " >> ${compLocDir}/index.xml 
			echo -e "\t\tAs part of the AWIPS II AUTOMATION TOOL" >> ${compLocDir}/index.xml 
			echo -e "\t\tDate: $( date ) " >>  ${compLocDir}/index.xml 
			echo -e "\n\t--> \n" >> ${compLocDir}/index.xml 
			echo -e "<menuContributionFile>" >> ${compLocDir}/index.xml
			echo -e "\t<include installTo=\"menu:obs?after=HAZARDS\"" >>  ${compLocDir}/index.xml
			echo -e "\t\tfileName=\"menus/warnings/baseWarnings.xml\">" >> ${compLocDir}/index.xml
			echo -e "\t\t\t<substitute key=\"site\" value=\"${KorP}${_site}\"/>" >> ${compLocDir}/index.xml 
			for i in $( seq 0 $(( ${#arAdjacent[@]}-1 )) )
			do
				case ${arAdjacent[$i]} in
					AFC|AFG|AJK|ACR|HFO|GUM 	)	KorP=P ;;
					*				)	KorP=K ;;
				esac
				if [[ ${i} -eq 0 ]] 
				then
					regSites="${KorP}${arAdjacent[$i]}"
				else
					regSites=$( echo ${regSites}, ${KorP}${arAdjacent[$i]} )
				fi
			done
			echo -e "\t<substitute key=\"sites\" value=\"${regSites}\"/>" >> ${compLocDir}/index.xml 
			echo -e "\t</include>" >> ${compLocDir}/index.xml 
			echo -e "</menuContributionFile>" >> ${compLocDir}/index.xml 
		else
			echo -e "\tNOTE:  ${compLocDir}/index.xml exitsts \t SKIPPING"
		fi

	# textws - SeanW thanks!
	color_echo green 1 "|"
	color_echo green 1 "|--- Localizing Text Workstation Products Menu (CAVE)                                      |"
	echo 
	compLocDir="menus/textws"
			
		# Check subtree
		create_subtree ${compLocDir} awips fxalpha
		
		# Create file
		if [[ ! -f ${compLocDir}/productsMenus.xml || "${FORCE}" ]]
		then
			if find_awips_config ${locSite}-textOfficeMenuProducts.txt C || find_awips_config textOfficeMenuProducts.txt C
			then
				echo -e "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>" > ${compLocDir}/productsMenus.xml
				echo -e "\t<!-- " >> ${compLocDir}/productsMenus.xml 
				echo -e "${xmlHeader}\n##\n##THIS FILE GENERATED AUTOMATICALLY BY $FUNCNAME IN THE AWIPS II AUTOMATION TOOL" >>  ${compLocDir}/productsMenus.xml 
				echo -e "-->" >> ${compLocDir}/productsMenus.xml
		  
				echo -e "<menuTemplate xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">" >> ${compLocDir}/productsMenus.xml 
				local i
				i=0
				cat ${retLocation}/${userFile} | grep -v ^# | while read line
				do
					debug_echo "\tWorking with ${line}"
					if [[ ${line} == "" ]] ; then continue ; fi
					if [[ $( echo ${line} | cut -c1 ) == "-" ]]
					then
						echo -e "   <contribute xsi:type=\"separator\" id=\"productSeparator$i\"/>\n" >> ${compLocDir}/productsMenus.xml 
						(( i += 1 )) 
					else
						echo "   <contribute xsi:type=\"command\" menuText=\"$line\" commandId=\"com.raytheon.viz.texteditor.afosproduct\">" >> ${compLocDir}/productsMenus.xml 
						echo "   <parameter key=\"afoscommand\" value=\"$line\"/>" >> ${compLocDir}/productsMenus.xml
						echo "   </contribute>" >> ${compLocDir}/productsMenus.xml 
					fi
				done
				echo "</menuTemplate>" >> ${compLocDir}/productsMenus.xml
				chown awips:fxalpha ${compLocDir}/productsMenus.xml 
			fi
		else
			echo -e "\tCould not find ${locSite}-textOfficeMenuProducts.txt or textOfficeMenuProducts.txt in /data/fxa/customFiles -- Skipping"
		fi

	echo_function Completed $FUNCNAME

}

function config_cave_avnfps() {

	# Configures menus for CAVE to local site
	# Aruments: 
	#	$1 = Localization Site (XXX)

	_site=$1
	compLocRoot="${EDEX_HOME}/data/utility/cave_static/site/${_site}"

	if ! cd ${pathPrefix}/awips/adapt/avnfps/etc/tafs >& /dev/null
	then
		echo -e "\t\tERROR\a - Can not access AWIPS I Taf configuration!"
		exit 1
	fi

	color_echo blue 1 " -----------------------------------------------"
	color_echo blue 1 "| Begin $FUNCNAME - $( date ) "
	color_echo blue 1 "| Localizing CAVE AVNFPS  "
	color_echo blue 1 " -----------------------------------------------"
	echo 

	# Check for directory tree
	cd / && create_subtree ${compLocRoot} awips fxalpha 
	cd ${compLocRoot}
	echo -e "\tWorking in $(pwd)\n"
	
	# TAF Files
	compLocDir="aviation/config/tafs"
	
		# Check subtree
		create_subtree ${compLocDir} awips fxalpha
		
		# Copy files over - if available
		if [ ! -d ${pathPrefix}/awips/adapt/avnfps/etc/tafs ] 
		then
			echo -e "\t\tNOTE:  No TAFs configured to copy.  exiting"
			exit
		fi

		color_echo green 1 "|"
		color_echo green 1 "|--- Copying TAF configurations from ${pathPrefix}/awips/adapt/avnfps/etc/tafs ...."
		echo -e 
		if [[ $( ls ${compLocDir}/*.cfg 2> /dev/null | wc -l ) -eq 0 ]] || [[ "${FORCE}" ]]
		then
			cp -r ${pathPrefix}/awips/adapt/avnfps/etc/tafs/* ${compLocDir}/
			if [[ ${AII_RELEASEID} != SOTE*1[12].[3-8] || ${AII_RELEASEID} != 1[12].* ]]
			then
				sed -i '/idents/s/, /,/g' ${compLocDir}/*.cfg
			fi
		else
			color_echo yellow 0 "\tAvnFPS Configuration Files Already Exist. Use -f to re-migrate"
		fi
		# Create DEFAULT if it doesn't exist
		color_echo green 1 "|"
		color_echo green 1 "|--- Checking DEFAULT file ...."
		echo -e 
		if [[ ! -f ${compLocDir}/DEFAULT ]]
		then
			echo -e "\tDEFAULT not found, attempting to create......\t\c"
			if [[ $( ls -l ${compLocDir}/*.cfg | wc -l ) -gt 1 ]]
			then
				color_echo yellow 0 "FAIL\tIMPORTANT NOTE: Need to set up AvnFPS DEFAULT File and there are more than one.\n\tSee section 11.0 of the Site Data Configuration & Localization Document"
			else
				cfgFileName=$( ls config/tafs/*.cfg | sed -e "s/^config\/tafs\///g" )
				echo "${cfgFileName}" > ${compLocDir}/DEFAULT 
				echo -e "OK!"
			fi
		fi

        color_echo green 1 "|"
        color_echo green 1 "|--- Migrating other .cfg files...."
		chown -R awips:fxalpha ${compLocDir}
        for cfgFileName in ids xmit ; do            
            if [[ ! -f aviation/config/${cfgFileName}.cfg || "${FORCE}" ]]
            then
                debug_echo "\t\t${cfgFileName}.cfg"
                cp -r ${pathPrefix}/awips/adapt/avnfps/etc/${cfgFileName}.cfg aviation/config
                if [[ "${cfgFileName}" == "ids" ]] ; then 
                    sed -i '/^file/d ' aviation/config/${cfgFileName}.cfg
                fi
                chown -R awips:fxalpha aviation/config/${cfgFileName}.cfg
            fi
        done

		if [[ ! -d ${compLocDir}/XXXX ]] 
		then
			cp -r ${pathPrefix}/awips/adapt/avnfps/etc/tafs/XXXX ${compLocDir}/
		fi
			
		compLocDir="aviation/avnwatch"
	
		# Check subtree
		create_subtree ${compLocDir} awips awips
	      
		if [[ "${FORCE}" ]]; then cat /dev/null > ${compLocDir}/aviationForecasterConfig.xml ; fi

		color_echo green 1 "|"
		color_echo green 1 "|--- Creating aviationForecasterConfig.xml from  /awips/adapt/avnfps/etc/forecasters ...."

		# Copy over aviationForecasterConfig
		if [[ ! -f ${compLocDir}/aviationForecasterConfig.xml || "${FORCE}" ]] 
		then
			cat /dev/null > ${compLocDir}/aviationForecasterConfig.xml
			chown awips:fxalpha ${compLocDir}/aviationForecasterConfig.xml
			#cp -a ../OAX/${compLocDir}/aviationForecasterConfig.xml ${compLocDir}/
			echo -e "<aviationForecasterConfig>" >> ${compLocDir}/aviationForecasterConfig.xml 
			if [ ! -f /awips/adapt/avnfps/etc/forecasters ]
			then
				color_echo yellow 0 "\t\tNOTE:  No AWIPS I forecaster configuration found, this needs to be created BEFORE AvnFPS will allow transmission!"
				#cp -a ../OAX/${compLocDir}/aviationForecasterConfig.xml ${compLocDir}/
				sleep 15
			else
				# removed pathPrefix for this one because forecasters should be local to the system
				cat /awips/adapt/avnfps/etc/forecasters | grep -v ^# | while read line
				do
					oldID=$( echo ${line} | awk '{print $1}' )
					oldXmit=$( echo ${line} | awk '{print $2}' )
					case ${oldXmit} in
						1 ) 	xmitString="true" ;;
						0 )	xmitString="false" ;; 
					esac
					#oldName=$( echo ${line} | awk '{print $3}' )
					oldName=$( echo ${line} | awk '{print $3,$4,$5}' | sed -e "s/^[[:space:]]*//g" -e "s/[[:space:]]*$//g" )
					if [[ $( hostname | cut -f1 -d'-' ) == adam* ]] ; then passCommand="cat /etc/passwd" ; else passCommand="ypcat passwd" ; fi
					if ! echo ${oldName} | grep ',' >& /dev/null
					then
						if [[ $( ${passCommand} | uniq | grep -i "${oldName}" | wc -l ) -ne 1 ]] 
						then
							color_echo yellow 0 "\tNOTE:  No entry __OR__ more than one entry in for ${oldName} in password ( count = $( ${passCommand} | uniq | grep -i "${oldName}" | wc -l ) )"
							color_echo yellow 0 "\t   *** YOU NEED TO MIGRATE THIS FORECASTER MANUALLY *** "
						else
							local username=$( ${passCommand} | uniq | grep -i "${oldName}" | cut -f1 -d: )
						fi
					else
						local firstname=$( echo $oldName | cut -f2 -d','| sed -e "s/^[[:space:]]*//g" -e "s/[[:space:]]*$//g" )
						local lastname=$( echo $oldName | cut -f1 -d',' | sed -e "s/^[[:space:]]*//g" -e "s/[[:space:]]*$//g" )
						if [[ $( ${passCommand} | uniq | grep -i "${firstname} ${lastname}" | wc -l ) -ne 1 ]]
						then
							color_echo yellow 0 "\tNOTE:  No entry __OR__ more than one entry in for ${firstname} ${lastname} in password ( count = $( ${passCommand} | uniq | grep -i "${firstname} ${lastname}" | wc -l ) )"
							color_echo yellow 0 "\t   *** YOU NEED TO MIGRATE THIS FORECASTER MANUALLY *** "
						else
							local username=$( ${passCommand} | uniq | grep -i "${firstname} ${lastname}" | cut -f1 -d: )
						fi
					fi
					if [[ "${username}" ]]
					then
						echo -e " <forecaster>" >> ${compLocDir}/aviationForecasterConfig.xml
						echo -e "  <id>${oldID}</id>" >> ${compLocDir}/aviationForecasterConfig.xml
						echo -e "  <name>${username}</name>" >> ${compLocDir}/aviationForecasterConfig.xml
						echo -e "  <xmit>${xmitString}</xmit>" >> ${compLocDir}/aviationForecasterConfig.xml
						echo -e " </forecaster>" >> ${compLocDir}/aviationForecasterConfig.xml
						unset username
					fi
				done
				echo -e "</aviationForecasterConfig>" >> ${compLocDir}/aviationForecasterConfig.xml
			fi
		else
			color_echo yellow 0 "\tNOTE: ${compLocDir}/aviationForecasterConfig.xml exists \t SKIPPING"
		fi

		
        color_echo green 1 "|"
        color_echo green 1 "| -- Copying AVNFPS Climate Files"
        echo -e " "
	
	case ${AII_RELEASEID} in 
		*	)	compLocRoot=${EDEX_HOME}/data/share/aviation ;;
	esac

        #compLocRoot="${EDEX_HOME}/data/hdf5/aviation"
	cd / && create_subtree ${compLocRoot} awips fxalpha
	cd ${compLocRoot}

	for dataFile in $( ls ${pathPrefix}/data/adapt/avnfps/climate/ )
	do
		debug_echo "\t${dataFile}"
		if [[ ! -f ${compLocRoot}/${dateFile} || "${FORCE}" ]]
		then 
			cp ${pathPrefix}/data/adapt/avnfps/climate/${dataFile} ${compLocRoot}
		else
			debug_echo "\t\tNot Copying ${dataFile}, it already exists"
		fi
	done
	if [[ $( ls ${compLocRoot}/ish-* 2> /dev/null | wc -l ) -eq 0 ]] || [[ "${FORCE}"  ]]
	then
		cp ${pathPrefix}/awips/adapt/avnfps/etc/ish-* ${compLocRoot}
	fi
	chown -R awips:fxalpha ${compLocRoot}
	
	color_echo blue 1 " -----------------------------------------------"
	color_echo blue 1 "| Completed $FUNCNAME - $( date ) "
	color_echo blue 1 " -----------------------------------------------"

}

function config_cave_alertviz() {
	
	# Added for DR_13161

		_site=$1
		compLocRoot=${EDEX_HOME}/data/utility/cave_static/site/${_site}
		compLocDir=alertViz
		
		echo_function BEGIN ${FUNCNAME}
		color_echo green 1 "| -- Configuring SITE Level AlertViz File(s) --"
		if [[ ! -f ${compLocRoot}/${compLocDir}/AlertVizForced.xml || "${FORCE}" ]]
		then
			echo -e "\tAlertVizForced.xml"
			echo -e "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>" > ${compLocRoot}/${compLocDir}/AlertVizForced.xml
			echo -e "<forcedConfiguration>" >>   ${compLocRoot}/${compLocDir}/AlertVizForced.xml
			echo -e "</forcedConfiguration>" >>  	${compLocRoot}/${compLocDir}/AlertVizForced.xml
		else
			debug_echo "\tAlertVizForced.xml already exists, run with FORCE option to re-create"
		fi
}

function config_cave_maps() {

        # Extracts default-procedure and map bundles for specific site
        # Aruments: 
        #       $1 = Localization Site (XXX)

	#  NOTE -- This is temporary based on developer rpm of files.

	_site=$1
        compLocRoot="${EDEX_HOME}/data/utility/cave_static/site/${_site}"
	spottersImportScript="importAdaptivePlot.py"

	echo_function BEGIN ${FUNCNAME} 

        color_echo green 1 "| -- Localizing CAVE Maps and Bundles --  "

        echo 

        # Check for directory tree
        cd / && create_subtree ${compLocRoot} awips fxalpha
        cd ${compLocRoot}
	
	if [[ "${FORCE}" ]]; then rm -f bundles/scales/* ; fi
	color_echo green 1 "|"
	color_echo green 1 "| - Extracting...."
	tar -C ../ --keep-old-files -xzvf ${runtimeDir}/cave_static_site.tar.gz ${_site}/* | while read line
	do
		echo -e "\t${line}"
	done 	
	chown -R awips:fxalpha ../${_site}


        if [ -f bundles/scales/State\(s\).xml ]; then mv bundles/scales/State\(s\).xml bundles/scales/States.xml ; fi
	echo

	#cp -a ../OAX/bundles/scales/scalesInfo.xml bundles/scales/
	if [[ ! -f bundles/scales/scalesInfo.xml || "${FORCE}" ]] 
	then
		if find_awips_config ${locSite}-scaleInfo.txt L || find_awips_config scaleInfo.txt N
		then
			## found it!
			debug_echo "Localizing scaleInfo.xml using ${retLocation}/${userFile}"
			echo -e "\tCreating scalesInfo.xml (controls default map displays and map selector pull down)"
			echo -e "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>" > bundles/scales/scalesInfo.xml
			echo -e "\t<!--\n\t\tCreated Automatically by $FUNCNAME" >> bundles/scales/scalesInfo.xml 
			echo -e "\t\tAs Part Of the AWIPS II AUTOMATION TOOL" >> bundles/scales/scalesInfo.xml
			echo -e "\t\tDate: $( date ) " >> bundles/scales/scalesInfo.xml 
			echo -e "\t-->" >> bundles/scales/scalesInfo.xml 
			echo -e "<mapScales>" >> bundles/scales/scalesInfo.xml 
			#Small1.scaleKey:			0	# northern hemi
			#Small2.scaleKey:			1	# national
			#Small3.scaleKey:			3	# states
			#Small4.scaleKey:			4	# wfo
			#Large1.scaleKey:			2	# conus
			cat ${retLocation}/${userFile} | grep -v '^//' | while read line
			do
				scaleNum=$( echo $line | awk '{print $1}' )
				scaleName=$( echo $line | cut -f 3 -d '|' | sed -e "s/^[[:space:]]*//g" | sed -e "s/[[:space:]]*$//g" )
				debug_echo "creating lines for scaleNum=${scaleNum} and scaleName=${scaleName}"
				case ${scaleNum} in 
					0 ) 	idText="id=\"com.raytheon.uf.viz.d2d.ui.map.SideView:sideView1\" " ;;
					1 ) 	idText="id=\"com.raytheon.uf.viz.d2d.ui.map.SideView:sideView2\" " ;;
					2 ) 	idText="view=\"false\" id=\"com.raytheon.viz.ui.glmap.GLMapEditor\" " ;;
					3 ) 	idText="id=\"com.raytheon.uf.viz.d2d.ui.map.SideView:sideView3\" " ;;
					4 ) 	idText="id=\"com.raytheon.uf.viz.d2d.ui.map.SideView:sideView4\" " ;;
					* ) 	unset idText ;; 
				esac
				#Determine file name from scaleName
				local mapFileName
				mapFileName=$( echo "$scaleName" | sed -e "s/\.//g" -e "s/ //g" -e "s/[()]//g" ) 
				debug_echo "Presumed File Name = ${mapFileName}.xml"
				# build the line in the file
				echo -e "\t<mapScale displayName=\"${scaleName}\" fileName=\"${mapFileName}.xml\">" >> bundles/scales/scalesInfo.xml
				if [[ "${idText}" ]]
				then
					echo -e "\t\t<partId ${idText}/>" >> bundles/scales/scalesInfo.xml 
				fi
				echo -e "\t</mapScale>" >> bundles/scales/scalesInfo.xml
			done
			echo -e "</mapScales>" >> bundles/scales/scalesInfo.xml 
			chown awips:fxalpha bundles/scales/scalesInfo.xml
			chmod 755 bundles/scales/scalesInfo.xml
		else
			color_echo red 1 "\tERROR!   Can not find a scaleInfo.txt to create AWIPS II scalesInfo.xml" 
		fi

	fi

	echo_function Completed $FUNCNAME


}

function config_cave_basemaps() {

        # Copies lpi file to CAVE workstations
        # CAVESTN defines in set_global_variables()
        # Aruments: 
        #       $1 = Localization Site (XXX)

	_site=$1

	case "${AII_RELEASEID}" in
		"SOTE R1G1-7" )		CAVE_HOME=$( rpm -q --qf '%{INSTALLPREFIX}' awips2-cave );
					compLocRoot="${CAVE_HOME}/../basemaps/" ;;
		*	      )		compLocRoot="${EDEX_HOME}/data/utility/cave_static/site/${_site}";
					cd / && create_subtree ${compLocRoot} awips fxalpha;
					cd ${compLocRoot};
					compLocDir="basemaps";
					create_subtree ${compLocDir} awips fxalpha;;
	esac

	echo_function BEGIN $FUNCNAME 

        color_echo green 1 "\t--> Localizing CAVE lpi Files                    "

        echo 

        # Check for directory tree

	for lpiFile in cities.lpi ldad15prcp.spi ldad15.spi
	do
		if ! find_awips_config ${lpiFile} S
		then
			color_echo yellow 0 "\t\tNOTE:\t${lpiFile} not found!"
		else
			myFile=${retLocation}/${lpiFile}
			copy_awips_file ${myFile} basemaps/${lpiFile} awips fxalpha 755 
		fi
	done
		
	echo_function COMPLETED $FUNCNAME 

}

function config_spotters() {

	# Created 13 September to import spotters.dat into database
	
	# USAGE:
	# 	config_spotters XXX
  
	# Arguments:
	# 	$1 = Localization Site (XXX)

	echo_function Begin $FUNCNAME

	locSite=$1
	compLocRoot=${EDEX_INSTALL}/fxa/bin 
	
	debug_echo "\tSearching for spotters.dat ..................."
	if find_awips_config spotters.dat CN
	then
		dataFile=${retLocation}/${userFile}
	else
		color_echo red 1 "\tERROR:  Can not find spotters.dat!  Exiting!"
		echo_function ERROR-RETURN $FUNCNAME
		return 1
	fi

	debug_echo "\tSearching for import script....."
	for scriptName in "importAdaptivePlot.py" "loadSpotters.py" "EOF"
	do
		debug_echo "\t\tTrying ${scriptName}......."
		if [[ -f ${compLocRoot}/${scriptName} ]]
		then
			debug_echo "\t\t\t *** FOUND ***"
			break
		else
			continue
		fi
	done	

	color_echo green 1 "\t---| Importing spotters.dat |---" 
	if [[ ${scriptName} != "EOF" ]] && [[ ! -f ${EDEX_HOME}/data/utility/cave_static/configured/${locSite}/bundles/maps/spotters.xml || "${FORCE}" ]]
	then
		#cat ${dataFile} | sed -e "s/[[:space:]]*$//g" > /var/tmp/spotters.dat 
		case ${scriptName} in
			"importAdaptivePlot.py"		)	${EDEX_INSTALL}/python/bin/python ${compLocRoot}/${scriptName} -f ${dataFile} -n "Spotters Readout" -s ${EDEXSVR} ;;
			"loadSpotters.py"		)	${EDEX_INSTALL}/python/bin/python ${compLocRoot}/${scriptName} -f ${dataFile} -s ${EDEXSVR} ;;
		esac		
        #strip out lines that have blank field2
        echo -e "\t\tAnaylzing created spotters.dat for fields which are blank to remove"
        cat /dev/null > /tmp/$(basename $0 .sh)_spotters.dat
        local ttlcnt=$( wc -l ${EDEX_HOME}/data/utility/cave_static/configured/${locSite}/basemaps/adaptivePlots/spotters.dat | awk '{print $1}')
        local linecnt=0
        if [[ ! "${DEBUG}" ]] ; then printf "\t\t [[ ( 0%%) ]]" ; fi 
        while read line; do 
            (( linecnt += 1 ))
            percentage=$( echo -e "scale=2 ; ( ${linecnt} / ${ttlcnt} ) * 100" | bc -l )
            strBackspace="\b\b\b\b\b\b\b\b\b"
            if [[ "${numberOfBars}" && ${numberOfBars} -gt 0 ]] ; then
                #tmpNumber=$(( numberOfBars + 1 ))
                for i in $( seq 1 ${numberOfBars}) ; do
                    strBackspace="${strBackspace}\b"
                done
            fi
            percentage=$( echo ${percentage} | cut -f1 -d'.' )
            numberOfBars=$(( percentage / 10 ))
            if [[ ${percentage} == "0" ]] ; then percentage=" 0"; fi
            if [[ ! ${DEBUG} && ${percentage} != " 0" ]] ; then printf "${strBackspace}%${numberOfBars}s" " " | tr " " "=" ; printf " (%s%%) ]]" ""${percentage}"" ; fi
            if ! echo "${line}" | grep '|' > /dev/null ; then 
                echo "${line}" >> /tmp/$(basename $0 .sh)_spotters.dat
                if echo "${line}" | grep ^id: > /dev/null ; then
                    startNewSpotter=true
                    spotterId=$( echo ${line} | cut -f2 -d':' | sed -e "s/^[[:space:]]*//g")
                fi
            else  
                field1=$( echo ${line} | cut -f1 -d'|' | sed -e "s/^[[:space:]]//g" -e "s/[[:space:]]*$//g" ) 
                field2=$( echo ${line} | cut -f2 -d'|' | sed -e "s/^[[:space:]]//g" -e "s/[[:space:]]*$//g" ) 
                if [[ "${field2}" == "" ]] ; then 
                    case "${field1}" in
                        "latitude"  )   replacementString="38.18" ;; 
                        "longitude" )   replacementString="-55.01" ;;
                        *           )   replacementString="NULL" ;;
                    esac
                    debug_echo "\t\tField 2 blank for Field 1 ${field1} on line ${linecnt}, setting to ${replacementString}"
                    spotterErrors=( "${spotterErrors[@]}" "${field1} entry is blank for ${spotterId} on line ${linecnt} - setting to ${replacementString}" )
                    echo "${field1} | ${replacementString}" >> /tmp/$(basename $0 .sh)_spotters.dat
                else
                    echo "${line}" >> /tmp/$(basename $0 .sh)_spotters.dat
                fi 
            fi
        done <${EDEX_HOME}/data/utility/cave_static/configured/${locSite}/basemaps/adaptivePlots/spotters.dat
        if [[ ${#spotterErrors[@]} -gt 0 ]] ; then 
            color_echo yellow 0 "\n\t\tWARNING: Your spotters.dat had errors in it.  Suggest you fix the file and re-run $(basename $0) -f spotters.  See output below:"
            for i in $( seq 0 ${#spotterErrors[@]}) ; do
                echo -e "\t\t\t${spotterErrors[$i]}"
            done
        fi
        echo 
        copy_awips_file /tmp/$(basename $0 .sh)_spotters.dat ${EDEX_HOME}/data/utility/cave_static/configured/${locSite}/basemaps/adaptivePlots/spotters.dat awips awips 775 
	fi

	echo_function Complete $FUNCNAME
	return 0 
}

function config_distribution() {

	_site=$1
	compLocRoot="${EDEX_HOME}/data/utility/edex_static/site"

	echo_function BEGIN $FUNCNAME

	cd ${compLocRoot}
	create_subtree ${_site}/distribution awips fxalpha

	if ! set_hydro_site_config
	then
		echo_function ERROR_END $FUNCNAME
		return 1
	fi

	xmlStartText="<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>
<!-- Created automatically by config_awips2.sh $FUNCNAME on $(date)
${xmlHeader}
-->
<requestPatterns xmlns:ns2=\"group\">
</requestPatterns>"

	color_echo green 1 "\tConfiguring EDEX Distribution Files __________"

	if [[ ! -f ${_site}/distribution/shef.xml || "${FORCE}" ]]
	then
		debug_echo "Creating ${_site}/distribution/shef.xml"
		echo -e "\t---- SHEF ( siteType = ${siteType} )----->\t\c"
		echo -e "${xmlStartText}" > ${compLocRoot}/${_site}/distribution/shef.xml 
		sed -i "/<\/requestPatterns>/i\\    <regex>^TTAA00 ....</regex>" ${compLocRoot}/${_site}/distribution/shef.xml
		sed -i "/<\/requestPatterns>/i\\    <regex>^SRU[EMSW][1-9]. (${wxxxList})</regex>" ${EDEX_HOME}/data/utility/edex_static/site/${_site}/distribution/shef.xml
		sed -i "/<\/requestPatterns>/i\\    <regex>^[AF][BS].... (${wxxxList})</regex>" ${EDEX_HOME}/data/utility/edex_static/site/${_site}/distribution/shef.xml
		sed -i "/<\/requestPatterns>/i\\    <regex>^FOUS.. (${rxxxList})</regex>" ${EDEX_HOME}/data/utility/edex_static/site/${_site}/distribution/shef.xml
		case ${siteType} in 
			"WFO"	)	sed -i "/<\/requestPatterns\>/i\\    <regex>^AGUS5. (${rxxxList})</regex>" ${EDEX_HOME}/data/utility/edex_static/site/${_site}/distribution/shef.xml ; 
#					sed -i "/<\/requestPatterns\>/i\\    <regex>^AGUS4. (${wxxxList}).\*</regex>" ${EDEX_HOME}/data/utility/edex_static/site/${_site}/distribution/shef.xml ;
#					sed -i "/<\/requestPatterns>/i\\    <regex>^SRUS${regList}. KWBC</regex>" ${EDEX_HOME}/data/utility/edex_static/site/${_site}/distribution/shef.xml ;
					sed -i "/<\/requestPatterns>/i\\    <regex>^FGUS[57]. (${rxxxList})</regex>" ${EDEX_HOME}/data/utility/edex_static/site/${_site}/distribution/shef.xml ;;
			"RFC"	)	sed -i "/<\/requestPatterns>/i\\    <regex>^RVU[EMSW].. (${rxxxList})</regex>" ${EDEX_HOME}/data/utility/edex_static/site/${_site}/distribution/shef.xml ;
#					sed -i "/<\/requestPatterns>/i\\    <regex>^VEUS.. (${wxxxList}).\*</regex>" ${EDEX_HOME}/data/utility/edex_static/site/${_site}/distribution/shef.xml ;
#					sed -i "/<\/requestPatterns\>/i\\    <regex>^AGUS. (${wxxxList}).\*</regex>" ${EDEX_HOME}/data/utility/edex_static/site/${_site}/distribution/shef.xml ;;
					sed -i "/<\/requestPatterns>/i\\    <regex>^SRUS..</regex>" ${EDEX_HOME}/data/utility/edex_static/site/${_site}/distribution/shef.xml ;
					sed -i "/<\/requestPatterns>/i\\    <regex>^SXUS..</regex>" ${EDEX_HOME}/data/utility/edex_static/site/${_site}/distribution/shef.xml ;;
			*	)	color_echo red 1 "\tERROR: siteType not defined in function $FUNCNAME !!" ; return 1 ;; 
		esac
		echo -e "OK"
	else
		echo -e "\tNOTE:  ${_site}/distribution/shef.xml already exists.... SKIPPING"
	fi

	echo_function COMPLETED $FUNCNAME

}

function config_postgres() {
	
	echo_function BEGIN $FUNCNAME
	

	if ! ps -wef|grep postmaster > /dev/null ; then color_echo red 1 "\tERROR: $FUNCNAME should only be run where the EDEX Database Engine is running.... skipping" ; return 1 ; fi

	echo -e "\n\tChecking in backup directory for files < 24 hours old matching most current backup"
	# cycle through the list until we find backups within a day
	find ${pathPrefix}/data/fxa/DAILY_BACKUP/postgres/$(date +%A) -regextype posix-egrep  -mtime -1 -type f ! -regex '.*(fxatext|globals|postgres|aa|maps|metadata)' -printf "%f\n" | while read _file
	do
		echo -e "\t\tFound ${_file}........"
	done
	echo
	_bkupList=( $(find ${pathPrefix}/data/fxa/DAILY_BACKUP/postgres/$(date +%A) -regextype posix-egrep  -mtime -1 -type f ! -regex '.*(fxatext|globals|postgres|aa|maps|metadata)' -printf "%f\n" ) )
	bkupDir=$(date +%A)
	if [[ ${#_bkupList[@]} -eq 0 ]] 
	then
		find ${pathPrefix}/data/fxa/DAILY_BACKUP/postgres/$(date --date='1 day ago' +%A) -regextype posix-egrep -mtime -1 -type f ! -regex '.*(fxatext|globals|postgres|aa|maps|metadata)' -printf "%f\n" | while read _file
		do
			echo -e "\t\tFound ${_file}........"
		done
		echo
		_bkupList=( $(find ${pathPrefix}/data/fxa/DAILY_BACKUP/postgres/$(date --date='1 day ago' +%A) -regextype posix-egrep  -mtime -1 -type f ! -regex '.*(fxatext|globals|postgres|aa|maps|metadata)' -printf "%f\n" ) )
		bkupDir=$(date --date='1 day ago' +%A)
	fi
	for i in ${_bkupList[@]}
	do
		if [[ ${i} == hd_ob* ]]; then xtraCmds="-E SQL_ASCII -T template0" ; else xtraCmds="" ; fi
		answer1=""
		answer_me $answer1
		while [ $? -eq 255 ]
		do
			#if [ ! "${acceptDefaults}" ]
			#then
				  echo -e "\tWould you like to load the database ${i} (Answer Y or N)? \c"
				  read answer1
			#else
			#	  answer1="y"
			#fi
			answer_me $answer1
		done
		if [ $? -eq 0 ]; then
			echo -e "\tOK! Going to load in database ${i}..."
			# Is postgres running on this host? 
			if ! ps -fu awips | grep postmaster >& /dev/null 
			then
				color_echo red 1 "\tERROR:  You must run this script on the server upon which edex_postgres has been installed."
				exit 1
			fi
			_dbFileStore=$(ps -fu awips | grep postmaster | awk '{print $10}')
			echo -e "\t\tFound database files in ${_dbFileStore}"
			# Does this database exist already?
			if psql -d fxatext -U awips --tuples-only -l | grep ${i} >& /dev/null
			then
				color_echo yellow 0 "\t\t\tWARNING: Database exists, we will drop and reload this database!!"
				if ps -fu awips | grep postgres: | grep -v autovacuum | grep ${i}
				then
					color_echo red 1 "\t\t\tERROR: Database in use.  You must shut down the processes accessing this database and re-try"
					continue
				else
					
					dropdb -U awips ${i}
					echo -e "\t\tRE-Creating database before the restore...."
					createdb -U awips ${xtraCmds} ${i}
					echo -e "\t\tRestoring database from backup file....."
					pg_restore -U awips -Fc -d ${i} ${pathPrefix}/data/fxa/DAILY_BACKUP/postgres/${bkupDir}/${i}
					# If this is the hydro database, remove some lines per SeanB and JoeO
					if [[ ${i} == hd_ob* ]]
					then
						psql -U awips -d ${i} -c "DELETE FROM ingestfilter WHERE pe=''"
					fi
				fi
			else
				if check_null_variable $SUBNET
				then
					color_echo red 1 "\t\t\tERROR - You need the variable \$SUBNET defined to do this."
					continue
				fi	
				if ! grep "${i}" ${_dbFileStore}/pg_hba.conf > /dev/null
				then
					echo -e "\t\tAdding line into pg_hba.conf"
					sed -i "/^# IPv6/i\host\t${i}\tall\t${SUBNET}\/24\ttrust" ${_dbFileStore}/pg_hba.conf
					sed -i "/^# IPv6/i\host\t${i}\tall\t127.0.0.1\/32\ttrust" ${_dbFileStore}/pg_hba.conf
					sed -i "/^# IPv4/i\local\t${i}\tall\t\t\ttrust" ${_dbFileStore}/pg_hba.conf
					echo -e "\t\tRe-loading configuration (ignore server signaled line)"
					if ! su awips -lc "pg_ctl -D ${_dbFileStore} reload > /dev/null 2>&1"
					then
						echo -e "\t\t\tERROR - DB Configuration Reload Failed!!"
						exit 1
					fi
				fi
				echo -e "\t\tCreating database before the restore...."
				su awips -lc "createdb -U awips ${xtraCmds} ${i}"
				echo -e "\t\tRestoring database from backup file....."
				pg_restore -U awips -Fc -d ${i} ${pathPrefix}/data/fxa/DAILY_BACKUP/postgres/${bkupDir}/${i}
			fi
		else
			echo -e "\tSkipping ${i}......."
		fi
		echo
	done
	
	echo_function COMPLETED $FUNCNAME
}

function check_ldm_syntax() {

	tmpFile=$1
	if [ -n "${tmpFile}" ] 
	then
            su - awips -c "ldmadmin pqactcheck -p ${tmpFile}" >& /dev/null
            retVal=$?
	else
            su - awips -c "ldmadmin pqactcheck" >& /dev/null
            retVal=$?
	fi

	return $retVal
}

function config_pqact() {

	# Configures pqact.conf / pqact.local on LDM machine
	# USAGE:
	#	config_pqact XXX	
	
	# Aruments: 
        #       $1 = Localization Site (XXX)

	echo_function BEGIN $FUNCNAME

	locSite=$1
	local radarsInUseFile=
	local dialRadarsFile=
	# radarsInUse.txt (AWIPS I Config File) controls what is put on the menus... so lets find all our radars... in use....
	# Check for existance of pqact.local first, and save off...
	color_echo green 1 "\t--> Configuring LDM pqact.conf file "

	if [ -f /var/tmp/pqact.conf.local ] 
	then
		debug_echo "/awips2/ldm/etc/pqact.conf.local exists.  This file will be overwritten"
		cat /dev/null > /var/tmp/pqact.conf.local
	fi

	echo -e "\n\t ------ RADAR  ------ "
	echo -e "\tBuilding Radar List....."

	for a in radarsInUse dialRadars
	do
	    tempVariable=${a}File 
	    workingVariable=${!tempVariable}
	    if find_awips_config ${locSite}-${a}.txt CL || find_awips_config ${a}.txt C
	    then
            echo "${retLocation}/${userFile}" > /tmp/${a}File.txt
            if [[ "${retLocation}" == "${pathPrefix}/awips/fxa/data/localization/${locSite}" ]] && find_awips_config ${a}.txt C
            then
                echo "${retLocation}/${userFile}" > /tmp/${a}File.txt
            fi
	    else
            color_echo red 1 "\tERROR:  Could not find input file for ${a}." 
            # Need to create given CenterPoint Info now
            debug_echo "\tDue to missing ${a}... checking for lat/lon" 
            #check for lat/lon
            if [[ "${myCenterPoint}" ]]
            then
                debug_echo "\t\tFound lat/lon ... getting closest radars to ${myCenterPoint[@]}" 
                dialRadarList=( $( psql --tuples-only -U awips -h ${EDEXDBSVR} -d metadata -c "select rda_id, ST_distance_sphere(the_geom,ST_SetSRID(ST_PointFromText('POINT(${myCenterPoint[1]} ${myCenterPoint[0]})'),4326)) as distance from radar_spatial order by distance asc limit ${radarLimit};" | awk '{print $1}' | xargs | tr [:upper:] [:lower:] ) )
                debug_echo "\t\tRadar list (with limit ${radarLimit}): ${dialRadarList[@]}" 
            fi
	    fi
	done

	radarsInUseFile=$( cat /tmp/radarsInUseFile.txt )
	if [[ -f /tmp/dialRadarsFile.txt ]] ; then
		dialRadarsFile=$( cat /tmp/dialRadarsFile.txt )
		debug_echo "dialRadarsFile is ${dialRadarsFile}"
		arDialRadars=( $( cat ${dialRadarsFile} | grep -v ^# | awk '{print $2}' | xargs ) )
	elif [[ "${dialRadarList}" ]] ; then
		arDialRadars=( $( echo ${dialRadarList[@]} ) )
	else
		color_echo red 1 "\tError: no dial radar list, can't continue!" 
		echo_function "ERROR - END" $FUNCNAME
		return 1
	fi
	
	arRadarList=
	for oneRadar in ${arDialRadars[@]}
	do
	    # get sender from wmoSiteInfo.txt 
	    wmoSiteInfoFile=${EDEX_INSTALL}/rcm/data/config/drop-ins/wmoSiteInfo.txt
	    if [ ! -f ${wmoSiteInfoFile} ]
	    then
		color_echo red 1 "\tERROR:  No wmoSiteInfo.txt file in ${EDEX_INSTALL}/rcm/data/config/drop-ins/ -- please make sure AWIPS II RCM is installed"
		exit 1
	    else
		threeLetterId=$( echo ${oneRadar} | cut -c 2- | tr [:lower:] [:upper:] )
		sendingSite=$( grep ${threeLetterId}Y ${wmoSiteInfoFile} | awk '{print $1}' | cut -c 2- )
		if [ "${sendingSite}" ]
		then
			# add the sending site to the radarList if it doesn't already exist
			if ! echo ${arRadarList[@]} | grep -w ${sendingSite} > /dev/null 
			then
				debug_echo "\tAdding ${sendingSite} to arRadarList..."
				arRadarList=( ${arRadarList[@]} ${sendingSite} )
			else
				debug_echo "\tNot adding ${sendingSite} as it is already in the array"
			fi
		else
			debug_echo "\tRadar ID ${oneRadar} has no sending site in ${wmoSiteInfoFile}"
		fi
	    fi
	done

	cat /dev/null > /var/tmp/ldm_radar.tmp
	radarLineText=
	cnt=0
	for i in $( seq 0 $(( ${#arRadarList[@]}-1 )) )
	do
	    if [ -z "${radarLineText}" ]
	    then
		radarLineText=${arRadarList[$i]}
	    else
		radarLineText=$( echo "${radarLineText}|${arRadarList[$i]}" )
	    fi
	    (( cnt += 1 ))
	    if [[ ${cnt} -eq 49 ]]
	    then
		echo -e "NNEXRAD\t^(SDUS[234578].|NXUS6.) (K|P|T)(${radarLineText}) (..)(..)(..) /p(...)(...)" > /var/tmp/ldm_radar.tmp
		echo -e "\tFILE\t-overwrite -log -close -edex\t/data_store/radar/(\4:yyyy)(\4:mm)\4/\5/\2\8/\7/\2\8_\7_\4\5\6-\1_\2\3_(seq).rad.%Y%m%d%H" >> /var/tmp/ldm_radar.tmp
		echo >> /var/tmp/ldm_radar.tmp
		cnt=0
		radarLineText=
	    fi
	done
	echo -e "NNEXRAD\t^(SDUS[234578].|NXUS6.) (K|P|T)(${radarLineText}) (..)(..)(..) /p(...)(...)" >> /var/tmp/ldm_radar.tmp
	echo -e "\tFILE\t-overwrite -log -close -edex\t/data_store/radar/(\4:yyyy)(\4:mm)\4/\5/\2\8/\7/\2\8_\7_\4\5\6-\1_\2\3_(seq).rad.%Y%m%d%H" >> /var/tmp/ldm_radar.tmp

	if ! set_hydro_site_config
	then
		echo_function ERROR_END $FUNCNAME
		return 1
	fi
	
	echo -e "\n\t ------ HYDRO  ------ "
	rm -f /var/tmp/ldm_hydro.tmp 
	#echo -e "\tCreating Gobal Hydro Patterns...."	
	# if wxxxList is too large, we have to split -- so check here. First attempt is splitting if > 200 characters
	if [[ $( echo ${wxxxList} | wc -c ) -gt 200 ]]
	then
		needToSplit=1
	fi
	
	#if [[ "${needToSplit}" ]]
	#then
		#wxxxList1=$( echo ${wxxxList} | cut -c 1-159 )
		#wxxxList2=$( echo ${wxxxList} | cut -c 161- )
		#echo -e "IDS|DDPLUS\t^(SRU[EMSW][1-9].) (${wxxxList1}) (..)(..)(..)" > /var/tmp/ldm_hydro.tmp
		#echo -e "\tFILE\t-overwrite -log -close -edex\t/data_store/shef/\4/\1_\2_\3\4\5_(seq).txt" >> /var/tmp/ldm_hydro.tmp
		#echo >> /var/tmp/ldm_hydro.tmp
		#echo -e "IDS|DDPLUS\t^(SRU[EMSW][1-9].) (${wxxxList2}) (..)(..)(..)" > /var/tmp/ldm_hydro.tmp
		#echo -e "\tFILE\t-overwrite -log -close -edex\t/data_store/shef/\4/\1_\2_\3\4\5_(seq).txt" >> /var/tmp/ldm_hydro.tmp
		#echo >> /var/tmp/ldm_hydro.tmp
		#echo -e "IDS|DDPLUS\t^([AF][BS]....) (${wxxxList1}) (..)(..)(..)" >> /var/tmp/ldm_hydro.tmp
		#echo -e "\tFILE\t-overwrite -log -close -edex\t/data_store/shef/\4/\1_\2_\3\4\5_(seq).txt" >> /var/tmp/ldm_hydro.tmp
		#echo >> /var/tmp/ldm_hydro.tmp
		#echo -e "IDS|DDPLUS\t^([AF][BS]....) (${wxxxList2}) (..)(..)(..)" >> /var/tmp/ldm_hydro.tmp
		#echo -e "\tFILE\t-overwrite -log -close -edex\t/data_store/shef/\4/\1_\2_\3\4\5_(seq).txt" >> /var/tmp/ldm_hydro.tmp
		#echo >> /var/tmp/ldm_hydro.tmp
	#else
		#echo -e "IDS|DDPLUS\t^(SRU[EMSW][1-9].) (${wxxxList}) (..)(..)(..)" > /var/tmp/ldm_hydro.tmp
		#echo -e "\tFILE\t-overwrite -log -close -edex\t/data_store/shef/\4/\1_\2_\3\4\5_(seq).txt" >> /var/tmp/ldm_hydro.tmp
		#echo >> /var/tmp/ldm_hydro.tmp
		#echo -e "IDS|DDPLUS\t^([AF][BS]....) (${wxxxList}) (..)(..)(..)" >> /var/tmp/ldm_hydro.tmp
		#echo -e "\tFILE\t-overwrite -log -close -edex\t/data_store/shef/\4/\1_\2_\3\4\5_(seq).txt" >> /var/tmp/ldm_hydro.tmp
		#echo >> /var/tmp/ldm_hydro.tmp
	#fi
	#echo -e "IDS|DDPLUS\t^(FOUS..) (${rxxxList}) (..)(..)(..)" >> /var/tmp/ldm_hydro.tmp 
	#echo -e "\tFILE\t-overwrite -log -close -edex\t/data_store/shef/\4/\1_\2_\3\4\5_(seq).txt" >> /var/tmp/ldm_hydro.tmp
	#echo >> /var/tmp/ldm_hydro.tmp

	echo -e "\tCreating ${siteType} Hydro Patterns...."
	case ${siteType} in 
		"WFO"	)	#echo -e "IDS|DDPLUS\t^(SRUS${regList}.) (KWBC) (..)(..)(..)" >> /var/tmp/ldm_hydro.tmp ;
				#echo -e "\tFILE\t-overwrite -log -close -edex\t/data_store/shef/\4/\1_\2_\3\4\5_(seq).txt" >> /var/tmp/ldm_hydro.tmp ;
				#echo >> /var/tmp/ldm_hydro.tmp ;
				#echo -e "IDS|DDPLUS\t^(FGUS[57].) (${rxxxList}) (..)(..)(..)" >> /var/tmp/ldm_hydro.tmp ;
				#echo -e "\tFILE\t-overwrite -log -close -edex\t/data_store/shef/\4/\1_\2_\3\4\5_(seq).txt" >> /var/tmp/ldm_hydro.tmp ;
				#echo >> /var/tmp/ldm_hydro.tmp ;
				#echo -e "IDS|DDPLUS\t^(AGUS5.) (${rxxxList}) (..)(..)(..)" >> /var/tmp/ldm_hydro.tmp ;
				#echo -e "\tFILE\t-overwrite -log -close -edex\t/data_store/shef/\4/\1_\2_\3\4\5_(seq).txt" >> /var/tmp/ldm_hydro.tmp ;
				#echo >> /var/tmp/ldm_hydro.tmp ;
				echo -e "ANY\t^([YZ]EI.98) (${rxxxList}) (..)(..)(..) .*!(grib|grib2)/.*/(.*)/#(...)/(............)/(F...)/(.*)/" >> /var/tmp/ldm_hydro.tmp ;
				echo -e "\tFILE\t-overwrite -log -close -edex\t/data_store/grib/\6/GRID\8/\7/\9/\(10)-\(11)_\1_\2_\3\4\5_(seq).\6" >> /var/tmp/ldm_hydro.tmp ;
				echo >> /var/tmp/ldm_hydro.tmp ;
				#if [[ "${needToSplit}" ]]
				#then
				#	echo -e "IDS|DDPLUS\t^(AGUS4.) (${wxxxList1}) (..)(..)(..)" >> /var/tmp/ldm_hydro.tmp ;
				#	echo -e "\tFILE\t-overwrite -log -close -edex\t/data_store/shef/\4/\1_\2_\3\4\5_(seq).txt" >> /var/tmp/ldm_hydro.tmp ;
				#	echo -e "IDS|DDPLUS\t^(AGUS4.) (${wxxxList2}) (..)(..)(..)" >> /var/tmp/ldm_hydro.tmp ;
				#	echo -e "\tFILE\t-overwrite -log -close -edex\t/data_store/shef/\4/\1_\2_\3\4\5_(seq).txt" >> /var/tmp/ldm_hydro.tmp ;
				#else
				#	echo -e "IDS|DDPLUS\t^(AGUS4.) (${wxxxList}) (..)(..)(..)" >> /var/tmp/ldm_hydro.tmp ;
				#	echo -e "\tFILE\t-overwrite -log -close -edex\t/data_store/shef/\4/\1_\2_\3\4\5_(seq).txt" >> /var/tmp/ldm_hydro.tmp ;
				#fi
				;;
		"RFC"	)	#echo -e "IDS|DDPLUS\t^(SRUS7[${regList}]) (KWBC) (..)(..)(..)" >> /var/tmp/ldm_hydro.tmp ;
				#echo -e "\tFILE\t-overwrite -log -close -edex\t/data_store/shef/\4/\1_\2_\3\4\5_(seq).txt" >> /var/tmp/ldm_hydro.tmp ;
				#echo >> /var/tmp/ldm_hydro.tmp ;
				#echo -e "IDS|DDPLUS\t^(RVU[EMSW]..) (${rxxxList}) (..)(..)(..)" >> /var/tmp/ldm_hydro.tmp ;
				#echo -e "\tFILE\t-overwrite -log -close -edex\t/data_store/shef/\4/\1_\2_\3\4\5_(seq).txt" >> /var/tmp/ldm_hydro.tmp ;
				#echo >> /var/tmp/ldm_hydro.tmp ;
				#if [[ "${needToSplit}" ]]
				#then
					#echo -e "IDS|DDPLUS\t^(AGUS..) (${wxxxList1}) (..)(..)(..)" >> /var/tmp/ldm_hydro.tmp ;
					#echo -e "\tFILE\t-overwrite -log -close -edex\t/data_store/hdp/\4/\1_\2_\3\4\5_(seq).txt" >> /var/tmp/ldm_hydro.tmp ;
					#echo >> /var/tmp/ldm_hydro.tmp ;
					#echo -e "IDS|DDPLUS\t^(AGUS..) (${wxxxList2}) (..)(..)(..)" >> /var/tmp/ldm_hydro.tmp ;
					#echo -e "\tFILE\t-overwrite -log -close -edex\t/data_store/hdp/\4/\1_\2_\3\4\5_(seq).txt" >> /var/tmp/ldm_hydro.tmp ;
					#echo >> /var/tmp/ldm_hydro.tmp ;
					#echo -e "ANY\t^(VEUS..) (${wxxxList1}) (..)(..)(..)" >> /var/tmp/ldm_hydro.tmp ;
					#echo -e "\tFILE\t-overwrite -log -close -edex\t/data_store/hdp/\4/\1_\2_\3\4\5_(seq).txt" >> /var/tmp/ldm_hydro.tmp ;
					#echo >> /var/tmp/ldm_hydro.tmp ;
					#echo -e "ANY\t^(VEUS..) (${wxxxList2}) (..)(..)(..)" >> /var/tmp/ldm_hydro.tmp ;
					#echo -e "\tFILE\t-overwrite -log -close -edex\t/data_store/hdp/\4/\1_\2_\3\4\5_(seq).txt" >> /var/tmp/ldm_hydro.tmp ;
					#echo >> /var/tmp/ldm_hydro.tmp ;
				#else
				#	echo -e "IDS|DDPLUS\t^(AGUS..) (${wxxxList}) (..)(..)(..)" >> /var/tmp/ldm_hydro.tmp ;
				#	echo -e "\tFILE\t-overwrite -log -close -edex\t/data_store/hdp/\4/\1_\2_\3\4\5_(seq).txt" >> /var/tmp/ldm_hydro.tmp ;
				#	echo >> /var/tmp/ldm_hydro.tmp ;
				#	echo -e "ANY\t^(VEUS..) (${wxxxList}) (..)(..)(..)" >> /var/tmp/ldm_hydro.tmp ;
				#	echo -e "\tFILE\t-overwrite -log -close -edex\t/data_store/hdp/\4/\1_\2_\3\4\5_(seq).txt" >> /var/tmp/ldm_hydro.tmp ;
				#	echo >> /var/tmp/ldm_hydro.tmp ;
				#fi
				;;
		*	)	color_echo red 1 "\tERROR:  siteType not defined in $FUNCNAME !!" ; return 1 ;;
	esac

	echo -e "\n\t ------ LOCAL ------ "
	color_echo yellow 0 "\a\t\t!!! IMPORTANT NOTE !!!  You need to transfer all local patterns from acqPatternAddOns to pqact.conf.$( echo ${locSite} | tr [:upper:] [:lower:] ) manually"
	sleep 15

	# Append onto main pqact.conf
	if [[ $(hostname | cut -f1 -d'-') == "adam1" ]] ; then 
           pqfilename=adam-pqact.conf
    else
           pqfilename=pqact.conf
    fi
	  
    #chown ldm:fxalpha /var/tmp/pqact.conf.local
    echo -e "\tChecking for syntax correctness....\t\t\c"
	   if check_ldm_syntax /var/tmp/ldm_radar.tmp
	   then
		echo -e "OK"
		echo -e "\tAdding onto /awips2/ldm/etc/pqact.conf.local"
		echo -e "####### Added by $FUNCNAME ######### " >> /var/tmp/pqact.conf.local
		cat /var/tmp/ldm_radar.tmp >> /var/tmp/pqact.conf.local
		echo -e "\tChecking syntax of /awips2/ldm/etc/pqact.conf.local ................. \c"
		if check_ldm_syntax /var/tmp/pqact.conf.local
		then
			echo -e "OK"
		else
			echo -e "ERROR -- Check File /var/tmp/pqact.conf.local"
			exit 1
		fi
	   else
		echo -e "ERROR -- Check File /var/tmp/ldm_radar.tmp"
		exit 1
	   fi

	   if [[ -f /var/tmp/ldm_hydro.tmp ]] ; then
		echo -e "\tChecking for syntax correctness\t\t\c"
		if check_ldm_syntax /var/tmp/ldm_hydro.tmp
		then
			echo -e "OK"
			echo -e "\tAdding onto /awips2/ldm/etc/pqact.conf.local"
			echo >> /var/tmp/pqact.conf.local
			cat /var/tmp/ldm_hydro.tmp >> /var/tmp/pqact.conf.local
			echo -e "\tChecking syntax of /awips2/ldm/etc/pqact.conf.local ................. \c"
			if check_ldm_syntax /var/tmp/pqact.conf.local >& /dev/null
			then
				echo -e "OK"
			else
				echo -e "ERROR -- Check File /var/tmp/pqact.conf.local"
				exit 1
			fi
		else
			echo -e "ERROR -- Check File /var/tmp/ldm_hydro.tmp"
			exit 1
		fi
	   fi
	
	   cat /awips2/ldm/etc/pqact.conf.template > /awips2/ldm/etc/${pqfilename} && chown ldm:fxalpha /awips2/ldm/etc/${pqfilename}
	   cat /var/tmp/pqact.conf.local >> /awips2/ldm/etc/${pqfilename}
	
	   case "${AII_RELEASEID}" in
		"1"[4-5]"."[2-9]"."*  )   
		    if [[ ! -f /awips2/ldm/etc/pqact.conf.datadelivery ]]
		    then
			cp ${fullScriptPath}/pqact.conf.datadelivery /awips2/ldm/etc/
		    fi
		    cat /awips2/ldm/etc/pqact.conf.datadelivery >> /awips2/ldm/etc/${pqfilename}
		;;
	   esac

	   if echo ${locSite} | grep -iw -E "gyx|okx|phi|lwx|akq|mhx|ilm|chs|jax|mlb|mfl|key|tbw|tae|mob|lix|lch|box|hgx|crp|bro" > /dev/null
	   then
		color_echo yellow 0 "\tIdentified coastal AWIPS II site, adding pqact.conf.tropical contents onto pqact.conf.local"
		if [[ ! -f /awips2/ldm/etc/pqact.conf.tropical ]]
		then
			cp ${fullScriptPath}/pqact.conf.tropical /awips2/ldm/etc/
		fi 
		cat /awips2/ldm/etc/pqact.conf.tropical >> /awips2/ldm/etc/${pqfilename}
	   fi
           if [[ -f /awips2/ldm/etc/pqact.conf.$( echo ${locSite} | tr [:upper:] [:lower:] ) ]]
	   then
		scp /awips2/ldm/etc/pqact.conf.$( echo ${locSite} | tr [:upper:] [:lower:] ) /var/tmp ; localFileToAdd="/var/tmp/pqact.conf.$( echo ${locSite} | tr [:upper:] [:lower:] )"
	   fi
           if [[ -f /awips2/ldm/etc/pqact.conf.${locSite} ]]
	   then
		scp /awips2/ldm/etc/pqact.conf.${locSite} /var/tmp/ ; localFileToAdd="/var/tmp/pqact.conf.${locSite}"
	   fi
	   if [[ "${localFileToAdd}" ]]
	   then
	      echo -ne "\tFound ${localFileToAdd}, checking syntax.... "
		if check_ldm_syntax ${localFileToAdd} 
		then
			echo -e "OK"
			echo -e "\tAdding onto /awips2/ldm/etc/${pqfilename}" 
                	cat ${localFileToAdd} >> /awips2/ldm/etc/${pqfilename}
		else
			echo -e "FAILED!!"
			echo -e "\tERROR: Syntax of ${localFileToAdd} is improper, please check and run ldmadmin pqactHUP to test" 
		fi
	   fi

	# Send HUP to ldm
        if [ -f /awips2/ldm/ldmd.pid ]
	then
		su - awips -lc 'ldmadmin pqactHUP' | while read line; do echo -e "\t${line}"; done; else color_echo yellow 0 "\n\tNOTE: LDM doesn't appear to be running, don't forget to start it!"
	fi

	echo_function COMPLETED $FUNCNAME
}

function config_ffmp_shapefiles () {
	
	# Imports FFMP Shape Files from nationalData into maps database
	# USAGE:
	#	config_ffmp_shapefiles XXX	
	
	# Aruments: 
        #       $1 = Localization Site (XXX)

	echo_function BEGIN $FUNCNAME

	locSite=$1
	case ${siteType} in 
		"RFC"	)	echo -e "\t${siteType} doesn't use FFMP ... Skipping"; return 1 ;;
	esac
	for fil in ${shpFFMPBasins[@]} 
	do
		if [[ ! -e ${fil} && ! -e ${fil}.gz ]]; then echo -e "ERROR: ${fil} does not exist and is necessary to import FFMP Basins.  Contact Support"; exit 1; fi
	done
	
	for fil in ${shpFFMPStreams[@]}
	do
		if [[ ! -e ${fil} && ! -e ${fil}.gz ]]; then echo -e "ERROR: ${fil} does not exist and is necessary to import FFMP Streams.  Contact Support"; exit 1; fi
        done

	# Now make sure we are running postgres on this host:
	debug_echo "Determining if we are on DB host by ps -fu awips | grep postmaster" && if ! ps -fu awips | grep postmaster > /dev/null 
	then
		color_echo red 1 "\tERROR:  Must run this on host running postgres.  SKIPPING.... "
		return 1
	fi

	# Now make sure there are no connections to the maps database
	debug_echo "Determining if there are any DB connections to maps by ps -fu awips | grep postgres | grep 'awips maps'" && if ps -fu awips | grep postgres | grep 'awips maps' > /dev/null
	then
		color_echo red 1 "\tERROR:  Must be no connections to maps database.  Try stopping EDEX processes and re-running.  SKIPPING IMPORT "
		return 1
	fi

	#modify_pgsec ${dbaccessType} maps trust
	modify_pgsec local maps trust
	import_shape_file ffmp_basins ${pathPrefix}/data/fxa/nationalData/FFMP_aggr_basins.shp "0.064,0.016,0.004,0.001"
	import_shape_file ffmp_streams ${pathPrefix}/data/fxa/nationalData/FFMP_ref_sl.shp "0.064,0.016,0.004,0.001"
	#modify_pgsec local maps md5
	#modify_pgsec ${dbaccessType} maps md5

	echo_function COMPLETE $FUNCNAME

}

function config_ndm() {

	# Created 28 April to deal with ndm directory.  
	# As of 11.4 the following should be put in here:
	#	afos2awips.txt
	

	# USAGE:
	#	config_ndm XXX	
	
	# Arguments: 
        #       $1 = Localization Site (XXX)

	echo_function BEGIN $FUNCNAME

	locSite=$1
	compLocRoot=${EDEX_HOME}/data 
	compLocDir=${compLocRoot}/ndm

	cd ${compLocRoot}
	debug_echo "\tWorking in $(pwd)"
	create_subtree ndm awips fxalpha
	
	# /awips/fxa/data files
    PS3="Select file from /awips/fxa/data/ to ingest into AWIPS II: "
    arrayOfFiles=( afos2awips.txt metarStationInfo.txt modelBufrStationInfo.txt MTR.primary MTR.goodness goesBufrStationInfo.txt poesBufrStationInfo.txt maritimeStationInfo.txt raobStationInfo.txt synopticStationTable.txt textCategoryClass.txt textCCChelp.txt textNNNhelp.txt textOriginTable.txt afos_lookup_table.dat prodList.txt tdwrProdList.txt wmoSiteInfo.txt )
    if [[ "${ndmMenus}" ]] ; then
        select filesToMigrate in "ALL" ${arrayOfFiles[@]} "EXIT"
        do
            case "${filesToMigrate}" in
                "ALL"   )   echo -e "\nUser Choice: ALL"
                            for myFile in ${arrayOfFiles[@]}
                            do
                                debug_echo "\tCopying ${pathPrefix}/awips/fxa/data/${myFile} to ${compLocDir}/${myFile}"
                                case ${myFile} in 
                                "prodList.txt"|"tdwrProdList.txt" | "wmoSiteInfo.txt" )	
				extraCopyCommand=""
				;;
				*	)	extraCopyCommand="" ;;
			esac
                                copy_awips_file ${extraCopyCommand}${pathPrefix}/awips/fxa/data/${myFile} ${compLocDir}/${myFile} awips fxalpha 644
                            done 
                            ;;
                "EXIT"  )   echo -e "\nUser Choice: EXIT" ; break ;;
                ""      )   break ;; 
                *       )   myFile=${filesToMigrate}
                            echo -e "\nUser Choice: ${myFile}"
                            case ${myFile} in 
                                "prodList.txt"|"tdwrProdList.txt" | "wmoSiteInfo.txt" )	
					extraCopyCommand=""
					;;
					*	)	extraCopyCommand="" ;;
				esac
                            debug_echo "\tCopying ${extraCopyCommand}${pathPrefix}/awips/fxa/data/${myFile} to ${compLocDir}/${myFile}"
                            copy_awips_file ${extraCopyCommand}${pathPrefix}/awips/fxa/data/${myFile} ${compLocDir}/${myFile} awips fxalpha 644
                            ;;
            esac
        done
    else
        for myFile in ${arrayOfFiles[@]}
        do
            debug_echo "\tCopying ${pathPrefix}/awips/fxa/data/${myFile} to ${compLocDir}/${myFile}"
            copy_awips_file ${pathPrefix}/awips/fxa/data/${myFile} ${compLocDir}/${myFile} awips fxalpha 644
        done 
    fi

    # /data/fxa/nationalData
    PS3="Select file from /data/fxa/nationalData/ to ingest into AWIPS II: "
    arrayOfFiles=( raob.goodness raob.primary fsl-w88d.dbf fsl-w88d.shp fsl-w88d.shx national_category_table.template afosMasterPIL.txt rps-RPGOP-tcp.clear-air rps-RPGOP-tcp.storm rps-SPGOP-tcp.storm )
    if [[ "${ndmMenus}" ]] ; then 
        select filesToMigrate in "ALL" ${arrayOfFiles[@]} "EXIT"
        do
            case "${filesToMigrate}" in
                "ALL"   )   echo -e "\nUser Choice: ALL"
                            for myFile in ${arrayOfFiles[@]}
                            do
                                debug_echo "\tCopying ${pathPrefix}/data/fxa/nationalData/${myFile} to ${compLocDir}/${myFile}"
                                copy_awips_file ${pathPrefix}/data/fxa/nationalData/${myFile} ${compLocDir}/${myFile} awips fxalpha 644
                            done 
                            ;;
                "EXIT"  )   echo -e "\nUser Choice: EXIT" ; break ;; 
                ""      )   break ;; 
                *       )   myFile=${filesToMigrate}
                            echo -e "\nUser Choice: ${myFile}"
                            debug_echo "\tCopying ${pathPrefix}/data/fxa/nationalData/${myFile} to ${compLocDir}/${myFile}"
                            copy_awips_file ${pathPrefix}/data/fxa/nationalData/${myFile} ${compLocDir}/${myFile} awips fxalpha 644
                            ;;
            esac
        done
    else
        for myFile in ${arrayOfFiles[@]}
        do
            debug_echo "\tCopying ${pathPrefix}/data/fxa/nationalData/${myFile} to ${compLocDir}/${myFile}"
            copy_awips_file ${pathPrefix}/data/fxa/nationalData/${myFile} ${compLocDir}/${myFile} awips fxalpha 644
        done
    fi

    PS3="Migrate ispan_table.dat? "
    if [[ "${ndmMenus}" ]] ; then 
        select answer in "YES" "NO"
        do
            case "${answer}" in 
                "YES"   )   echo -e "\nUser Choice: YES"
                            if find_awips_config ${locSite}-ispan_table.dat L || find_awips_config ispan_table.template N
                            then
                                ispanTemplate=${retLocation}/${userFile}
                            else
                                if [ -f /awips/fxa/data/ispan_table.template ] 
                                then
                                    ispanTemplate=/awips/fxa/data/ispan_table.template
                                else
                                    color_echo red 1 "\tERROR: Can not find an ispan_table.template to use!  Skipping....."
                                fi
                            fi

                            if [[ "${ispanTemplate}" ]]
                            then
                                debug_echo "\tCreating ispan_table.dat from ${ispanTemplate}" 
                                cat ${ispanTemplate} | grep -v ^// | sed -e "s/@@@/${cccID}/g" > /tmp/ispan_table.dat 
                                chown awips:fxalpha /tmp/ispan_table.dat 
                                copy_awips_file /tmp/ispan_table.dat ${compLocDir}/ispan_table.dat awips fxalpha 644
                            fi		
                            break
                            ;;
                "NO"    )   break ;; 
            esac
        done
    else
        if find_awips_config ${locSite}-ispan_table.dat L || find_awips_config ispan_table.template N
        then
            ispanTemplate=${retLocation}/${userFile}
        else
            if [ -f /awips/fxa/data/ispan_table.template ] 
            then
                ispanTemplate=/awips/fxa/data/ispan_table.template
            else
                color_echo red 1 "\tERROR: Can not find an ispan_table.template to use!  Skipping....."
            fi
        fi

        if [[ "${ispanTemplate}" ]]
        then
            debug_echo "\tCreating ispan_table.dat from ${ispanTemplate}" 
            cat ${ispanTemplate} | grep -v ^// | sed -e "s/@@@/${cccID}/g" > /tmp/ispan_table.dat 
            chown awips:fxalpha /tmp/ispan_table.dat 
            copy_awips_file /tmp/ispan_table.dat ${compLocDir}/ispan_table.dat awips fxalpha 644
        fi      
    fi

	echo_function COMPLETED $FUNCNAME
}

function get_simplev() {

	# Created 23 Feb to support shape file import.
	# sets variable SIMPLEV

	# USAGE:
	# 	reload_base_shapefiles XXX
  
	# Arguments:
	# 	$1 = shape file name (can be full path, or directory) 


	local shapeFileName=$1
    
	debug_echo "\tIN FUNCTION $FUNCNAME: "

	TYPE=$( od -d -j32 -N2 ${shapeFileName} | awk '{($2 >= 0)&&($2 < 33); print $2}' )
	if [[ ${TYPE} -lt 0 || ${TYPE} -gt 33 ]]
	then
		color_echo yellow 0 "\tNOTE: ${shapeFileName} is not a valid shapefile.  TYPE=$( od -d -j32 -N2 ${shapeFileName} | awk '{ print $2 }' )"
		return 1
	fi

	case ${TYPE} in 
		0		)	color_echo yellow 0 "\tNOTE:  ${shapeFileName} is a null shapefile, skipping...." ; return 1 ;; 
		1|8|18|21|28	)	shpDesc="Point data shapefile" ; SIMPLEV="" ;;
		3|13|23		)	shpDesc="Line or Arc data shapefile" ; SIMPLEV="0.064,0.016,0.004,0.001" ;;
		5|15|25		)	shpDesc="Polygon data shapefile" ; SIMPLEV="0.064,0.016,0.004,0.001" ;;
		31		)	shpDesc="MultiPatch data shapefile" ; SIMPLEV="0.064,0.016,0.004,0.001" ;;
		*		)	color_echo yellow 0 "\tNOTE:  ${shapeFileName} is Unknown Type, skipping...." ; return 1 ;;
	esac
	debug_echo "\t\t${shapeFileName} TYPE = ${TYPE}, SIMPLEV = ${SIMPLEV}" ; 

	return 0 

}

function reload_base_shapefiles() {

	# Created 23 Feb to re-import all shapefiles in the base directory
	# uses funtion import_shape_file

	# USAGE:
	# 	reload_base_shapefiles XXX
  
	# Arguments:
	# 	$1 = Localization Site (XXX)

	locSite=$1
	compLocRoot=${EDEX_HOME}/data/utility/edex_static
	compLocDir=base/shapefiles
	stagingLocation=/data/fxa/nationalData

	echo_function BEGIN $FUNCNAME

	cd ${compLocRoot}/${compLocDir}

	for baseLineShapeFile in $( find . -depth -type d | xargs ) 
	do
		# determine the information for the shapefile
		baseLineShapeFile=${baseLineShapeFile#./}
		case "${baseLineShapeFile}" in
			[Bb]"asins"	)	agmgPrefix="ba" ; awipsName="basins"		;;
			[Bb]"ackupCWA" )	agmgPrefix="wt" ; awipsName="usa_cwa_total" ;;
			[Cc]"ity"	)	agmgPrefix="ci" ; awipsName="usa_cities"	;;
			[Cc]"anada"	)	agmgPrefix="province"   ; awipsName="province"	;;
			[Cc]"ounty"	)	agmgPrefix="c_" ; awipsName="uscounty"		;;
			[Cc]"ustomLocations"	)	agmgPrefix="" ; awipsName=""		;;
			"CWA"		)	agmgPrefix="w_"	; awipsName="usa_cwa"		;;
			"FAA/ARTCC"		)	agmgPrefix="artcc"   ; awipsName="artcc"			;;
			"FAA/Airport"		)	agmgPrefix="airport"   ; awipsName="airport"			;;
			"FAA/Fix"		)	agmgPrefix="fix"   ; awipsName="fix"			;;
			"FAA/HighAltitude"		)	agmgPrefix=""   ; awipsName=""			;;
			"FAA/LowAltitude"		)	agmgPrefix=""   ; awipsName=""			;;
			"FAA/NavAid"		)	agmgPrefix="navaid"   ; awipsName="navaid"			;;
			"FAA/SpecialUse"		)	agmgPrefix="sua"   ; awipsName="sua"			;;
			"FFMP"		)	agmgPrefix=""   ; awipsName=""			;;
			"FireWxAOR"	)	agmgPrefix="cf"   ; awipsName="firewxaor"		;;
			"FireWxZones"	)	agmgPrefix="fz" ; awipsName="firewx"		;;
			"HighSea"	)	agmgPrefix="hz"   ; awipsName="high_seas_zones"	;;
			"Highway"	)	agmgPrefix="rd"   ; awipsName="routes"		;;
			"HSA"		)	agmgPrefix="hs"   ; awipsName="hs"		;;
			"Interstate"	)	agmgPrefix="in"   ; awipsName="us_inter"	;;
			"ISC"		)	agmgPrefix="cm"   ; awipsName="isc_aor"		;;
			"Lake"		)	agmgPrefix="lk"   ; awipsName="usa_lake"	;;
			"LatLon10"	)	agmgPrefix=""   ; awipsName=""			;;
			"MarineZones"	)	agmgPrefix="mz"   ; awipsName="marine_zones"	;;
			"Mexico"	)	agmgPrefix="st_mx"   ; awipsName="st_mx"	;;
			"Offshore"	)	agmgPrefix="oz"   ; awipsName="offshore_zones"	;;				
			"Railroad"	)	agmgPrefix=""   ; awipsName=""			;;
			"RFC"		)	agmgPrefix="rf"   ; awipsName="usa_rfc"		;;
			"Rivers/AllRivers"	)	agmgPrefix="rv"   ; awipsName="rv"	;;
			"Rivers/MajorRivers"	)	agmgPrefix="rs"   ; awipsName="rs"	;;
			"States"	)	agmgPrefix="s_"   ; awipsName="states"		;;
			"TimeZones"	)	agmgPrefix="tz"   ; awipsName="timezones"	;;
			"WarnGenLoc"	)	agmgPrefix="wg" ; awipsName="warngenloc" ;; 
			"World"		)	agmgPrefix="world_adm0"   ; awipsName="world_adm0"			;;
			"Zone"		)	agmgPrefix="z_"   ; awipsName="c11-zone"	;;
			*		)	continue ;;
		esac

		cd ${compLocRoot}/${compLocDir}
		debug_echo "\tWorking in $(pwd)"

		# kick out if we don't support (both agmgPrefix and awipsName are filled in for now -- this might change later
		if [[ ! ${agmgPrefix} || ! ${awipsName} ]]
		then
			    color_echo yellow 0 "\tNOTE:  ${baseLineShapeFile} isn't supported at this time, skipping....."
			    debug_echo "\t\tAGMG Prefix = ${agmgPrefix}\tAWIPS Name = ${awipsName}"
			    continue 
		fi

		cd ${baseLineShapeFile}
		baselineShapeFileName=$( ls *.shp )
		shapeFileFullpath=${compLocRoot}/${compLocDir}/${baseLineShapeFile}
		unset shpFileFound
		unset baseLineParentDir
		unset doImport 

		# check for the AWIPS-I version of the file. 
		if echo ${baseLineShapeFile} | grep '/' > /dev/null
		then 
			baseLineParentDir="$( echo ${baseLineShapeFile} | cut -f1 -d'/' )/"
			baseLineShapeFile=$( echo ${baseLineShapeFile} | cut -f2 -d'/' ) 
		fi
		color_echo green 0 "\tChecking baseline shapefile for the ${baseLineShapeFile} table..."
		if [[ -f ${stagingLocation}/${awipsName}.dbf &&  -f ${stagingLocation}/${awipsName}.shx ]]
		then
			debug_echo "\tFound dbf and shx for ${awipsName} in ${stagingLocation} .. looking for shp or shp.Z"
			if [[ -f ${stagingLocation}/${awipsName}.shp ]]
			then
				shpFileExtension="shp"	
			elif [[ -f ${stagingLocation}/${awipsName}.shp.Z ]]
			then
				shpFileExtension="shp.Z"
				compressUtil=compress
				uncompressUtil=uncompress 
			elif [[ -f ${stagingLocation}/${awipsName}.shp.gz ]]
			then
				shpFileExtension="shp.gz"
				compressUtil=gzip
				uncompressUtil=gunzip 
			else
				color_echo red 1 "\tERROR: Can not find shp or shp.Z for ${awipsName} in ${stagingLocation} -- will not load"
				cd ..
				continue
			fi

			debug_echo "\tFound shp for ${awipsName} in ${stagingLocation} .. looking for ${agmgPrefix} file"
			if ls ${stagingLocation}/${agmgPrefix}* 2>&1 | grep -E "${agmgPrefix}[0-9]{2}[a-z]{2}[0-9]{2}.shp" > /dev/null
			then
				testFileName=$( ls -tr ${stagingLocation}/${agmgPrefix}* | grep -E "${agmgPrefix}[0-9]{2}[a-z]{2}[0-9]{2}.shp" | tail -1 )
				if [[ ${testFileName} -nt ${stagingLocation}/${awipsName}.${shpFileExtension} ]]  
				then
					debug_echo "\t${testFileName} is newer than ${stagingLocation}/${awipsName}.${shpFileExtension} .. using ${testFileName}"
					if file ${testFileName} | grep gzip > /dev/null 2>&1 
					then
						compressUtil=gzip
						uncompressUtil=gunzip
					elif file ${testFileName} | grep "compress'd" > /dev/null 2>&1
					then
						compressUtil=compress
						uncompressUtil=uncompress
					elif file ${testFileName} | grep ESRI > /dev/null 2>&1
					then
						debug_echo "\t\tFile is not compressed"
					else
						color_echo red 1 "\tCan't identify file type for ${testFileName}, skipping..."
						cd ..
						continue
					fi
					#testFileName=$( ls -tr ${stagingLocation}/${agmgPrefix}* | grep -E "${agmgPrefix}[0-9]{2}[a-z]{2}[0-9]{2}.shp" | tail -1 )
					shpFileToConvert=${testFileName}
					isUsingAgmgName=true
				else
					debug_echo "\t${testFileName} is OLDER than ${stagingLocation}/${awipsName}.${shpFileExtension} .. using ${awipsName}"
					shpFileToConvert=${stagingLocation}/${awipsName}.${shpFileExtension}
				fi
			else
				debug_echo "\tDidn't find anything that matched ${agmgPrefix} in ${stagingLocation}, using ${awipsName}"
				shpFileToConvert=${stagingLocation}/${awipsName}.${shpFileExtension}
			fi
			shpFileFound=true
		fi
		if [[ ! "${shpFileFound}" ]]
		then
			debug_echo "\tChecking for AGMG prefix named file..." 
			if ls ${stagingLocation}/${agmgPrefix}* 2>&1 | grep -E "${agmgPrefix}[0-9]{2}[a-z]{2}[0-9]{2}.shp" > /dev/null
			then
				testFileName=$( ls -tr ${stagingLocation}/${agmgPrefix}* | grep -E "${agmgPrefix}[0-9]{2}[a-z]{2}[0-9]{2}.shp" | tail -1 )
				debug_echo "\tFound ${testFileName} .. looking for the three necessary files"
				testFileExt=$( echo ${testFileName} | cut -f2- -d'.' )
				testFileName=$( echo ${testFileName} | cut -f1 -d'.' )
				if [[ -f ${testFileName}.dbf && -f ${testFileName}.shx ]]
				then
					debug_echo "\tFound all three... doing shape file analysis for compression"
					if file ${testFileName}.${testFileExt} | grep gzip > /dev/null 2>&1 
					then
						compressUtil=gzip
						uncompressUtil=gunzip
					elif file ${testFileName}.${testFileExt} | grep "compress'd" > /dev/null 2>&1
					then
						compressUtil=compress
						uncompressUtil=uncompress
					elif file ${testFileName}.${testFileExt} | grep ESRI > /dev/null 2>&1
					then
						debug_echo "\t\tFile is not compressed"
					else
						color_echo red 1 "\tERROR: Can not find shp or shp.Z for ${testFileName}.${testFileExt} in ${stagingLocation} -- will not load"
						cd ..
						continue
					fi
					shpFileToConvert=${testFileName}.${testFileExt}
					shpFileFound=true
					isUsingAgmgName=true
				else
					debug_echo "\t\tDidn't find ${testFileName}.dbf and/or ${testFileName}.shx .. skipping"
					unset shpFileFound
				fi
			fi
		fi		
		if [[ "${shpFileFound}" ]] 
		then
			debug_echo "\t\tFound ${shpFileToConvert}"
			shpFileName=$( echo ${shpFileToConvert} | cut -f1 -d'.' )
			shpFileExtension=$( echo ${shpFileToConvert} | cut -f2- -d'.' )
            shpFileModTime=$( stat -c %Y ${shpFileToConvert} )
			if file ${shpFileToConvert} | grep compress > /dev/null 2>&1 
			then
				isCompressed=true
				debug_echo "\t\t\tFile is compressed!  Uncompressing using ${uncompressUtil}"
				${uncompressUtil} ${shpFileToConvert}
				shpFileExtension="shp"
			fi
			
			# lets see which is newer! first check md5sum for being the same
            local edexShapeFileDir=${compLocRoot}/${compLocDir}/${baseLineParentDir}${baseLineShapeFile}
            baseLineShapeFile=$( echo ${baseLineShapeFile} | tr [:upper:] [:lower:] )
            modify_pgsec host maps trust
            shpImportTime=$( psql -U awips -h ${EDEXDBSVR} -d maps --tuples-only -c "select import_time from mapdata.map_version where table_name='${baseLineShapeFile}';" )
            shpImportDate=$( date -d "${shpImportTime}" +%s )
            if [[ ${shpImportTime} != "" && ${shpFileModTime} -lt ${shpImportDate} ]]
            then
                color_echo yellow 0 "\tSkipping mapdata.${baseLineShapeFile}"
                debug_echo "\t\tDatabase import time = ${shpImportDate}\tShape File Modification Time = ${shpFileModTime}"
				cd ..
				if [[ "${isCompressed}" ]]; then debug_echo "\t\t\tRecompressing using ${compressUtil}" ; ${compressUtil} ${shpFileName}.shp ; unset isCompressed ; fi
				continue 
			else
                echo -e "\t\tFound newer shape file for ${baseLineShapeFile} ... importing ${shpFileToConvert}"
                rm -f *.archive
                for file in $( ls | grep -v archive ) 
                do
                    debug_echo "\t\t\tMoving ${file} to $(date +%Y%m%d)-${file}.archive"
                    mv --force ${file} $(date +%Y%m%d)-${file}.archive
                done
                copy_awips_file ${shpFileName}.dbf ${edexShapeFileDir}/ awips fxalpha 775
                copy_awips_file ${shpFileName}.shx ${edexShapeFileDir}/ awips fxalpha 775
                copy_awips_file ${shpFileName}.shp ${edexShapeFileDir}/ awips fxalpha 775
                if ! get_simplev ${shpFileName}.shp 
                then
                    cd ..
                    if [[ "${isCompressed}" ]]; then debug_echo "\t\t\tRecompressing using ${compressUtil}" ; ${compressUtil} ${shpFileName}.shp ; unset isCompressed ; fi
                    continue
                fi
                debug_echo "\tChecking for existing database ${baseLineShapeFile}"
                if psql -U awips -h ${EDEXDBSVR} -d maps -c "select * from mapdata.${baseLineShapeFile} limit 1;" >& /dev/null
                then
                    # database exists -- prompt user to removed
                    echo -ne "\tTo complete this action mapdata.${baseLineShapeFile} will be reloaded, are you ready to do this now? (Enter Y or N): "
                    read _answer
                    if answer_me ${_answer}
                    then
                        doImport=1
                    else
                        color_echo yellow 0 "\tSkipping mapdata.${baseLineShapeFile}"
                        debug_echo "\tResetting archive files back to normal name"
                        unset doImport 
                        rm -f ${shpFileName}.dbf ${shpFileName}.shx ${shpFileName}.shp
                        for tmpfile in $( ls *.archive )
                        do
                            tmpnewfile=$( echo $tmpfile | sed -e "s/[0-9].*-//g" -e "s/.archive//g" )
                            debug_echo "\t\tMoving ${tmpfile} to ${tmpnewfile}"
                            mv --force ${tmpfile} ${tmpnewfile} 
                        done
                    fi				  
                else
                    # database does not exists - import 
                    doImport=1
                fi
                
                if [[ "${doImport}" ]]
                then
                    echo -e "\tImporting ${shpDesc} ${shpFileName}.shp\n"
                    if ! import_shape_file ${baseLineShapeFile} ${shpFileName}.shp "${SIMPLEV}"
                    then
                        debug_echo "\tResetting archive files back to normal name"
                        rm -f ${shpFileName}.dbf ${shpFileName}.shx ${shpFileName}.shp
                        for tmpfile in $( ls *.archive )
                        do
                            tmpnewfile=$( echo $tmpfile | sed -e "s/[0-9].*-//g" -e "s/.archive//g" )
                            debug_echo "\t\tMoving ${tmpfile} to ${tmpnewfile}"
                            mv --force ${tmpfile} ${tmpnewfile} 
                        done
                    else
                        #debug_echo "\tChecking for areaSource definitions for ${baseLineShapeFile} in /awips2/edex/data/utility/common_static/site/${locSite}/warngen/"
                        debug_echo "\tChecking for areaSource definitions for ${baseLineShapeFile} in /awips2/edex/data/utility/common_static/base/warngen/ and /awips2/edex/data/utility/common_static/site/${locSite}/warngen/"
                        if grep -i "<areaSource>${baseLineShapeFile}</areaSource>" /awips2/edex/data/utility/common_static/base/warngen/*.xml > /dev/null || grep -i "<areaSource>${baseLineShapeFile}</areaSource>" /awips2/edex/data/utility/common_static/site/${locSite}/warngen/*.xml > /dev/null 
                        then
                            if [[ -d /awips2/edex/data/utility/common_static/configured/${locSite}/warngen/geoms/ ]] ; then 
                                echo -e "\t\tRemoving /awips2/edex/data/utility/common_static/configured/${locSite}/warngen/geoms/ files...."
                                find /awips2/edex/data/utility/common_static/configured/${locSite}/warngen/geoms -regextype posix-egrep -iregex ".*warngen/geoms/${baseLineShapeFile}.*" -print -exec rm {} \; | while read deletedFile ; do
                                    debug_echo "\t\tRemoved:\t${deletedFile}" 
                                done
                                if [[ $? -eq 0 ]] ; then
                                    local restartEDEX=true
                                    debug_echo "\tSetting restartEDEX=true"
                                fi
                            fi
                        fi                              
                        unset doImport
                    fi
                    if [[ "${isUsingAgmgName}" ]]
                    then
                        echo -e "\tRenaming for AWIPS I naming convention....."
                        for tmpfile in $( ls ${shpFileName}.* ) 
                        do
                            tmpExt=$( echo ${tmpfile} | cut -f 2 -d'.' )
                            mv --force ${tmpfile} ${pathPrefix}/data/fxa/nationalData/${awipsName}.${tmpExt}
                            chmod 775 ${pathPrefix}/data/fxa/nationalData/${awipsName}.${tmpExt}
                            if [[ "${isCompressed}" && "${tmpExt}" == "shp" ]]; then debug_echo "\t\t\tRecompressing using ${compressUtil}" ; ${compressUtil} ${pathPrefix}/data/fxa/nationalData/${awipsName}.shp ; unset isCompressed ; fi
                        done
                        unset isUsingAgmgName
                    fi

                    color_echo yellow 0 "\t######### IMPORTANT NOTE #########"
                    echo -e "\tAWIPS II relies on accurate shapefiles.  If you notice a problem with an application using this shapefile after the import, call the NCF!"
                    echo -e "\tThey have instructions on how to re-import the previous version of the shapefile which was working before it is removed by subsequent config_awips2.sh runs"
                    color_echo yellow 0 "\t###### END IMPORTANT NOTE ########"
                fi
                modify_pgsec host maps md5 
				if [[ "${isCompressed}" ]]; then debug_echo "\t\t\tRecompressing using ${compressUtil}" ; ${compressUtil} ${shpFileName}.shp ; unset isCompressed ; fi
			fi
		fi
		cd ..
	done

        if [[ "${restartEDEX}" ]] ; then
            echo -e "\t\tChecking for EDEX to restart for regeneration of warngen geom files..."
            debug_echo "\tRestarting EDEX to regenerate" 
            startedService=1 && handle_request stop 
            while ps -wef|grep mode=request | grep -v grep > /dev/null ; do 
                sleep 15
            done
            handle_request start 
        fi

	
	echo_function Complete $FUNCNAME

}

function test_restart_edex() {

        echo -e "\t\tChecking for EDEX to restart for regeneration of warngen geom files..."
        debug_echo "\tRestarting EDEX to regenerate" 
        startedService=1 && handle_request stop 
        while ps -wef|grep mode=request | grep -v grep > /dev/null ; do 
            sleep 15
        done
        handle_request start 
}

function config_local_shapefiles() {
    
	# Created 8 June to import all shapefiles in a specific directory
	# Courtesy of Tom Kretz
	# uses funtion import_shape_file

	# USAGE:
	# 	config_local_shapefiles XXX
  
	# Arguments:
	# 	$1 = Localization Site (XXX)

	echo_function Begin $FUNCNAME

	locSite=$1
	compLocRoot=${EDEX_HOME}/data/utility/edex_static
	compLocDir=${compLocRoot}/site/${locSite}/shapefiles
	
	if [ ! -d ${compLocDir} ] 
	then 
		color_echo yellow 0 "NOTE:\tNo ${compLocDir} exists, skipping....."
		echo_function Complete $FUNCNAME 
		return 0
	else 
		cd ${compLocDir} 
	fi
      

	debug_echo "\tWorking in $(pwd)"

	for shp in $( find . -name "*.shp" )
	do
		local doImport=
		echo -e "\tFound Shapefile ${shp}"
		stageLoc=$( dirname ${shp} | sed -e 's/^.\///g' ) 
		if ! echo ${stageLoc} | grep '/' > /dev/null ; then stageLoc="" ; else stageLoc="/"${stageLoc%/*}; fi		
		#shpName=$( basename ${shp} ) 
		#shpName=$( echo $shpName | cut -f1 -d. )
		shpName=$( dirname ${shp} | sed -e 's/^.\///g' )
		if echo $shpName  | grep '/' > /dev/null ; then shpName=${shpName##*/}; fi
		get_simplev $shp

		

		# make shpName all lower case for the xml bundle file
		shpTitle=$shpName
		shpName=$( echo $shpName | tr [:upper:] [:lower:] )

		debug_echo "\tChecking for existing database ${shpName}"
		modify_pgsec host maps trust
		if [[ $( psql -U awips -h ${EDEXDBSVR} -d maps --tuples-only -c "select count(*) from mapdata.map_version where table_name='${shpName}';" ) -gt 0 ]] 
		then
			# database exists -- prompt user to removed
			shpImportTime=$( psql -U awips -h ${EDEXDBSVR} -d maps --tuples-only -c "select import_time from mapdata.map_version where table_name='${shpName}';" )
			shpImportDate=$( date -d "${shpImportTime}" +%s )
			shpFileModTime=$( stat -c %Y ${compLocDir}/${shp} )
			if [[ ${shpFileModTime} -gt ${shpImportDate} ]]
			then
				color_echo yellow 0 "\tA database named mapdata.${shpName} already exists, but the shape file is newer --> will import shapefile."
				doImport=1
			else
				color_echo yellow 0 "\tSkipping mapdata.${shpName}"
				debug_echo "\t\tDatabase import time = ${shpImportDate}\tShape File Modification Time = ${shpFileModTime}"
			fi				  
		else
			# database does not exists - import 
			debug_echo "\t\tDatabase not found, setting import = true"
			doImport=1
		fi
		modify_pgsec host maps md5

		if [[ "${doImport}" ]]
		then
			echo -e "\tImporting ${shpDesc} ${shp}\n"
			modify_pgsec host maps trust
			import_shape_file ${shpName} ${compLocDir}/${shp} "${SIMPLEV}"
			modify_pgsec host maps md5

			# now create the map .xml 
			xmlDir="/awips2/edex/data/utility/cave_static/site/${locSite}/bundles/maps${stageLoc//_/ }"
			xmlFile="${shpName}.xml"
			if [[ ! -d ${xmlDir} ]]
			then 
				echo -e "\tCreating ${xmlDir} ....... "
				if ! mkdir -p "${xmlDir}"
				then
					color_echo red 1 "ERROR: Creating ${xmlDir} failed and this is necessary - exiting!"
					return 1
				else 
					chown -R awips:awips "${xmlDir}"
				fi
			fi
			case "${shpDesc}" in
				"Point data shapefile"	)	resouceDataString="dbPointMapResourceData"	
								pointStyleString="POINT"
								;;
				*			)	resouceDataString="dbMapResourceData"	
								pointStyleString="NONE"
								;;
			esac
			xmlText="<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>
\t<!-- Created by $FUNCNAME of config_awips2.sh on $( date ) -->
<bundle>
    <displayList>
        <displays xsi:type=\"mapRenderableDisplay\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">
            <descriptor xsi:type=\"mapDescriptor\">
                <resource>
                    <loadProperties>
                        <capabilities>
                            <capability xsi:type=\"colorableCapability\" colorAsString=\"#9b9b9b\" />
                            <capability xsi:type=\"outlineCapability\" lineStyle=\"SOLID\" outlineOn=\"true\"
                                outlineWidth=\"1\" />
                            <capability xsi:type=\"pointCapability\" pointStyle=\"${pointStyleString}\"/>
                        </capabilities>
                        <resourceType>PLAN_VIEW</resourceType>
                    </loadProperties>
                    <properties isSystemResource=\"false\" isBlinking=\"false\" isMapLayer=\"true\" isHoverOn=\"false\"
                        isVisible=\"true\">
                        <pdProps maxDisplayWidth=\"100000000\" minDisplayWidth=\"0\" />
                    </properties>
                    <resourceData xsi:type=\"${resouceDataString}\">
                                                <table>mapdata.${shpName}</table>
                        <mapName>$( echo ${shpTitle} | sed -e "s/_/ /g" )</mapName>
                    </resourceData>
                </resource>
            </descriptor>
        </displays>
    </displayList>
</bundle>"
			if [[ -f ${xmlDir}/${xmlFile} && ! "${FORCE}" ]] 
			then
				color_echo yellow 0 "\tNOTE: ${xmlDir}/${xmlFile} already exists.  Not re-creating map bundle.  You can run with -f or remove this file if you would like it re-created"
			else
                                isConfigInXML=$( grep config_awips2 "${xmlDir}"/${xmlFile} 2> /dev/null )
				if [[ ! -f ${xmlDir}/${xmlFile} ]] || [[ -f ${xmlDir}/${xmlFile} && "${isConfigInXML}" ]]  
				then
					echo -e "${xmlText}" > ${xmlDir}/${xmlFile}
					chown awips:fxalpha "${xmlDir}"/${xmlFile}
				else
					color_echo yellow 0 "\tNOTE:  ${xmlDir}/${xmlFile} exists and appears to have been modified outside of config_awips2, so we will NOT overwrite" 
				fi
			fi
		fi
	done

	echo_function Complete $FUNCNAME
}

function config_mpe_grid() {

	# Created 8 June to create MPE.xml grid file
	
	# USAGE:
	# 	config_mpe_grid XXX
  
	# Arguments:
	# 	$1 = Localization Site (XXX)

	echo_function Begin $FUNCNAME

	locSite=$1
	compLocRoot=${EDEX_HOME}/data/utility/edex_static
	compLocDir=site/${locSite}/grib/grids
	templateDir=base/grib/grids
	
	cd ${compLocRoot}
	debug_echo "\tWorking in $(pwd)"
	create_subtree ${compLocDir} awips fxalpha


	convertScript=/awips/hydroapps/precip_proc/bin/convert_coord_file
	#coordFile=${EDEX_HOME}/data/utility/common_static/site/${locSite}/hydro/hydroapps/geo_data/${st3Value}/ascii/coord_${st3Value}.dat
	#coordFile=${pathPrefix}/awips/hydroapps/lx/geo_data/${st3Value}/ascii/coord_${st3Value}.dat 
	coordFile=${pathPrefix}${appsDirValue}/geo_data/${st3Value}/ascii/coord_${st3Value}.dat 

	${convertScript} ${coordFile} /tmp/tmpMPE.txt 
	${convertScript} ${coordFile} /tmp/tmpHPE.txt 

	cd ${compLocDir}
	for gridType in MPE HPE
	do
		case ${gridType} in
			"MPE"	)	gridOutFile=MPE.xml; gridNumber=304 ; gridDesc="MPE produced grid";;
			"HPE"	)	gridOutFile=DHR-MOSAIC.xml; gridNumber=303; gridDesc="DHR Mosaic grid" ;;
			*	)	debug_echo "\tgridType not valid" ; break ;;
		esac

		if [[ ! -f /tmp/tmp${gridType}.txt && ! -s /tmp/tmp${gridType}.txt ]] 
		then
			color_echo yellow 0 "NOTE:\ttmp${gridType}.txt not found!  SKIPPING creation of ${gridOutFile}"
			return 1
		else
			if [[ "${FORCE}" || ! -f ${gridOutFile} ]]
			then
				echo -e "\tCreating ${gridOutFile} .....\t\c"
				nxVal=$( grep ^Columns /tmp/tmp${gridType}.txt | awk '{print $2}') 
				nyVal=$( grep ^Rows /tmp/tmp${gridType}.txt | awk '{print $2}' )
				la1Val=$( grep ^Southwest /tmp/tmp${gridType}.txt  | awk '{print $3}' )
				lo1Val=$( grep ^Southwest /tmp/tmp${gridType}.txt  | awk '{print $4}' )
				parseXmlTag dx ${compLocRoot}/${templateDir}/${gridOutFile} 
				dxValue=$( echo ${XML_RETURN} )
				parseXmlTag dy ${compLocRoot}/${templateDir}/${gridOutFile}
				dyValue=$( echo ${XML_RETURN} )
				parseXmlTag lov ${compLocRoot}/${templateDir}/${gridOutFile}
				lovValue=$( echo ${XML_RETURN} )

				debug_echo "\n\t\tnxVal = ${nxVal}\tnyVal=${nyVal}"
				debug_echo "\n\t\tla1Val = ${la1Val}\tlo1Val=${lo1Val}"
				debug_echo "\n\t\tdxVal = ${dxValue}\tdyVal=${dyValue}"
				debug_echo "\n\t\tlovValue = ${lovValue}"

				echo -e "<polarStereoGridCoverage>" > ${gridOutFile}
				echo -e "    <name>${gridNumber}</name>" >> ${gridOutFile}
				echo -e "    <description>${gridDesc}</description>" >> ${gridOutFile}
				echo -e "    <la1>${la1Val}</la1>" >> ${gridOutFile} 
				echo -e "    <lo1>${lo1Val}</lo1>" >> ${gridOutFile}
				echo -e "    <firstGridPointCorner>LowerLeft</firstGridPointCorner>" >> ${gridOutFile}
				echo -e "    <nx>${nxVal}</nx>" >> ${gridOutFile} 
				echo -e "    <ny>${nyVal}</ny>" >> ${gridOutFile}
				echo -e "    <dx>${dxValue}</dx>" >> ${gridOutFile}
				echo -e "    <dy>${dyValue}</dy>" >> ${gridOutFile}
				echo -e "    <spacingUnit>km</spacingUnit>" >> ${gridOutFile}
				echo -e "    <minorAxis>6356775.0</minorAxis>" >> ${gridOutFile}
				echo -e "    <majorAxis>6378160.0</majorAxis>" >> ${gridOutFile}
				echo -e "    <lov>${lovValue}</lov>" >> ${gridOutFile}
				echo -e "</polarStereoGridCoverage>" >> ${gridOutFile}

				chown awips:awips ${gridOutFile}
				chmod 755 ${gridOutFile}

				echo -e "COMPLETE!"
			fi
			rm -f /tmp/tmp${gridType}.txt
		fi
	done

	echo_function Complete $FUNCNAME

	return 0

}

function config_mpe_hydroapps() {


	# Created 30 June to run scripts AFTER edex-ingest has been started
	# these scripts "localize" MPE files under the hydroapps directory.

	# set_hydro_env MUST be localized at this point.  
	# edex-ingest MUST be running 
	
	# USAGE:
	# 	config_mpe_hydroapps XXX
  
	# Arguments:
	# 	$1 = Localization Site (XXX)

	echo_function Begin $FUNCNAME

	locSite=$1

	case ${AII_RELEASEID} in 
		*	)	compLocRoot=${EDEX_HOME}/data/share ;;
	esac

	compLocDir=hydroapps/precip_proc/bin

	if [[ $( hostname | cut -f 1 -d- ) != "${EDEXSVR}" ]] || ! ps -wef | grep -w mode=ingest &> /dev/null
	then
		color_echo yellow 0 "\t\tNOTE: You should run this on ${EDEXSVR} after EDEX has been started!"
	else
		for runScript in run_create_mpe_gage_file run_create_mpe_station_lists run_create_freezing_station_list run_create_mpe_climo_lists run_create_triangles run_create_mpe_beam_height_file "run_mpe_fieldgen 3" run_dqc_preprocessor
		do
			debug_echo "\t\tRunning ${runScript}"
			if [[ "${runScript}" == "run_dqc_preprocessor" ]] ; then rm -f ${compLocRoot}/hydroapps/precip_proc/local/data/app/mpe/grid_masks/* ; fi
			su awips -lc "export EDEX_HOME=${EDEX_HOME} ;
				      export apps_dir=${compLocRoot}/hydroapps ; 
				      . ${compLocRoot}/hydroapps/set_hydro_env ;
				      cd ${compLocRoot}/${compLocDir} ;
				      ./${runScript} "
		done
	fi
			     
	echo_function Complete $FUNCNAME
	return 0
}

function wrap_gfe_color_tables() {


	# Created 7 July to wrap Virgil Middendorf's GFE conversion scripts.

	# USAGE:
	# 	wrap_gfe_color_tables XXX
  
	# Arguments:
	# 	$1 = Localization Site (XXX)

	echo_function Begin $FUNCNAME

	locSite=$1

	echo -ne "Would you like to converts AWIPS I GFE Color Table files into AWIPS II cmap files (y|n) ? "
	read continueMigration
	if ! answer_me ${continueMigration}
	then
		echo_function Complete $FUNCNAME
		return 0
	else
		# ./convertColorTables.py <siteID> <A1USER> <A2USER>
		PS3="Would you like to migrate a SITE or USER colorMaps(type 1 or 2)? "
		select migrateType in "SITE" "USER" 
		do
			case ${migrateType} in
				"SITE"	)	myA1user=SITE; myA2user=SITE ;;
				"USER"	)	# Ok, lets ask for a user name
						echo -ne "\nOk, input user name: "
						read myA1user
						if [[ ! -d /awips/GFESuite/primary/data/databases/${myA1user}/COLORTABLE/ ]]
						then
							echo -e "\t\tUser ${myA1user} doesn't have a COLORTABLE directory"
							echo_function Complete $FUNCNAME
							return 0
						fi ;;
			esac
			break
		done
		echo -e "\tAbout to run wrapped convertColorTables.py.....\n"

		${fullScriptPath}/vmgfe/convertColorTables.py ${locSite} ${myA1user} ${myA1user} 

		echo -e "Finished running wrapped convertColorTables.py.....\n"
	fi

	echo_function Complete $FUNCNAME
}

function wrap_gfe_wegroups() {


	# Created 7 July to wrap Virgil Middendorf's GFE conversion scripts.

	# USAGE:
	# 	wrap_gfe_color_tables XXX
  
	# Arguments:
	# 	$1 = Localization Site (XXX)

	echo_function Begin $FUNCNAME

	locSite=$1

	echo -ne "Would you like to convert AWIPS I GFE Weather Element Groups into AWIPS II xml files (y|n) ? "
	read continueMigration
	if ! answer_me ${continueMigration}
	then
		echo_function Complete $FUNCNAME
		return 0
	else
		# ./convertColorTables.py <siteID> <A1USER> <A2USER>
		PS3="Would you like to migrate a SITE or USER Weather Element Groups(type 1 or 2)? "
		select migrateType in "SITE" "USER" 
		do
			case ${migrateType} in
				"SITE"	)	myA1user=SITE; myA2user=SITE ;;
				"USER"	)	# Ok, lets ask for a user name
						echo -ne "\nOk, input user name: "
						read myA1user
						if [[ ! -d /awips/GFESuite/primary/data/databases/${myA1user}/TEXT/BUNDLE/ ]]
						then
							echo -e "\t\tUser ${myA1user} doesn't have a TEXT/BUNDLE directory"
							echo_function Complete $FUNCNAME
							return 0
						fi ;;
			esac
			break
		done
		echo -e "\tAbout to run wrapped convertWeGroups.py.....\n"

		${fullScriptPath}/vmgfe/convertWeGroups.py ${locSite} ${myA1user} ${myA1user} 

		echo -e "Finished running wrapped convertWeGroups.py.....\n"
	fi

	echo_function Complete $FUNCNAME
}

function wrap_gfe_configs() {


	# Created 7 July to wrap Virgil Middendorf's GFE conversion scripts.

	# USAGE:
	# 	wrap_gfe_configs XXX
  
	# Arguments:
	# 	$1 = Localization Site (XXX)

	echo_function Begin $FUNCNAME

	locSite=$1
	wrappedScript="convertGfeConfigs.py"
	wrappedDesc="GFE Configs"

	echo -ne "Would you like to convert AWIPS I ${wrappedDesc} into AWIPS II files (y|n) ? "
	read continueMigration
	if ! answer_me ${continueMigration}
	then
		echo_function Complete $FUNCNAME
		return 0
	else
		# ./convertColorTables.py <siteID> <A1USER> <A2USER>
		PS3="Would you like to migrate a SITE or USER ${wrappedDesc} (type 1 or 2)? "
		select migrateType in "SITE" "USER" 
		do
			case ${migrateType} in
				"SITE"	)	myA1user=SITE; myA2user=SITE ;;
				"USER"	)	# Ok, lets ask for a user name
						echo -ne "\nOk, input user name: "
						read myA1user
						if [[ ! -d /awips/GFESuite/primary/data/databases/${myA1user}/TEXT/GFECONFIG/ ]]
						then
							echo -e "\t\tUser ${myA1user} doesn't have a TEXT/GFECONFIG directory"
							echo_function Complete $FUNCNAME
							return 0
						fi ;;
			esac
			break
		done
		echo -e "\tAbout to run wrapped ${wrappedScript}.....\n"

		${fullScriptPath}/vmgfe/${wrappedScript} ${locSite} ${myA1user} ${myA1user} 

		echo -e "Finished running wrapped ${wrappedScript}.....\n"
	fi

	echo_function Complete $FUNCNAME
}

function wrap_gfe_samples() {


	# Created 7 July to wrap Virgil Middendorf's GFE conversion scripts.

	# USAGE:
	# 	wrap_gfe_samples XXX
  
	# Arguments:
	# 	$1 = Localization Site (XXX)

	echo_function Begin $FUNCNAME

	locSite=$1
	wrappedScript="convertSamples.py"
	wrappedDesc="GFE Edit Sample Set files"

	echo -ne "Would you like to convert AWIPS I ${wrappedDesc} into AWIPS II xml files (y|n) ? "
	read continueMigration
	if ! answer_me ${continueMigration}
	then
		echo_function Complete $FUNCNAME
		return 0
	else
		# ./convertColorTables.py <siteID> <A1USER> <A2USER>
		PS3="Would you like to migrate a SITE or USER ${wrappedDesc}(type 1 or 2)? "
		select migrateType in "SITE" "USER" 
		do
			case ${migrateType} in
				"SITE"	)	myA1user=SITE; myA2user=SITE ;;
				"USER"	)	# Ok, lets ask for a user name
						echo -ne "\nOk, input user name: "
						read myA1user
						if [[ ! -d /awips/GFESuite/primary/data/databases/${myA1user}/SAMPLE/ ]]
						then
							echo -e "\t\tUser ${myA1user} doesn't have a TEXT/GFECONFIG directory"
							echo_function Complete $FUNCNAME
							return 0
						fi ;;
			esac
			break
		done
		echo -e "\tAbout to run wrapped ${wrappedScript}.....\n"

		${fullScriptPath}/vmgfe/${wrappedScript} ${locSite} ${myA1user} ${myA1user} 

		echo -e "Finished running wrapped ${wrappedScript}.....\n"
	fi

	echo_function Complete $FUNCNAME
}

function wrap_gfe_timeranges() {


	# Created 7 July to wrap Virgil Middendorf's GFE conversion scripts.

	# USAGE:
	# 	wrap_gfe_timeranges XXX
  
	# Arguments:
	# 	$1 = Localization Site (XXX)

	echo_function Begin $FUNCNAME

	locSite=$1
	wrappedScript="convertTimeRanges.py"
	wrappedDesc="GFE Time Range files"

	echo -ne "Would you like to convert AWIPS I ${wrappedDesc} into AWIPS II files (y|n) ? "
	read continueMigration
	if ! answer_me ${continueMigration}
	then
		echo_function Complete $FUNCNAME
		return 0
	else
		# ./convertColorTables.py <siteID> <A1USER> <A2USER>
		PS3="Would you like to migrate a SITE or USER ${wrappedDesc}(type 1 or 2)? "
		select migrateType in "SITE" "USER" 
		do
			case ${migrateType} in
				"SITE"	)	myA1user=SITE; myA2user=SITE ;;
				"USER"	)	# Ok, lets ask for a user name
						echo -ne "\nOk, input user name: "
						read myA1user
						if [[ ! -d /awips/GFESuite/primary/data/databases/${myA1user}/TEXT/SELECTTR/ ]]
						then
							echo -e "\t\tUser ${myA1user} doesn't have a TEXT/SELECTTR/ directory"
							echo_function Complete $FUNCNAME
							return 0
						fi ;;
			esac
			break
		done
		echo -e "\tAbout to run wrapped ${wrappedScript}.....\n"

		${fullScriptPath}/vmgfe/${wrappedScript} ${locSite} ${myA1user} ${myA1user} 

		echo -e "Finished running wrapped ${wrappedScript}.....\n"
	fi

	echo_function Complete $FUNCNAME
}

function wrap_gfe_editareas() {


	# Created 7 July to wrap Virgil Middendorf's GFE conversion scripts.

	# USAGE:
	# 	wrap_gfe_editareas XXX
  
	# Arguments:
	# 	$1 = Localization Site (XXX)

	echo_function Begin $FUNCNAME

	locSite=$1
	wrappedScript="convertEditAreas.py"
	wrappedDesc="GFE EditAreas"

	echo -ne "Would you like to convert AWIPS I ${wrappedDesc} into AWIPS II xml files (y|n) ? "
	read continueMigration
	if ! answer_me ${continueMigration}
	then
		echo_function Complete $FUNCNAME
		return 0
	else
		# ./convertColorTables.py <siteID> <A1USER> <A2USER>
		PS3="Would you like to migrate a SITE or USER ${wrappedDesc}(type 1 or 2)? "
		select migrateType in "SITE" "USER" 
		do
			case ${migrateType} in
				"SITE"	)	myA1user=SITE; myA2user=SITE ;;
				"USER"	)	# Ok, lets ask for a user name
						echo -ne "\nOk, input user name: "
						read myA1user
						if [[ ! -d /data/local/gfe_editareas/${myA1user} ]]
						then
							echo -e "\t\tUser ${myA1user} doesn't have an exported gfe editareas directory"
							echo_function Complete $FUNCNAME
							return 0
						fi ;;
			esac
			break
		done
		echo -e "\tAbout to run wrapped ${wrappedScript}.....\n"

		${fullScriptPath}/vmgfe/${wrappedScript} ${locSite} ${myA1user} ${myA1user} 

		echo -e "Finished running wrapped ${wrappedScript}.....\n"
	fi

	echo_function Complete $FUNCNAME
}

function wrap_text_alarmalert() {

	# Created 16 September to wrap Matt Foster's TextAlarmConverter.py
	# TextAlarmConverter.py takes 1 argument, the file to be converted and outputs in current directory.

	# USAGE:
	#	wrap_text_alarmalert XXX
	
	# ARGUMENTS:
	#	XXX = AWIPS Site ID 

	
	echo_function Begin $FUNCNAME

	locSite=$1
	wrappedScript="TextAlarmConverter.py"
	defaultXmlName="DefaultSiteAlarms.xml"
	compLocRoot=${EDEX_HOME}/data/utility/common_static
	tmpPath="/tmp/"
	local arrayOfMigrated

	color_echo green 1 "|\n|----> Beginning migration text alarm alert files from AWIPS I to AWIPS II syntax"
	cd ${pathPrefix}/data/fxa/textWSwork
	touch ${tmpPath}/.$FUNCNAME
	find . -regextype posix-egrep -type f -regex "./(lx|xt)([0-9]|[a-z])-${platformName}.*/text.*Products.txt" | while read theFile
	do
		# need to do some parsing
		fileDevice=$( echo $theFile | cut -f2 -d'/' )
		fileName=$( echo $theFile | cut -f3 -d'/' )
		debug_echo "\tWorking with ${theFile}"
		debug_echo "\t\tfileDevice = ${fileDevice}"
		debug_echo "\t\tfileName = ${fileName}"

		# now check the device, see if it is :0 or :0.0, see if it has a partner and find the most recent version
		fileToMigrate=${fileDevice}/${fileName}
		case "${fileDevice}" in
			*":0"	)	partnerDevice=$( echo ${fileDevice}.0 ) ;;
			*":0.0"	)	partnerDevice=$(echo ${fileDevice%.0} ) ;;
			*	)	debug_echo "\tUnexpected device ${fileDevice} -- skipping" 
					continue ;; # unexpected, lets skip 
		esac

		debug_echo "\t\tpartnerDevice = ${partnerDevice}"

		if ls ${partnerDevice}/${fileName} > /dev/null 2>&1
		then
			if [[ ${fileDevice}/${fileName} -ot ${partnerDevice}/${fileName} ]]
			then
				debug_echo "\tNOTE:  ${fileDevice}/${fileName} is older than ${partnerDevice}/${fileName} -- Skipping"
				#fileToMigrate=${partnerDevice}/${fileName}
				#compLocDir=workstation/${partnerDevice%:0*}/alarms
				continue 
			else
				compLocDir=workstation/${fileDevice%:0*}/alarms
			fi
		else
			compLocDir=workstation/${fileDevice%:0*}/alarms
		fi

		# check to see if it is 0 bytes -- no need to migrate an empty file
		if [ ! -s ${fileToMigrate} ]
		then
			debug_echo "\tFile is 0 bytes, moving on..."
			continue 
		fi

		# Run Matt Foster's Script
		if ! echo ${arrayOfMigrated[@]} | grep -w "${fileToMigrate}" > /dev/null
		then
			echo -ne "\tMigrating ${fileToMigrate}: \t"
			if ${fullScriptPath}/${wrappedScript} ${fileToMigrate}
			then
				color_echo green 1 SUCCESSFUL
				arrayOfMigrated=( $(echo ${arrayOfMigrated[@]} ) "${fileToMigrate}" )
			else
				color_echo red 1 ERROR
				continue
			fi
		else
			debug_echo "\t${fileToMigrate} already in arrayOfMigrated[@]... skipping"
		fi
		
		# Move it into the right place.
		
		cd / && create_subtree ${compLocRoot}/${compLocDir} awips fxalpha 
		if [ ! -f ${compLocRoot}/${compLocDir}/${defaultXmlName} ] 
		then
			debug_echo "\tNo ${compLocRoot}/${compLocDir}/${defaultXmlName} exists, copying into place"
			su awips -lc "cp ${pathPrefix}/data/fxa/textWSwork/${fileToMigrate}.xml ${compLocRoot}/${compLocDir}/${defaultXmlName}"
		elif [[ ${compLocRoot}/${compLocDir}/${defaultXmlName} -nt ${tmpPath}/.$FUNCNAME ]]
		then
			# file was created, but by this script .. so append to it.  Because textAA and PA go in the same file 
			debug_echo "\t${compLocRoot}/${compLocDir}/${defaultXmlName} exists, appending onto this file"
			sed -i -e "/^<\/aapaCombined>/d " ${compLocRoot}/${compLocDir}/${defaultXmlName}
			sed -e "/^<?xml version/d " -e "/^<aapaCombined/d " ${pathPrefix}/data/fxa/textWSwork/${fileToMigrate}.xml >> ${compLocRoot}/${compLocDir}/${defaultXmlName}
		elif [[ "${FORCE}" ]]
		then
			debug_echo "\tDue to FORCE option, removing ${compLocRoot}/${compLocDir}/${defaultXmlName}"
			su awips -lc "rm -f ${compLocRoot}/${compLocDir}/${defaultXmlName}"
			su awips -lc "cp ${pathPrefix}/data/fxa/textWSwork/${fileToMigrate}.xml ${compLocRoot}/${compLocDir}/${defaultXmlName}"
			chown awips:fxalpha ${compLocRoot}/${compLocDir}/${defaultXmlName}
		fi
		cd ${pathPrefix}/data/fxa/textWSwork
	done

	cd /

	echo_function COMPLETE $FUNCNAME
}

function migrate_gfe_combo() {

	# Created 18 october to migrated GFE Combinations from AWIPS I to AWIPS II

	# USAGE:
	# 	migrate_gfe_combo XXX
  
	# Arguments:
	# 	$1 = Localization Site (XXX)

	echo_function Begin $FUNCNAME
	
	locSite=$1
	compLocRoot=${EDEX_HOME}/data/utility/
	

	cd ${compLocRoot}
	

	echo -ne "Would you like to convert AWIPS I GFE COMBINATIONS into AWIPS II xml files (y|n) ? "
	read continueMigration
	if ! answer_me ${continueMigration}
	then
		echo_function Complete $FUNCNAME
		return 0
	else
		#PS3="Would you like to migrate a SITE or USER ${wrappedDesc}? "
		#select migrateType in "SITE" "USER" 
		#do
			migrateType="SITE"
			case ${migrateType} in
				"SITE"	)	migrateFrom=${pathPrefix}/awips/GFESuite/primary/data/databases/SITE/TEXT/COMBINATIONS 
						compLocDir=cave_static/site/${locSite}/gfe/combinations/
						;;
		  		"USER"	)	# Ok, lets ask for a user name
						echo -ne "\nOk, input user name: "
						read myA1user
						if [[ ! -d ${pathPrefix}/awips/GFESuite/primary/data/databases/${myA1user}/TEXT/COMBINATIONS ]]
						then
							echo -e "\t\tUser ${myA1user} doesn't have an AWIPS I COMBINATIONS directory"
							echo_function Complete $FUNCNAME
							return 0
						else
							migrateFrom=${pathPrefix}/awips/GFESuite/primary/data/databases/${myA1user}/TEXT/COMBINATIONS
							compLocDir=cave_static/user/${myA1user}/gfe/combination 
						fi ;;
			esac
		#done

		debug_echo "\tWorking in $(pwd)"
		create_subtree ${compLocDir} awips fxalpha


		cd ${migrateFrom}
		debug_echo "\tWorking in $(pwd)"
		for comboFile in $( ls *.COMBINATIONS )
		do
			echo -ne "Migrating file ${comboFile} "
			AIIName=$( echo ${comboFile} | sed -e "s/Combinations_FP\(.\{2,5\}\)_FP\(...\)\.COMBINATIONS/Combinations_\1_\2\.py/1" )
			if echo ${AIIName} | grep COMBINATIONS > /dev/null
			then
				AIIName=$( echo ${comboFile} | sed -e "s/Combinations_FP\(.*\)\.COMBINATIONS/Combinations_\1.py/1" )
			fi
			if echo ${AIIName} | grep COMBINATIONS > /dev/null
			then
				echo -e "FAILED -- Can not find the AWIPS II Name for the file... SKIPPING"
			else
				echo -ne "into AWIPS II file ${AIIName}:\t" 
			fi
			if [[ ! -f ${compLocRoot}/${compLocDir}/${AIIName} ]] || [[ "${FORCE}" ]] 
			then
				if ! scp ${migrateFrom}/${comboFile} ${compLocRoot}/${compLocDir}/${AIIName} 
				then
					color_echo red 1 "FAILED -- contact support"
				else
					color_echo green 1 "SUCCESSFUL"
				fi
			else
				echo -e "SKIPPED - File exists."
			fi		
		done
	fi

	echo_function Complete $FUNCNAME
	
}

function migrate_gfe_paraminfo_from_cdl() {

	# Created 18 october to migrated GFE Combinations from AWIPS I to AWIPS II

	# USAGE:
	# 	migrate_gfe_combo XXX
  
	# Arguments:
	# 	$1 = Localization Site (XXX)

	echo_function Begin $FUNCNAME
	
	locSite=$1
	compLocRoot=${EDEX_HOME}/data/utility/
	compLocDir=edex_static/site/${locSite}/grib/parameterInfo
	convScript=/awips2/fxa/bin/convertCDL2XML
	stagingLocation="${pathPrefix}/data/fxa/customFiles"

	cd ${compLocRoot}
	

	echo -ne "Would you like to convert AWIPS I CDL Template(s) into AWIPS II parameterInfo xml files (y|n) ? "
	read continueMigration
	if ! answer_me ${continueMigration}
	then
		echo_function Complete $FUNCNAME
		return 0
	else
		cdlFileList=( $( ls ${stagingLocation}/*.cdl ) )
		PS3="Which CDL would you like to migrate? "
		select cdlFile in ${cdlFileList[@]/*\//} "NONE - EXIT"
		do
			if [[ "${cdlFile}" == "NONE - EXIT" ]] ; then 
				echo -e "Ok, exiting....." 
				echo_function "Complete" $FUNCNAME
				return 0
			fi
			cdlFileName=${cdlFile/.*/}
			echo -ne "\tJust to confirm, migrate ${stagingLocation}/${cdlFile} to ${compLocRoot}/${compLocDir}/${cdlFileName}.xml? "
			read continueMigration
			if ! answer_me ${continueMigration} ; then
				echo_function "Complete - User Abort" $FUNCNAME
				return 0
			fi
			if [[ -f ${compLocRoot}/${compLocDir}/${cdlFileName}.xml && ! ${FORCE} ]] ; then
				color_echo yellow 0 "\n\tNOTE:  ${compLocRoot}/${compLocDir}/${cdlFileName}.xml exists - please run with -f to over-write" 
			else
				printf "\n\t%-20s\t" "Converting ${stagingLocation}/${cdlFile} ---> ${compLocRoot}/${compLocDir}/${cdlFileName}.xml"
				if ${convScript} -f ${stagingLocation}/${cdlFile} -o ${compLocRoot}/${compLocDir}/ 2> /tmp/${FUNCNAME}_$(date +"%Y%m%d_%H%M%S"); then
					color_echo green 1 "OK" 
					chown awips:fxalpha ${compLocRoot}/${compLocDir}/${cdlFileName}.xml
				else
					color_echo red 1 "### ERROR ###" 
					echo -e "\t There was an error converting the CDL to XML.  Please contact support" 
				fi
			fi
		done
	fi

	echo_function "Complete" $FUNCNAME
	return 0 
}

function wrap_migrate_rmr() {

	# Created 21 November to migrate radarMultipleRequest using David Friedman's migrateRMRs.py - Thanks David! 

	# USAGE:
	# 	wrap_migrate_rmr XXX
  
	# Arguments:
	# 	$1 = Localization Site (XXX)

	echo_function Begin $FUNCNAME
	
	locSite=$1
	compLocRoot=${EDEX_HOME}/data/utility
	compLocDir=common_static/site/${locSite}/radar/rmr
	wrappedScript="migrateRMRs.py"
	defaultXmlName="rmrAvailableRequests.xml"

	cd ${compLocRoot}
	create_subtree ${compLocDir} awips fxalpha

	color_echo green 1 "\t--> Beginning migration of Radar Multiple Request Files from AWIPS I to AWIPS II syntax"
	if [[ ! -f ${compLocRoot}/${compLocDir}/${defaultXmlName} || "${FORCE}" ]]
	then
		if ! ${fullScriptPath}/${wrappedScript} ${pathPrefix}/data/fxa/radarMultipleRequests > ${compLocRoot}/${compLocDir}/${defaultXmlName} 
		then
			case $? in
				1	)	color_echo red 1 "\tERROR!  ${wrappedScript} exited with an error code.  This is most likely due to a bad entry in your AWIPS I radarMultipleRequests file.  Exiting"
						echo_function FAILED $FUNCNAME
						return 1 ;;
				2	)	color_echo yellow 0 "\tNOTE:  ${wrappedScript} was able to convert SOME but not ALL of your AWIPS I radarMultipleRequests Entries.\n\tThis is most likely due to a bad entry in your AWIPS I radarMultipleRequests file."
						chown awips:fxalpha ${compLocRoot}/${compLocDir}/${defaultXmlName} ;;
			esac
		else
			echo -e "\tSUCCESSFUL!" 
			chown awips:fxalpha ${compLocRoot}/${compLocDir}/${defaultXmlName} 
		fi
	else
		echo -e "\tNOTE: ${compLocRoot}/${compLocDir}/${defaultXmlName} exists, skipping....."
	fi
	
	echo_function COMPLETE $FUNCNAME

}


function run_bundle_converter() {

	fileName=$( echo "${procDir}" | sed -e "s/ /\\\ /g" )
	case "${procDir}" in
		"colorTables" | "customColorMaps.nc"	)
				if [[ $( ls ${compLocRoot}/${colorMapDir}/colormaps/*.cmap 2>/dev/null | wc -l ) -gt 0 ]] && [[ ! "${FORCE}" ]] 
				then
					color_echo yellow 0 "\tNOTE: There are already color map files in the colormaps directory, run with -f to overwrite"
				else

					if [[ "${procDir}" == "customColorMaps.nc" ]]
					then
						# this is site level 
						fullPathDir=/data/fxa/workFiles
					else
						fullPathDir=${inputRoot}/${inputUser}/${procDir}
					fi
					xmlRestingPlace=${compLocRoot}/${colorMapDir}/colormaps
					if [[ $( du -sk ${fullPathDir}/customColorMaps.nc | awk '{print $1}' ) -eq 0 ]]
					then
						color_echo yellow 0 "\tNOTE:  ${fullPathDir}/customColorMaps.nc is 0-byte .. skipping "
					else
						echo -e "\tConverting colorTables"
						su fxa -lc "setenv FXA_LOCAL_SITE ${locSite} ; cd ${fullPathDir} ; ${fullScriptPath}/bundleConverter/convertBundles c customColorMaps.nc ${xmlRestingPlace} " 2>&1 | while read outputLine
						do
							echo -e "\t\t${outputLine}"
						done
					fi
				fi
		;;
		*	)	
				#compLocDir=${compLocDir}/procedures
				if [[ -f ${compLocRoot}/${compLocDir}/"${procDir}".xml && ! "${FORCE}" ]] && ! grep config_awips2 ${compLocRoot}/${compLocDir}/"${procDir}".xml > /dev/null 
				then
					color_echo yellow 0 "\tNOTE: Not over-writing ${compLocRoot}/${compLocDir}/${procDir}.xml - Please run with -f if you wish to re-migrate"
				else
					echo -e "\tConverting procedure ${procDir}"
					if ls -d "${procDir}" > /dev/null 2>&1
					then
						cd "${procDir}"
						fullPathDir=${inputRoot}/${inputUser}/${fileName}
					elif ls -d "${procDir} " > /dev/null 2>&1
					then
						# the mbaker syndrome!  somehow the dir name ends in a space...
						cd "${procDir} "
						fullPathDir=${inputRoot}/${inputUser}/${fileName}\\\ /
					else
						color_echo red 1 "\tERROR: Can't change into the directory ... skipping"
						return 1
					fi
					local cnt=0
					debug_echo "\t\tWorking in $(pwd) with fullPathDir = ${fullPathDir}"
					if ! ls index > /dev/null 2>&1 
					then
						color_echo yellow 0 "\t\tNOTE:  No index file found for this procedure... skipping." 
						cd ..
						return 0 
					fi
					echo "${bundleStartText}" > ${compLocRoot}/${compLocDir}/"${procDir}".xml 
					unset procFileName
					unset procName
					while read line
					do
						debug_echo "\t\tAnalyzing line ${line} from index .... "
						case "${line}" in
							"FXA."*		)	# procedure file.
										debug_echo "\t\t\tFound Procedure File Name ${line}"
										procFileName="${line}" ;;
							*		)	# name
										debug_echo "\t\t\tFound Procedure Name Line ${line}"
										procName=$( echo "${line}" | sed -e 's/&/\&amp;/g' -e 's/\"/\&quot;/g' -e 's/</\&lt;/g' -e 's/>/\&gt;/g' -e "s/'/\&apos;/g" ) # added from TT#483360
									;;
						esac
						if [[ "${procFileName}" && "${procName}" ]] 
						then
							if [[ ! -f ${procFileName} ]]
							then
								color_echo red 1 "\tERROR: File ${procFileName} is listed in the index for this procedure, but doesn't exist -- SKIPPING"
								unset procFileName
								unset procName
								continue
							fi
							echo -e "        <bundle name=\"${procName}\">" >> ${compLocRoot}/${compLocDir}/"${procDir}".xml
							cnt=$(( cnt+1 ))  
							su fxa -lc "setenv FXA_LOCAL_SITE ${locSite} ; setenv LOG_PREF ${fullScriptPath}/bundleConverter/bundleLogPref ; setenv SITE_BUNDLE_INFO ${fullPathDir}/bundleConverter ; cd ${fullPathDir} ; ${fullScriptPath}/bundleConverter/convertBundles a ${procFileName} ${compLocRoot}/${compLocDir}/${fileName}${cnt}.xml " 2>&1 | while read outputLine
							do
								echo -e "\t\t${outputLine}"
							done
							if [[ ! -f ${compLocRoot}/${compLocDir}/"${procDir}"${cnt}.xml ]] 
							then
								color_echo red 1 "\tERROR:  File was not created.  Most likely convertBundles exited with Signal 11.  There must be a problem."
								color_echo red 1 "\t        Removing ${compLocRoot}/${compLocDir}/${procDir}.xml and exiting"
								echo -e "\tHINT:  Make sure you can su - fxa and when you type env you see FXA_LOCALIZATION_ROOT set!" 
								rm ${compLocRoot}/${compLocDir}/"${procDir}".xml 
								cd ..
								return 1
							fi
							totalLines=$( wc -l ${compLocRoot}/${compLocDir}/"${procDir}"${cnt}.xml | awk '{print $1}' )
							head -$(( totalLines-1 )) ${compLocRoot}/${compLocDir}/"${procDir}"${cnt}.xml | tail -$(( totalLines-3 )) >> ${compLocRoot}/${compLocDir}/"${procDir}".xml
							echo "        </bundle>" >>  ${compLocRoot}/${compLocDir}/"${procDir}".xml
							unset procFileName
							unset procName
							rm -f ${compLocRoot}/${compLocDir}/"${procDir}"${cnt}.xml
						fi
					done < index
					echo "${bundleEndText}" >>  ${compLocRoot}/${compLocDir}/"${procDir}".xml 
					cd ..
				fi
			;;
	esac

}

function wrap_bundle_converter() {


	# Created 7 November to cycle through Jim Ramer's bundle converter

	# USAGE:
	# 	wrap_bundle_converter XXX
  
	# Arguments:
	# 	$1 = Localization Site (XXX)


	echo_function Begin $FUNCNAME
	
	locSite=$1
	inputRoot=/data/fxa/userPrefs
	compLocRoot=${EDEX_HOME}/data/utility/
	bundleStartText="<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>
<procedure xmlns:ns2=\"group\" xmlns:ns3=\"http://www.example.org/productType\">
<!-- This bundle newly created by config_awips2 $FUNCNAME on $(date) -->
    <bundles>"
	bundleEndText="    </bundles>
</procedure>"
	cd ${compLocRoot}

	if [[ "${FORCE}" ]]
	then
		color_echo yellow 0 "\tYou are running this with ** FORCE ** option. "
		echo -e "\tThis means that you will REMOVE pre-existing AWIPS II procedures which have the same name as those you are trying to convert."
		local areYouSure
		answer_me ${areYouSure}
		while [[ $? -eq 255 ]]
		do
			echo -ne "\tIs this really what you want to do?  (Answer: Y or N) :  "
			read areYouSure
			answer_me ${areYouSure}
		done
		if [[ $? -eq 1 ]]
		then
			echo -e "\tOK, exiting...... "
			echo_function Complete $FUNCNAME
			return 0 
		fi
	fi

	PS3="Would you like to migrate All users or just one? "
	select migrateType in "ALL USERS" "SINGLE USER" 
	do
		case "${migrateType}" in
			"ALL USERS"	)	# ok, cycle through /data/fxa/userPrefs ... 
						cd ${inputRoot}
						for inputUser in $( ls )
						do
							if [[ ! -h ${inputUser} && "${inputUser}" != "bu__"* ]]
							then
							    echo -e "\tAnalyzing procedures for ${inputUser}......."
							    compLocDir="cave_static/user/${inputUser}"
							    colorMapDir="common_static/user/${inputUser}"
							    cd / && create_subtree ${compLocRoot}/${compLocDir}/procedures awips fxalpha 
							    cd / && create_subtree ${compLocRoot}/${colorMapDir}/colormaps awips fxalpha 
							    compLocDir=${compLocDir}/procedures
							    cd ${inputRoot}/${inputUser}
							    ls -1 | while read procDir
							    do
									
									debug_echo "\t\t Found procedure ${procDir}"
									run_bundle_converter
							    done
							fi
						done
						break
					;;
			"SINGLE USER"	)	# ok, ask for the user
						arrayOfProcDir=
						cd ${inputRoot}
						PS3="Select User By Number: "
						select inputUser in $( ls ) office_colormaps
						do
							echo -e "\tAnalyzing procedures/colorTables for ${inputUser}......."
							case "${inputUser}" in 
								"office_colormaps"	)	colorMapDir="common_static/site/${locSite}" 
												cd / && create_subtree ${compLocRoot}/${colorMapDir}/colormaps awips fxalpha 
												cd /data/fxa/workFiles
												echo -e "customColorMaps.nc" > /tmp/${FUNCNAME}.tmp 
												;;
								[a-z]*			)	compLocDir="cave_static/user/${inputUser}" 
												colorMapDir="common_static/user/${inputUser}" 
												cd / && create_subtree ${compLocRoot}/${compLocDir}/procedures awips fxalpha 
												cd / && create_subtree ${compLocRoot}/${colorMapDir}/colormaps awips fxalpha 
												compLocDir=${compLocDir}/procedures
												cd ${inputRoot}/${inputUser}
												ls -1 > /tmp/${FUNCNAME}.tmp 
												;;
								*			)	color_echo yellow 0 "\t*** INVALID USER ***"
												echo_function Complete $FUNCNAME
												return 0
												;;
							esac
#							for procDir in $( ls )
							cat /tmp/${FUNCNAME}.tmp | while read procDir 
							do
								    debug_echo "\t\t Found procedure ${procDir}"
								    #if [[ "${procDir}" != "colorTables" ]]
								    #then
										run_bundle_converter
								    #fi
							done
							chown -R awips:fxalpha ${compLocRoot}/${compLocDir} 
							chown -R awips:fxalpha ${compLocRoot}/${colorMapDir}
							break
						done
						break
					;;
		
		esac
	done

	echo_function Complete $FUNCNAME

}

function migrate_vb_menu() {


	# Created 14 November from Jim Calkins' VBconversion.sh  - Thank you Jim! 

	# USAGE:
	# 	migrate_vb_menu XXX
  
	# Arguments:
	# 	$1 = Localization Site (XXX)

	# NOTES
	# --> IMPORTANT -- this is an initial migration script which will become OBE after initial migration.Therefor it uses 
	#		   an output to AWIPS I mainScript as it's input.  This is not expected to change due to it's short lifecycle.



	echo_function Begin $FUNCNAME
	
	locSite=$1
	compLocRoot=${EDEX_HOME}/data/utility/
	local xtraTab=0
	local firstTimeThrough=true
	bundleStartText="<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>
<!-- Created automatically by config_awips2.sh $FUNCNAME on $(date)
${xmlHeader}
-->
<menuTemplate xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">"
	bundleEndText="</contribute>
</menuTemplate>"
	cd ${compLocRoot}

	if ! find_awips_config vb/browserFieldMenu.txt S
	then
		color_echo red 1 "\tERROR: Can not find browserFieldMenu.txt for site ${locSite}"
		return 1
	fi

	color_echo green 1 "\tMigrating AWIPS I browserFieldMenu.txt"
	compLocDir=cave_static/site/${locSite}/menus/xml
	cd ${compLocRoot}
	if ! create_subtree ${compLocDir} awips fxalpha 
	then
		return 1
	fi

	if [[ "${FORCE}" || ! -f ${compLocRoot}/${compLocDir}/fieldsMenus.xml ]]
	then
		echo "${bundleStartText}" > ${compLocRoot}/${compLocDir}/fieldsMenus.xml
		chown awips:fxalpha ${compLocRoot}/${compLocDir}/fieldsMenus.xml 
	else
		echo -e "\tNOTE: File already exists... SKIPPING"
		echo_function Complete $FUNCNAME && return 0
	fi

	if [[ ! -f ${pathPrefix}/tmp/testGridKeyServer_v.txt ]]
	then
		echo -e "\tAttempting to create ${pathPrefix}/tmp/testGridKeyServer_v.txt....."
		su fxa -lc "testGridKeyServer v > ${pathPrefix}/tmp/testGridKeyServer_v.txt"
	fi

	while read line
	do
		lineType=$( echo $line | sed -e "s/^[[:space:]]*//g" | awk '{print $1}' | sed -e "s/://g" )
		case "${lineType}" in 
			"menu"		) # this is a menu item 
					  debug_echo "\tMenu lineType Found"
					  if [[ ${xtraTab} -gt 0 ]] # this means we missed an endSubmenu somewhere!  oh no!
					  then
						echo -e "\tNOTE: Found a new menu label before all submenus were closed...."
						while [[ ${xtraTab} -gt 0 ]]
						do
						      debug_echo "\t\txtraTab=${xtraTab}"
						      xtraTab=$(( xtraTab-1 ))
						      strTabs=""
						      for _cnt in $( seq 0 ${xtraTab} )
						      do
							      strTabs="${strTabs}\t"
						      done
						      echo -e "${strTabs}</contribute>" >> ${compLocRoot}/${compLocDir}/fieldsMenus.xml 
						done
					  fi

					  if [[ ${numberOfButtons} -eq 0 && ${firstTimeThrough} == "false" ]] ; then
							# we didn't put anything in there so we need to delete the last contribute
							sed -i -e "$ d" ${compLocRoot}/${compLocDir}/fieldsMenus.xml
							echo -e "<!-- no buttons for ${lineInfo} menu item so it was removed --> " >> ${compLocRoot}/${compLocDir}/fieldsMenus.xml
					  fi

					  if [[ "${endTagFlag}" && ${numberOfButtons} -gt 0 ]] 
					  then
							debug_echo "\tendTagFlag set.. closing previous contribution" 
							echo -e "</contribute>" >> ${compLocRoot}/${compLocDir}/fieldsMenus.xml
							debug_echo "\tresetting xtraTab....."
							xtraTab=0
					  fi
					  lineInfo=$( echo $line | cut -f2 -d: )
					  echo -e "<!--\n${lineInfo} menu item\n -->" >> ${compLocRoot}/${compLocDir}/fieldsMenus.xml 
					  echo -e "<contribute xsi:type=\"toolBarItem\" toolItemName=${lineInfo}>" >> ${compLocRoot}/${compLocDir}/fieldsMenus.xml 
					  lastMenuTitle=${lineInfo}
					  debug_echo "\t ----- MENU ${lineInfo} ----- "
					  local endTagFlag=1 
					  local numberOfButtons=0
					  firstTimeThrough=false
					  ;;
			"submenu"	)
					  lineInfo=$( echo $line | cut -f2 -d: | sed -e "s/\"//g" -e "s/^[[:space:]]*//g" -e "s/[[:space:]]*$//g" )
					  strTabs=""
					  for _cnt in $( seq 0 ${xtraTab} )
					  do
						  strTabs="${strTabs}\t"
					  done
					  echo -e "${strTabs}<contribute xsi:type=\"toolbarSubMenu\" menuText=\"${lineInfo}\">" >> ${compLocRoot}/${compLocDir}/fieldsMenus.xml 
					  debug_echo "\t${strTabs}submenu lineType found.   Menu=${lastMenuTitle}"
					  lastSubMenuTitle=${lineInfo}
					  xtraTab=$(( xtraTab+1 ))
					  ;;
			"endSubmenu"	)
					  xtraTab=$(( xtraTab-1 ))
					  strTabs=""
					  for _cnt in $( seq 0 ${xtraTab} )
					  do
						  strTabs="${strTabs}\t"
					  done
					  if [[ ${xtraTab} -lt 0 ]] 
					  then
						debug_echo "\txtraTab = ${xtraTab} which is < 0 ... SKIPPING this contribute"
					  else
						debug_echo "\t${strTabs}endSubmenu lineType found.   Menu=${lastMenuTitle}  SubMenu=${lastSubMenuTitle}"
						echo -e "${strTabs}</contribute>" >> ${compLocRoot}/${compLocDir}/fieldsMenus.xml 
					  fi
					  ;;
			"title"		)
					  lineInfo=$( echo $line | cut -f2 -d: | sed -e "s/\"//g" -e "s/^[[:space:]]*//g" -e "s/[[:space:]]*$//g" )
					  strTabs=""
					  for _cnt in $( seq 0 ${xtraTab} )
					  do
						  strTabs="${strTabs}\t"
					  done
					  echo -e "${strTabs}<contribute xsi:type=\"titleImgItem\" titleText=\"${lineInfo}\" displayImage=\"true\" displayDashes=\"true\"/>" >> ${compLocRoot}/${compLocDir}/fieldsMenus.xml 
					  ;;
			"button"	)
					  buttonCode=$( echo "${line}" | awk '{print $2}' )
					  lineDesc=$( echo "${line}" | cut -f2 -d\" | sed -e "s/\"//g" -e "s/^[[:space:]]*//g" -e "s/[[:space:]]*$//g" -e "s/&/\&amp;/g" -e "s/>/\&gt\;/g" -e "s/</\&lt\;/g" )
					  if ! grep -w ^${buttonCode} ${pathPrefix}/tmp/testGridKeyServer_v.txt > /dev/null
					  then
						color_echo yellow 0 "\tNOTE: button ${buttonCode} doesn't have a match in testGridKeyServer_v.txt - contact support"
					  else
						fileID=$( grep -w ^${buttonCode} ${pathPrefix}/tmp/testGridKeyServer_v.txt | awk '{print $2}' | sed -e "s/://g" | sed -e "s/TPCSG_/TPCSG-/g" )
						strTabs=""
						for _cnt in $( seq 0 ${xtraTab} )
						do
							strTabs="${strTabs}\t"
						done
						case ${fileID} in
							"MxT"|"MnT" )	
								      if [[ "${lastSubMenuTitle}" == "MDL MOS" ]]
								      then
										fileID="${fileID}12hr"
								      fi ;;
							"TURB"	    )
								      if [[ "${lastSubMenuTitle}" == "Aviation" ]]
								      then
										fileID="TPFI"
								      fi ;;
							"ICPRB"		)
									  if [[ "${lastSubMenuTitle}" == "Aviation" ]]
								      then
										fileID="ICIP"
								      fi ;;
							"ICNG"		)
									  if [[ "${lastSubMenuTitle}" == "Aviation" ]]
								      then
										fileID="TIPD"
								      fi ;;
							"ICSEV"		)
									  if [[ "${lastSubMenuTitle}" == "Aviation" ]]
								      then
										fileID="ICI"
								      fi ;;
							"SIPD"		)
									  if [[ "${lastSubMenuTitle}" == "Aviation" ]]
								      then
										fileID="SLDP"
								      fi ;;
						esac
							
						echo -e "${strTabs}<contribute xsi:type=\"menuItem\" menuText=\"${lineDesc}\" key=\"${fileID}\" indentText=\"false\" />" >> ${compLocRoot}/${compLocDir}/fieldsMenus.xml 
					    (( numberOfButtons += 1 ))
					  fi
					  ;;
			*		)
					  color_echo red 1 "\tERROR:  Do not recognize line type ${lineType} in browserFieldMenu.txt" ;;
		esac

	done < ${retLocation}/${userFile}
	echo -e "${bundleEndText}" >> ${compLocRoot}/${compLocDir}/fieldsMenus.xml 
	
	echo_function Complete $FUNCNAME


}

function migrate_family_menu() {

	# Added 19 December 2011
	# Migrate the Volume menu in D2D from AWIPS I --> AWIPS II
	# Uses: familyDataMenus.auto, familyProductButtons.txtraTab

      

	echo_function Begin $FUNCNAME
	
	locSite=$1
	compLocRoot=${EDEX_HOME}/data/utility/

	bundleStartText="<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>
<!-- Created automatically by config_awips2.sh $FUNCNAME on $(date)
${xmlHeader}
-->
<menuTemplate xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">"
	bundleEndText="</contribute>
</menuTemplate>"
	cd ${compLocRoot}

	compLocDir=cave_static/site/${locSite}/menus/xml
	cd ${compLocRoot}
	if ! create_subtree ${compLocDir} awips fxalpha 
	then
		return 1
	fi
	
	color_echo green 1 "Migrating Families menu on D2D........."

	compLocDir=cave_static/site/${locSite}/menus/volume
	cd ${compLocRoot}
	if ! create_subtree ${compLocDir} awips fxalpha 
	then
		return 1
	fi

	for awipsIfile in familyDataMenus.auto familyProductButtons.txt 
	do
		if ! find_awips_config ${awipsIfile} S
		then
			color_echo red 1 "\tERROR: Can not find ${awipsIfile} for site ${locSite}"
			return 1
		else
			echo ${retLocation}/${userFile} > /tmp/${awipsIfile}.tmpLocation 
		fi
	done

	local menuIsOpen
	local subMenuIsOpen
	echo "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>" > ${compLocDir}/index.xml 
	echo -e "\t<!-- " >> ${compLocDir}/index.xml 
	echo -e "${xmlHeader}" >> ${compLocDir}/index.xml 
	echo -e "\t-->" >> ${compLocDir}/index.xml 
	echo -e "<menuContributionFile>" >> ${compLocDir}/index.xml
	echo -e "\t<substitute key=\"DGEXmodel\" value=\"DGEX185\" />" >> ${compLocDir}/index.xml
	echo -e "\t<substitute key=\"GFSmodel\" value=\"GFS213\" />" >> ${compLocDir}/index.xml
	echo -e "\t<substitute key=\"NAM12model\" value=\"ETA218\" />" >> ${compLocDir}/index.xml
	echo -e "\t<substitute key=\"NAM40model\" value=\"mesoEta212\" />" >> ${compLocDir}/index.xml
	echo -e "\t<substitute key=\"ARWmodel1\" value=\"HiResW-ARW-East\" />" >> ${compLocDir}/index.xml
	echo -e "\t<substitute key=\"ARWmodel2\" value=\"HiResW-ARW-West\" />" >> ${compLocDir}/index.xml
	echo -e "\t<substitute key=\"MMMmodel1\" value=\"HiResW-MMM-East\" />" >> ${compLocDir}/index.xml
	echo -e "\t<substitute key=\"MMMmodel2\" value=\"HiResW-MMM-West\" />" >> ${compLocDir}/index.xml
	while read line 
	do
		lineType=$( echo ${line} | sed -e "s/^[[:space:]]*//g" | awk '{print $1}' | sed -e "s/://g" )
		case "${lineType}" in
			"title"	)	
					if [[ "${menuIsOpen}" || "${subMenuIsOpen}" ]]
					then
						echo -e "</menuTemplate>" >> ${compLocDir}/${xmlFile}
						debug_echo "\tClosing ${xmlFile}"
						previousTitleId=${titleId}
						unset menuIsOpen
						unset subMenuIsOpen
					fi
					if [[ ! "${previousTitleId}" ]]
					then
						previousTitleId="VolumeBundles"
					fi
					lineInfo=$( echo $line | cut -f2 -d: | sed -e "s/\*//g" -e "s/\"//g" )
					xmlFile=$( echo $line | sed -e "s/ //g" -e "s/[-_,.]//g" )
					titleId="${xmlFile}Line"
					xmlFile=site${xmlFile}.xml 
					debug_echo "\tOpening ${xmlFile}"
					menuIsOpen=true
					echo -e "\t<include installTo=\"menu:volume?after=${previousTitleId}\" fileName=\"menus/volume/${xmlFile}\" />" >> ${compLocDir}/index.xml 
					echo "${bundleStartText}" > ${compLocDir}/${xmlFile} 
					echo -e "\t<contribute xsi::type=\"titleItem\" titleText=\"------ ${lineInfo} ------\" id=\"${titleId}\" />" >> ${compLocDir}/${xmlFile}
					;;
			"submenu" ) 	
					subMenuIsOpen=true
					previousTitleId=${titleId}
					lineInfo=$( echo $line | cut -f2 -d: | sed -e "s/\*//g" -e "s/\"//g" )
					xmlFile=$( echo $line | sed -e "s/ //g" -e "s/[-_,.]//g" )
					titleId="${xmlFile}Line"
					xmlFile=site${xmlFile}.xml 
					debug_echo "\tOpening ${xmlFile}"
					echo -e "\t<include subMenu=\"${lineInfo}\" installTo=\"menu:volume?after=${previousTitleId}\" fileName=\"menus/volume/${xmlFile}\" />" >> ${compLocDir}/index.xml 
					echo "${bundleStartText}" > ${compLocDir}/${xmlFile} 
					#echo -e "\t<contribute xsi::type=\"titleItem\" titleText=\"------ ${lineInfo} ------\" id=\"${titleId}\" />" >> ${compLocDir}/${xmlFile}
					;;
			"endSubmenu" )	
					unset subMenuIsOpen
					echo -e "</menuTemplate>" >> ${compLocDir}/${xmlFile}
					debug_echo "\tClosing ${xmlFile}"
					previousTitleId=${titleId}
					unset menuIsOpen
					unset subMenuIsOpen
					;;
			"productButton" )	echo ;; 
		esac
	done

}
